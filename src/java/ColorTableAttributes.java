// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.

package llnl.visit;

import java.util.Vector;

// ****************************************************************************
// Class: ColorTableAttributes
//
// Purpose:
//    This class contains the list of colortables.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

public class ColorTableAttributes extends AttributeSubject
{
    private static int ColorTableAttributes_numAdditionalAtts = 5;

    public ColorTableAttributes()
    {
        super(ColorTableAttributes_numAdditionalAtts);

        names = new Vector();
        colorTables = new Vector();
        defaultContinuous = new String("hot");
        defaultDiscrete = new String("levels");
        groupingFlag = false;
    }

    public ColorTableAttributes(int nMoreFields)
    {
        super(ColorTableAttributes_numAdditionalAtts + nMoreFields);

        names = new Vector();
        colorTables = new Vector();
        defaultContinuous = new String("hot");
        defaultDiscrete = new String("levels");
        groupingFlag = false;
    }

    public ColorTableAttributes(ColorTableAttributes obj)
    {
        super(obj);

        int i;

        names = new Vector(obj.names.size());
        for(i = 0; i < obj.names.size(); ++i)
            names.addElement(new String((String)obj.names.elementAt(i)));

        // *** Copy the colorTables field ***
        colorTables = new Vector(obj.colorTables.size());
        for(i = 0; i < obj.colorTables.size(); ++i)
        {
            ColorControlPointList oldObj = (ColorControlPointList)obj.colorTables.elementAt(i);
            colorTables.addElement(new ColorControlPointList(oldObj));
        }

        defaultContinuous = new String(obj.defaultContinuous);
        defaultDiscrete = new String(obj.defaultDiscrete);
        groupingFlag = obj.groupingFlag;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return ColorTableAttributes_numAdditionalAtts;
    }

    public boolean equals(ColorTableAttributes obj)
    {
        int i;

        // Compare the elements in the names vector.
        boolean names_equal = (obj.names.size() == names.size());
        for(i = 0; (i < names.size()) && names_equal; ++i)
        {
            // Make references to String from Object.
            String names1 = (String)names.elementAt(i);
            String names2 = (String)obj.names.elementAt(i);
            names_equal = names1.equals(names2);
        }
        // Compare the elements in the colorTables vector.
        boolean colorTables_equal = (obj.colorTables.size() == colorTables.size());
        for(i = 0; (i < colorTables.size()) && colorTables_equal; ++i)
        {
            // Make references to ColorControlPointList from Object.
            ColorControlPointList colorTables1 = (ColorControlPointList)colorTables.elementAt(i);
            ColorControlPointList colorTables2 = (ColorControlPointList)obj.colorTables.elementAt(i);
            colorTables_equal = colorTables1.equals(colorTables2);
        }
        // Create the return value
        return (names_equal &&
                colorTables_equal &&
                (defaultContinuous.equals(obj.defaultContinuous)) &&
                (defaultDiscrete.equals(obj.defaultDiscrete)) &&
                (groupingFlag == obj.groupingFlag));
    }

    // Property setting methods
    public void SetNames(Vector names_)
    {
        names = names_;
        Select(0);
    }

    public void SetDefaultContinuous(String defaultContinuous_)
    {
        defaultContinuous = defaultContinuous_;
        Select(2);
    }

    public void SetDefaultDiscrete(String defaultDiscrete_)
    {
        defaultDiscrete = defaultDiscrete_;
        Select(3);
    }

    public void SetGroupingFlag(boolean groupingFlag_)
    {
        groupingFlag = groupingFlag_;
        Select(4);
    }

    // Property getting methods
    public Vector  GetNames() { return names; }
    public Vector  GetColorTables() { return colorTables; }
    public String  GetDefaultContinuous() { return defaultContinuous; }
    public String  GetDefaultDiscrete() { return defaultDiscrete; }
    public boolean GetGroupingFlag() { return groupingFlag; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteStringVector(names);
        if(WriteSelect(1, buf))
        {
            buf.WriteInt(colorTables.size());
            for(int i = 0; i < colorTables.size(); ++i)
            {
                ColorControlPointList tmp = (ColorControlPointList)colorTables.elementAt(i);
                tmp.Write(buf);
            }
        }
        if(WriteSelect(2, buf))
            buf.WriteString(defaultContinuous);
        if(WriteSelect(3, buf))
            buf.WriteString(defaultDiscrete);
        if(WriteSelect(4, buf))
            buf.WriteBool(groupingFlag);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetNames(buf.ReadStringVector());
            break;
        case 1:
            {
                int len = buf.ReadInt();
                colorTables.clear();
                for(int j = 0; j < len; ++j)
                {
                    ColorControlPointList tmp = new ColorControlPointList();
                    tmp.Read(buf);
                    colorTables.addElement(tmp);
                }
            }
            Select(1);
            break;
        case 2:
            SetDefaultContinuous(buf.ReadString());
            break;
        case 3:
            SetDefaultDiscrete(buf.ReadString());
            break;
        case 4:
            SetGroupingFlag(buf.ReadBool());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + stringVectorToString("names", names, indent) + "\n";
        str = str + indent + "colorTables = {\n";
        for(int i = 0; i < colorTables.size(); ++i)
        {
            AttributeSubject s = (AttributeSubject)colorTables.elementAt(i);
            str = str + s.toString(indent + "    ");
            if(i < colorTables.size()-1)
                str = str + ", ";
            str = str + "\n";
        }
        str = str + "}\n";
        str = str + stringToString("defaultContinuous", defaultContinuous, indent) + "\n";
        str = str + stringToString("defaultDiscrete", defaultDiscrete, indent) + "\n";
        str = str + boolToString("groupingFlag", groupingFlag, indent) + "\n";
        return str;
    }

    // Attributegroup convenience methods
    public void AddColorTables(ColorControlPointList obj)
    {
        colorTables.addElement(new ColorControlPointList(obj));
        Select(1);
    }

    public void ClearColorTables()
    {
        colorTables.clear();
        Select(1);
    }

    public void RemoveColorTables(int index)
    {
        if(index >= 0 && index < colorTables.size())
        {
            colorTables.remove(index);
            Select(1);
        }
    }

    public int GetNumColorTables()
    {
        return colorTables.size();
    }

    public ColorControlPointList GetColorTables(int i)
    {
        ColorControlPointList tmp = (ColorControlPointList)colorTables.elementAt(i);
        return tmp;
    }


    public int GetColorTableIndex(String name)
    {
        int retval = -1;
        for(int i = 0; i < names.size(); ++i)
        {
            String n = (String)names.elementAt(i);
            if(n.equals(name))
            {
                retval = i;
                break;
            }
        }

        return retval;
    }

    public ColorControlPointList GetColorControlPoints(int index)
    {
        if(index >= 0 && index < colorTables.size())
            return (ColorControlPointList)colorTables.elementAt(index);
        else
            return null;
    }

    public ColorControlPointList GetColorControlPoints(String name)
    {
        int index = GetColorTableIndex(name);
        if(index >= 0 && index < colorTables.size())
            return (ColorControlPointList)colorTables.elementAt(index);
        else
            return null;
    }

    public ColorControlPointList GetDefaultColorControlPoints()
    {
        int index = GetColorTableIndex(defaultContinuous);
        if(index >= 0 && index < colorTables.size())
            return (ColorControlPointList)colorTables.elementAt(index);
        else
            return null;
    }

    public void AddColorTable(String name, ColorControlPointList cpts)
    {
        names.addElement(new String(name));
        Select(0);
        AddColorTables(cpts);
    }

    public void RemoveColorTable(String name)
    {
        int index = GetColorTableIndex(name);
        RemoveColorTable(index);
    }

    public void RemoveColorTable(int index)
    {
        if(index >= 0 && index < names.size())
        {
            String nameAt = (String)names.elementAt(index);
            boolean isDefaultContinuous = nameAt.equals(defaultContinuous);
            boolean isDefaultDiscrete = nameAt.equals(defaultDiscrete);

            // Remove the name from the vector.
            names.remove(index);
            Select(0);

            // Remove the color table from the vector.
            RemoveColorTables(index);

            // If it is the default color table that was removed, reset the
            // default color table to the first element.
            if(isDefaultContinuous)
            {
                if(names.size() > 0)
                {
                    nameAt = (String)names.elementAt(0);
                    SetDefaultContinuous(nameAt);
                }
                else
                    SetDefaultContinuous("");
            }
            if(isDefaultDiscrete)
            {
                if(names.size() > 0)
                {
                    nameAt = (String)names.elementAt(0);
                    SetDefaultDiscrete(nameAt);
                }
                else
                    SetDefaultDiscrete("");
            }
        }
    }

    // Attributes
    private Vector  names; // vector of String objects
    private Vector  colorTables; // vector of ColorControlPointList objects
    private String  defaultContinuous;
    private String  defaultDiscrete;
    private boolean groupingFlag;
}

