// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.

package llnl.visit;


// ****************************************************************************
// Class: KeyframeAttributes
//
// Purpose:
//    This class contains the attributes used for keyframing.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

public class KeyframeAttributes extends AttributeSubject
{
    private static int KeyframeAttributes_numAdditionalAtts = 3;

    public KeyframeAttributes()
    {
        super(KeyframeAttributes_numAdditionalAtts);

        enabled = false;
        nFrames = 20;
        nFramesWasUserSet = false;
    }

    public KeyframeAttributes(int nMoreFields)
    {
        super(KeyframeAttributes_numAdditionalAtts + nMoreFields);

        enabled = false;
        nFrames = 20;
        nFramesWasUserSet = false;
    }

    public KeyframeAttributes(KeyframeAttributes obj)
    {
        super(obj);

        enabled = obj.enabled;
        nFrames = obj.nFrames;
        nFramesWasUserSet = obj.nFramesWasUserSet;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return KeyframeAttributes_numAdditionalAtts;
    }

    public boolean equals(KeyframeAttributes obj)
    {
        // Create the return value
        return ((enabled == obj.enabled) &&
                (nFrames == obj.nFrames) &&
                (nFramesWasUserSet == obj.nFramesWasUserSet));
    }

    // Property setting methods
    public void SetEnabled(boolean enabled_)
    {
        enabled = enabled_;
        Select(0);
    }

    public void SetNFrames(int nFrames_)
    {
        nFrames = nFrames_;
        Select(1);
    }

    public void SetNFramesWasUserSet(boolean nFramesWasUserSet_)
    {
        nFramesWasUserSet = nFramesWasUserSet_;
        Select(2);
    }

    // Property getting methods
    public boolean GetEnabled() { return enabled; }
    public int     GetNFrames() { return nFrames; }
    public boolean GetNFramesWasUserSet() { return nFramesWasUserSet; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(enabled);
        if(WriteSelect(1, buf))
            buf.WriteInt(nFrames);
        if(WriteSelect(2, buf))
            buf.WriteBool(nFramesWasUserSet);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetEnabled(buf.ReadBool());
            break;
        case 1:
            SetNFrames(buf.ReadInt());
            break;
        case 2:
            SetNFramesWasUserSet(buf.ReadBool());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + boolToString("enabled", enabled, indent) + "\n";
        str = str + intToString("nFrames", nFrames, indent) + "\n";
        str = str + boolToString("nFramesWasUserSet", nFramesWasUserSet, indent) + "\n";
        return str;
    }


    // Attributes
    private boolean enabled;
    private int     nFrames;
    private boolean nFramesWasUserSet;
}

