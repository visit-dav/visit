// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.

package llnl.visit;


// ****************************************************************************
// Class: PointGlyphAttributes
//
// Purpose:
//    Attributes for point glyphs
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

public class PointGlyphAttributes extends AttributeSubject
{
    private static int PointGlyphAttributes_numAdditionalAtts = 6;

    public PointGlyphAttributes()
    {
        super(PointGlyphAttributes_numAdditionalAtts);

        autoSizeEnabled = true;
        pointSize = 0.05;
        pointType = 6;
        pointSizeVarEnabled = false;
        pointSizeVar = new String("default");
        pointSizePixels = 2;
    }

    public PointGlyphAttributes(int nMoreFields)
    {
        super(PointGlyphAttributes_numAdditionalAtts + nMoreFields);

        autoSizeEnabled = true;
        pointSize = 0.05;
        pointType = 6;
        pointSizeVarEnabled = false;
        pointSizeVar = new String("default");
        pointSizePixels = 2;
    }

    public PointGlyphAttributes(PointGlyphAttributes obj)
    {
        super(obj);

        autoSizeEnabled = obj.autoSizeEnabled;
        pointSize = obj.pointSize;
        pointType = obj.pointType;
        pointSizeVarEnabled = obj.pointSizeVarEnabled;
        pointSizeVar = new String(obj.pointSizeVar);
        pointSizePixels = obj.pointSizePixels;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return PointGlyphAttributes_numAdditionalAtts;
    }

    public boolean equals(PointGlyphAttributes obj)
    {
        // Create the return value
        return ((autoSizeEnabled == obj.autoSizeEnabled) &&
                (pointSize == obj.pointSize) &&
                (pointType == obj.pointType) &&
                (pointSizeVarEnabled == obj.pointSizeVarEnabled) &&
                (pointSizeVar.equals(obj.pointSizeVar)) &&
                (pointSizePixels == obj.pointSizePixels));
    }

    // Property setting methods
    public void SetAutoSizeEnabled(boolean autoSizeEnabled_)
    {
        autoSizeEnabled = autoSizeEnabled_;
        Select(0);
    }

    public void SetPointSize(double pointSize_)
    {
        pointSize = pointSize_;
        Select(1);
    }

    public void SetPointType(int pointType_)
    {
        pointType = pointType_;
        Select(2);
    }

    public void SetPointSizeVarEnabled(boolean pointSizeVarEnabled_)
    {
        pointSizeVarEnabled = pointSizeVarEnabled_;
        Select(3);
    }

    public void SetPointSizeVar(String pointSizeVar_)
    {
        pointSizeVar = pointSizeVar_;
        Select(4);
    }

    public void SetPointSizePixels(int pointSizePixels_)
    {
        pointSizePixels = pointSizePixels_;
        Select(5);
    }

    // Property getting methods
    public boolean   GetAutoSizeEnabled() { return autoSizeEnabled; }
    public double    GetPointSize() { return pointSize; }
    public int GetPointType() { return pointType; }
    public boolean   GetPointSizeVarEnabled() { return pointSizeVarEnabled; }
    public String    GetPointSizeVar() { return pointSizeVar; }
    public int       GetPointSizePixels() { return pointSizePixels; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(autoSizeEnabled);
        if(WriteSelect(1, buf))
            buf.WriteDouble(pointSize);
        if(WriteSelect(2, buf))
            buf.WriteInt(pointType);
        if(WriteSelect(3, buf))
            buf.WriteBool(pointSizeVarEnabled);
        if(WriteSelect(4, buf))
            buf.WriteString(pointSizeVar);
        if(WriteSelect(5, buf))
            buf.WriteInt(pointSizePixels);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetAutoSizeEnabled(buf.ReadBool());
            break;
        case 1:
            SetPointSize(buf.ReadDouble());
            break;
        case 2:
            SetPointType(buf.ReadInt());
            break;
        case 3:
            SetPointSizeVarEnabled(buf.ReadBool());
            break;
        case 4:
            SetPointSizeVar(buf.ReadString());
            break;
        case 5:
            SetPointSizePixels(buf.ReadInt());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + boolToString("autoSizeEnabled", autoSizeEnabled, indent) + "\n";
        str = str + doubleToString("pointSize", pointSize, indent) + "\n";
        str = str + intToString("pointType", pointType, indent) + "\n";
        str = str + boolToString("pointSizeVarEnabled", pointSizeVarEnabled, indent) + "\n";
        str = str + stringToString("pointSizeVar", pointSizeVar, indent) + "\n";
        str = str + intToString("pointSizePixels", pointSizePixels, indent) + "\n";
        return str;
    }


    // Attributes
    private boolean   autoSizeEnabled;
    private double    pointSize;
    private int pointType;
    private boolean   pointSizeVarEnabled;
    private String    pointSizeVar;
    private int       pointSizePixels;
}

