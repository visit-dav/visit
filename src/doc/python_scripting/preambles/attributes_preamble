Attribute Reference
===================

This chapter is an alphabetical listing of all the VisIt_ python *attribute* objects used to control VisIt_'s behavior.
By and large, VisIt's python attribute objects resemble C++ classes with constructors, public members and setter/getter methods.

For example, for the attribute object controlling the **Coordinate Swap** operator, the function ``CoordSwapAttributes()`` serves as the constructor (or *instantiator*).
It has members, ``newCoord1``, ``newCoord2``, and ``newCoord3`` each of which is an enumeration type that can take one of the three values, ``Coord1``, ``Coord2``, ``Coord3``.
In addition, it has setter/getter methods, ``SetNewCoord1()``, ``GetNewCoord1()`` and so forth.

For each attribute object, the constructor function is given in italics followed by a table of the object's member names.
The members themselves are not documented here, but in most cases their names are self explanatory.
The setter/getter *methods* are not documented here either.
When a member can take values only from a given list of options (e.g. an *enumeration*), the default option is printed first in italic followed by a comma separated list of the other available
options.

From within the running CLI, printing an attribute object with Python's ``print()`` method will list the members whereas diring an attribute object with Python's ``dir()`` method will list the setter/getter methods.
For more information on finding things and getting help from within the running CLI, be sure to read :ref:`the section on apropos <finding_stuff_from_python>`.

Many of the **Plot** and **Operator** attribute methods accept an optional ``1`` argument to indicate whether or not to return the *default* or *current* attributes.
For example, ``CurveAttributes()`` returns the default attributes for a **Curve** plot whereas ``CurveAttributes(1)`` returns the attributes of either the currently active **Curve** plot or the *first* **Curve** plot in the plot list regardless of whether it is selected or hidden.

Many functions return an integer where 1 means success and 0 means failure.
This behavior is represented by the type ``CLI_return_t`` in an attempt to distinguish it from functions that may utilize the full range of integers.
