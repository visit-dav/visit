###############################################################################
# Class: JobSubmitter_qsub_NCI
#
# Purpose:    Custom "qsub" job submitter for NCI Australia
#
# Modifications:
#
###############################################################################

class JobSubmitter_qsub_NCI(JobSubmitter_qsub):
    def __init__(self, launcher):
        super(JobSubmitter_qsub, self).__init__(launcher)

    def CreateFilename(self, root):
        tdate = time.asctime().replace(" ", "-")
        tuser = self.launcher.username()
        return os.path.join("/tmp", "%s.%s" % (root, tuser))

    def SetupPPN(self, nodes, procs, ppn, use_vis):
        args = ["-l", "ncpus=%s" % procs]
        return args

    def AssembleCommandLine(self):
        parcmd = self.Executable()
        parcmd = parcmd + self.HandleCWDPermissions()
        parcmd = parcmd + self.AddEnvironment()
        largs, use_vis = self.LauncherArgs()
        parcmd = parcmd + largs

        nodes = self.parallel.nn
        if nodes == None:
            nodes = self.parallel.np
        ppn = str(int(math.ceil(float(self.parallel.np) / float(nodes))))
        parcmd = parcmd + self.SetupPPN(nodes, self.parallel.np, ppn, use_vis)

        parcmd = parcmd + self.SetupTime()
        parcmd = parcmd + self.AdditionalSetup()

        if self.usettc:
            parcmd = parcmd + ["-l", "ttc=%s" % self.parallel.np]

        if self.parallel.partition != None:
            parcmd = parcmd + ["-q", self.parallel.partition]

        if self.parallel.bank != None:
            parcmd = parcmd + ["-P", self.parallel.bank]

        parcmd = parcmd + [self.tfilename]

        return parcmd


###############################################################################
# Class: NCILauncher
#
# Purpose:    Custom launcher for NCI Australia
#
# Modifications:
#
###############################################################################

class NCILauncher(MainLauncher):
    def __init__(self):
        super(NCILauncher, self).__init__()

    #
    # Override the JobSubmitterFactory method so the custom job submitter can
    # be returned.
    #
    def JobSubmitterFactory(self, launch):
        if launch[:4] == "qsub" or launch[:4] == "msub":
            return JobSubmitter_qsub_NCI(self)
        return super(NCILauncher, self).JobSubmitterFactory(launch)

# Launcher creation function
def createlauncher():
    return NCILauncher()
