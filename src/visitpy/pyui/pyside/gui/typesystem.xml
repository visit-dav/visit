<?xml version="1.0"?>
<typesystem package="pyside_gui">
    <load-typesystem name="typesystem_core.xml" generate="no"/>
    <load-typesystem name="typesystem_gui.xml" generate="no"/>
    <load-typesystem name="typesystem_widgets.xml" generate="no"/>
    <load-typesystem name="typesystem_opengl.xml" generate="no"/>

<!--
    <primitive-type name="std::string"/>
-->
    <object-type name="GUIWrapper">
        <modify-function signature="GUIWrapper()" access="private" />
        <modify-function signature="GUIWrapper(int&amp;,char**)" access="private" />
    </object-type>
    <object-type name="PySideGUI">
    <modify-function signature="PySideGUI()" access="private" />
    <modify-function signature="PySideGUI(int&amp;,char**)" access="private" />
    <add-function signature="PySideGUI(PySequence)">
    <inject-code>
      int    QApplicationArgCount;
      char** QApplicationArgValues;
      Shiboken::listToArgcArgv(%1, &amp;QApplicationArgCount, &amp;QApplicationArgValues, "PySideApp");
      cptr = new PySideGUI(QApplicationArgCount,QApplicationArgValues);
    </inject-code>
    </add-function>
    <modify-function signature="instance(int&amp;,char**)" access="private" />
    <add-function signature="instance(PySequence)" return-type="PySideGUI *">
    <inject-code>
        int    QApplicationArgCount;
        char** QApplicationArgValues;
        Shiboken::listToArgcArgv(%1, &amp;QApplicationArgCount, &amp;QApplicationArgValues, "PySideApp");
        PySideGUI *cppResult = PySideGUI::instance(QApplicationArgCount,QApplicationArgValues);
<!--
        pyResult = Shiboken::Converter&lt; ::PySideGUI * &gt;::toPython(cppResult);
-->
    </inject-code>
    </add-function>
    </object-type>
</typesystem>

