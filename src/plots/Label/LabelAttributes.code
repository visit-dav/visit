Target: xml2python
Code: PyLabelAttributes_setattr
Prefix:
Postfix:
    // Try to handle legacy fields
    if(obj == NULL)
    {
#define GETCOLOR if(!PyArg_ParseTuple(tuple, "iiii", &c[0], &c[1], &c[2], &c[3])) \
    { \
        c[3] = 255; \
        if(!PyArg_ParseTuple(tuple, "iii", &c[0], &c[1], &c[2])) \
        { \
            double dr, dg, db, da; \
            if(PyArg_ParseTuple(tuple, "dddd", &dr, &dg, &db, &da)) \
            { \
                c[0] = int(dr); \
                c[1] = int(dg); \
                c[2] = int(db); \
                c[3] = int(da); \
            } \
            else if(PyArg_ParseTuple(tuple, "ddd", &dr, &dg, &db)) \
            { \
                c[0] = int(dr); \
                c[1] = int(dg); \
                c[2] = int(db); \
                c[3] = 255; \
            } \
            else \
            { \
                PyObject *obj = NULL; \
                if(!PyArg_ParseTuple(tuple, "O", &obj)) \
                    success = false; \
                if(!PyTuple_Check(obj)) \
                    success = false; \
                if(PyTuple_Size(obj) < 3 || PyTuple_Size(obj) > 4) \
                    success = false; \
                for(int i = 0; i < PyTuple_Size(obj); ++i) \
                { \
                    PyObject *item = PyTuple_GET_ITEM(obj, i); \
                    if(PyInt_Check(item)) \
                        c[i] = int(PyInt_AS_LONG(PyTuple_GET_ITEM(obj, i))); \
                    else if(PyFloat_Check(item)) \
                        c[i] = int(PyFloat_AS_DOUBLE(PyTuple_GET_ITEM(obj, i))); \
                    else \
                        success = false; \
                } \
            } \
        } \
        PyErr_Clear(); \
    }

        LabelAttributesObject *LabelObj = (LabelAttributesObject *)self;
        FontAttributes font1 = LabelObj->data->GetTextFont1();
        FontAttributes font2 = LabelObj->data->GetTextFont2();
        if(strcmp(name, "textHeight1") == 0)
        {
            double val;
            if(!PyArg_ParseTuple(tuple, "d", &val))
            {
                Py_DECREF(tuple);
                return -1;
            }
            // Increase the value, new labels are smaller, we want
            // a better approximation of the original size
            font1.SetScale((val+0.02)*100);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "textHeight2") == 0)
        {
            double val;
            if(!PyArg_ParseTuple(tuple, "d", &val))
            {
                Py_DECREF(tuple);
                return -1;
            }
            // Increase the value, new labels are smaller, we want
            // a better approximation of the original size
            font2.SetScale((val+0.02)*100);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "specifyTextColor1") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            font1.SetUseForegroundColor(ival == 0 ? 1: 0);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "specifyTextColor2") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            font2.SetUseForegroundColor(ival == 0 ? 1: 0);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "textColor1") == 0)
        {
            int c[4];
            bool success = true;
            GETCOLOR;
            if (success)
            {
                font1.GetColor().SetRgba(c[0], c[1], c[2], c[3]);
                Py_INCREF(Py_None);
                obj = Py_None;
            }
        }
        else if(strcmp(name, "textColor2") == 0)
        {
            int c[4];
            bool success = true;
            GETCOLOR;
            if (success)
            {
                font2.GetColor().SetRgba(c[0], c[1], c[2], c[3]);
                Py_INCREF(Py_None);
                obj = Py_None;
            }
        }
        if (obj != NULL)
        {
            LabelObj->data->SetTextFont1(font1);
            LabelObj->data->SetTextFont2(font2);
        }
    }

Target: xml2atts
Initialization: textFont1
    textFont1.GetColor().SetRgb(255, 0, 0);
    textFont1.SetScale(4);


Initialization: textFont2
    textFont2.GetColor().SetRgb(0, 0, 255);
    textFont2.SetScale(4);


Function: ChangesRequireRecalculation
Declaration: virtual bool ChangesRequireRecalculation(const LabelAttributes &) const;
Definition:
bool
LabelAttributes::ChangesRequireRecalculation(const LabelAttributes &) const
{
    return false;
}

Function: VarChangeRequiresReset
Declaration: virtual bool VarChangeRequiresReset(void);
Definition:
bool
LabelAttributes::VarChangeRequiresReset()
{
    return true;
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: LabelAttributes::ProcessOldVersions
//
// Purpose: 
//   This method allows handling of older config/session files that may
//   contain fields that are no longer present or have been modified/renamed.
//
// Programmer: Kathleen Biagas
// Creation:   April 4, 2017 
//
// Modifications:
//
// ****************************************************************************

void
LabelAttributes::ProcessOldVersions(DataNode *parentNode,
                                    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("LabelAttributes");
    if(searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "3.0.0"))
    {
        DataNode *k = 0;
        if ((k = searchNode->GetNode("specifyTextColor1")) != 0)
        {
            bool specifyTextColor = k->AsBool();
            searchNode->RemoveNode(k, true);
            textFont1.SetUseForegroundColor(!specifyTextColor);
        }
        if ((k = searchNode->GetNode("specifyTextColor2")) != 0)
        {
            bool specifyTextColor = k->AsBool();
            searchNode->RemoveNode(k, true);
            textFont2.SetUseForegroundColor(!specifyTextColor);
        }
        if ((k = searchNode->GetNode("textHeight1")) != 0)
        {
            float height = k->AsFloat();
            searchNode->RemoveNode(k, true);
            textFont1.SetScale((double) (height+0.02)*100);
        }
        if ((k = searchNode->GetNode("textHeight2")) != 0)
        {
            float height = k->AsFloat();
            searchNode->RemoveNode(k, true);
            textFont2.SetScale((double) (height+0.02)*100);
        }
        if ((k = searchNode->GetNode("textColor1")) != 0)
        {
            ColorAttribute c1;
            c1.SetFromNode(k);
            textFont1.SetColor(c1);
            searchNode->RemoveNode(k, true);
        }
        if ((k = searchNode->GetNode("textColor2")) != 0)
        {
            ColorAttribute c2;
            c2.SetFromNode(k);
            textFont2.SetColor(c2);
            searchNode->RemoveNode(k, true);
        }
        DataNode *textFont1Node = new DataNode("textFont1");
        if (textFont1.CreateNode(textFont1Node, true, false))
            searchNode->AddNode(textFont1Node);
        else
            delete textFont1Node;
        DataNode *textFont2Node = new DataNode("textFont2");
        if (textFont2.CreateNode(textFont2Node, true, false))
            searchNode->AddNode(textFont2Node);
        else
            delete textFont2Node;
    }
}

Target: xml2python
Function: PyLabelAttributes_SetDefaults
Declaration: PyLabelAttributes_SetDefaults
Definition:
// ****************************************************************************
// Modifications:
//   Brad Whitlock, Thu Aug 4 14:35:00 PST 2005
//   Make defaultAtts point to the passed atts directly.
//
// ****************************************************************************

void
PyLabelAttributes_SetDefaults(const LabelAttributes *atts)
{
    defaultAtts = const_cast<LabelAttributes*>(atts);
}

Target: xml2info
Function: LabelViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: LabelViewerEnginePluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: whitlocb -- generated by xml2info
//  Creation:   Mon Aug 1 13:55:51 PST 2005
//
//  Modifications:
//    Brad Whitlock, Tue Aug 2 14:21:01 PST 2005
//    Added code to set the variableType in the plot attributes using the
//    metadata.
//
//    Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//    Changed API.
//
// ****************************************************************************

void
LabelViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    *(LabelAttributes*)atts = *defaultAtts;
    PrivateSetPlotAtts(atts, plot);
}

Function: LabelViewerEnginePluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: SubsetViewerPluginInfo::ReInitializePlotAtts
//
//  Purpose:
//    ReInitialize the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Brad Whitlock
//  Creation:   Tue Aug 2 14:23:05 PST 2005
//
//  Modifications:
//    Brad Whitlock, Fri Mar 26 15:22:11 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//    Changed API.
//
// ****************************************************************************

void
LabelViewerEnginePluginInfo::ReInitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    PrivateSetPlotAtts(atts, plot);
}

Function: LabelViewerEnginePluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: SubsetViewerPluginInfo::ResetPlotAtts
//
//  Purpose:
//    ReInitialize the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Brad Whitlock
//  Creation:   Tue Aug 2 14:23:05 PST 2005
//
//  Modifications:
//    Brad Whitlock, Fri Mar 26 15:22:11 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//    Changed API.
// ****************************************************************************

void
LabelViewerEnginePluginInfo::ResetPlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)

{
    ReInitializePlotAtts(atts, plot);
}

Function: LabelViewerEnginePluginInfo::PrivateSetPlotAtts
Declaration: void PrivateSetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
// Method: LabelViewerEnginePluginInfo::PrivateSetPlotAtts
//
// Purpose: 
//   Initializes the plot's varType attribute using the metadata.
//
// Arguments:
//   atts    : The attributes to initialize.
//   md      : The metadata object.
//   varName : The name of the plot's variable.
//
// Programmer: Brad Whitlock
// Creation:   Tue Aug 2 14:28:36 PST 2005
//
// Modifications:
//   Brad Whitlock, Tue Nov 15 09:49:41 PDT 2005
//   Added code to get the expression type if the DetermineVarType returns
//   a scalar. This allows us to get the right type for things made up of
//   scalars such as vectors.
//
//   Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//   Changed API.
//
// ****************************************************************************
#include <avtDatabaseMetaData.h>
#include <Expression.h>
#include <DebugStream.h>
#include <avtPlotMetaData.h>
void
LabelViewerEnginePluginInfo::PrivateSetPlotAtts(AttributeSubject *atts, 
    const avtPlotMetaData &plot)
{
    LabelAttributes *labelAtts = (LabelAttributes *)atts;

    //
    // Get the meta-data and initialize the variable type in the atts.
    //
    const avtDatabaseMetaData *md = plot.GetMetaData();
    if (md == NULL)
    {
        labelAtts->SetVarType(LabelAttributes::LABEL_VT_UNKNOWN_TYPE);
        return;
    }

    avtSubsetType st = md->DetermineSubsetType(plot.GetVariableName());
    if(st != AVT_UNKNOWN_SUBSET && st != AVT_MATERIAL_SUBSET)
    {
        labelAtts->SetVarType(LabelAttributes::LABEL_VT_SUBSET);
        debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_SUBSET);" << endl;
    }
    else
    {
        avtVarType t = md->DetermineVarType(plot.GetVariableName());

        if(t == AVT_SCALAR_VAR)
        {
            // The final variable type is scalar but we should check if the
            // variable is an expression. If so then we should take the
            // expression's output type if it differs from scalar. This
            // allows us to get the right type for vector expressions, etc.
            for(int i = 0; i < md->GetNumberOfExpressions(); ++i)
            {
                const Expression *e = md->GetExpression(i);
                if(e->GetName() == plot.GetVariableName())
                {
                    if(e->GetType() == Expression::VectorMeshVar)
                        t = AVT_VECTOR_VAR;
                    else if(e->GetType() == Expression::TensorMeshVar)
                        t = AVT_TENSOR_VAR;
                    else if(e->GetType() == Expression::SymmetricTensorMeshVar)
                        t = AVT_SYMMETRIC_TENSOR_VAR;
                    else if(e->GetType() == Expression::ArrayMeshVar)
                        t = AVT_ARRAY_VAR;

                    break;
                }
            }
        }

        if(t == AVT_MESH)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_MESH);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_MESH);" << endl;
        }
        else if(t == AVT_SCALAR_VAR)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_SCALAR_VAR);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_SCALAR_VAR);" << endl;
        }
        else if(t == AVT_VECTOR_VAR)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_VECTOR_VAR);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_VECTOR_VAR);" << endl;
        }
        else if(t == AVT_TENSOR_VAR)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_TENSOR_VAR);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_TENSOR_VAR);" << endl;
        }
        else if(t == AVT_SYMMETRIC_TENSOR_VAR)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_SYMMETRIC_TENSOR_VAR);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_SYMMETRIC_TENSOR_VAR);" << endl;
        }
        else if(t == AVT_ARRAY_VAR)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_ARRAY_VAR);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_ARRAY_VAR);" << endl;
        }
        else if(t == AVT_LABEL_VAR)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_LABEL_VAR);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_LABEL_VAR);" << endl;
        }
        else if(t == AVT_MATERIAL)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_MATERIAL);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_MATERIAL);" << endl;
        }
        else if(t == AVT_UNKNOWN_TYPE)
        {
            labelAtts->SetVarType(LabelAttributes::LABEL_VT_UNKNOWN_TYPE);
            debug4 << "labelAtts->SetVarType(LabelAttributes::LABEL_VT_UNKNOWN_TYPE);" << endl;
        }
    }
}

