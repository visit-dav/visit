Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const BoundaryAttributes &obj);
Definition:
// ****************************************************************************
// Modifications:
//    Jeremy Meredith, Mon Dec  9 16:30:54 PST 2002
//    Added smoothing level.
//
//    Kathleen Bonnell, Wed Nov 10 09:37:01 PST 2004
//    Added needsSecondaryVar.
//
//    Kathleen Biagas, Tue Dec 20 14:08:20 PST 2016
//    Removed needSecondaryVar, filledFlag, boundaryType.
//
// ****************************************************************************
bool
BoundaryAttributes::ChangesRequireRecalculation(const BoundaryAttributes &obj)
{
    return ((boundaryNames != obj.boundaryNames) ||
            (wireframe != obj.wireframe) ||
            (smoothingLevel != obj.smoothingLevel));
}

Function: VarChangeRequiresReset
Declaration: virtual bool VarChangeRequiresReset(void);
Definition:
bool
BoundaryAttributes::VarChangeRequiresReset()
{
    return true;
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: BoundaryAttributes::ProcessOldVersions
//
// Purpose:
//   This method allows handling of older config/session files that may
//   contain fields that are no longer present or have been modified/renamed.
//
// Programmer: Jeremy Meredith
// Creation:   June 18, 2003
//
// Modifications:
//    Kathleen Biagas, Tue Dec 20 14:08:20 PST 2016
//    Added items for configVersion < 2.13.0: boundaryType, filledFlag,
//    pointSize, pointSizeVarEnabled, pointSizeVar, pointSizePixels, pointType.
//
// ****************************************************************************
void
BoundaryAttributes::ProcessOldVersions(DataNode *parentNode,
                                       const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("BoundaryAttributes");
    if(searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "1.1.5"))
    {
        if (searchNode->GetNode("wireframe") != 0)
            searchNode->RemoveNode("wireframe");
    }

    if (VersionLessThan(configVersion, "2.13.0"))
    {
        if (searchNode->GetNode("boundaryType") != 0)
            searchNode->RemoveNode("boundaryType");
        if (searchNode->GetNode("pointSize") != 0)
            searchNode->RemoveNode("pointSize");
        if (searchNode->GetNode("pointSizeVarEnabled") != 0)
            searchNode->RemoveNode("pointSizeVarEnabled");
        if (searchNode->GetNode("pointSizeVar") != 0)
            searchNode->RemoveNode("pointSizeVar");
        if (searchNode->GetNode("pointSizePixels") != 0)
            searchNode->RemoveNode("pointSizePixels");
        if (searchNode->GetNode("pointType") != 0)
            searchNode->RemoveNode("pointType");
        if (searchNode->GetNode("filledFlag") != 0)
            searchNode->RemoveNode("filledFlag");
    }
    if (VersionLessThan(configVersion, "3.0.0"))
    {
        if (searchNode->GetNode("lineStyle") != 0)
            searchNode->RemoveNode("lineStyle");
    }
}

Target: xml2python
Code: PyBoundaryAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields

#define DEPRECATED_MESSAGE(type) \
    PyErr_WarnFormat(NULL, 3, "%s is no longer a valid Boundary attribute.\n" \
                    "It's value is being ignored, " \
                    "please remove it from your script.\n", type);

    // boundaryType and it's possible enumerations
    bool boundaryTypeFound = false;
    if (strcmp(name, "boundaryType") == 0)
    {
        boundaryTypeFound = true;
    }
    else if (strcmp(name, "Domain") == 0)
    {
        boundaryTypeFound = true;
    }
    else if (strcmp(name, "Group") == 0)
    {
        boundaryTypeFound = true;
    }
    else if (strcmp(name, "Material") == 0)
    {
        boundaryTypeFound = true;
    }
    else if (strcmp(name, "Unknown") == 0)
    {
        boundaryTypeFound = true;
    }
    if (boundaryTypeFound)
    {
        DEPRECATED_MESSAGE("boundaryType");
        return PyInt_FromLong(0L);
    }
    // pointType and it's possible enumerations
    bool pointTypeFound = false;
    if (strcmp(name, "pointType") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Box") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Axis") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Icosahedron") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Octahedron") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Tetrahedron") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "SphereGeometry") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Point") == 0)
    {
        pointTypeFound = true;
    }
    else if (strcmp(name, "Sphere") == 0)
    {
        pointTypeFound = true;
    }
    if (pointTypeFound)
    {
        DEPRECATED_MESSAGE("pointType");
        return PyInt_FromLong(0L);
    }
    if (strcmp(name, "pointSize") == 0)
    {
        DEPRECATED_MESSAGE("pointSize");
        return PyInt_FromLong(0L);
    }
    else if (strcmp(name, "pointSizePixels") == 0)
    {
        DEPRECATED_MESSAGE("pointSizePixels");
        return PyInt_FromLong(0L);
    }
    else if (strcmp(name, "pointSizeVarEnabled") == 0)
    {
        DEPRECATED_MESSAGE("pointSizeVarEnabled");
        return PyInt_FromLong(0L);
    }
    else if (strcmp(name, "pointSizeVar") == 0)
    {
        DEPRECATED_MESSAGE("pointSizeVar");
        return PyInt_FromLong(0L);
    }
    else if (strcmp(name, "filledFlag") == 0)
    {
        DEPRECATED_MESSAGE("filledFlag");
        return PyInt_FromLong(0L);
    }

    // lineStyle and it's possible enumerations
    bool lineStyleFound = false;
    if (strcmp(name, "lineStyle") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "SOLID") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DASH") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOT") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOTDASH") == 0)
    {
        lineStyleFound = true;
    }
    if (lineStyleFound)
    {
        DEPRECATED_MESSAGE("lineStyle");
        return PyInt_FromLong(0L);
    }

Code: PyBoundaryAttributes_setattr
Prefix:
Postfix:
    // Try and handle legacy fields
    if(obj == NULL)
    {
        if(strcmp(name, "filledFlag") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "boundaryType") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "pointType") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "pointSize") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "pointSizePixels") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "pointSizeVarEnabled") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "pointSizeVar") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "lineStyle") == 0)
        {
            PyErr_WarnFormat(NULL, 3, "'%s' is obsolute. It is being ignored", name);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }


Function: PyBoundaryAttributes_SetDefaults
Declaration: PyBoundaryAttributes_SetDefaults
Definition:
// ****************************************************************************
//  Modifications:
//    Kathleen Bonnell, Mon Dec  2 18:06:04 PST 2002
//    Make defaultAtts point to the passed atts directly.
//
// ****************************************************************************
void
PyBoundaryAttributes_SetDefaults(const BoundaryAttributes *atts)
{
    defaultAtts = const_cast<BoundaryAttributes*>(atts);
}

Target: xml2info
Function: BoundaryViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: BoundaryViewerEnginePluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: whitlocb -- generated by xml2info
//  Creation:   Tue Mar 18 09:01:21 PDT 2003
//
//  Modifications:
//    Kathleen Bonnell, Tue Nov  6 08:19:45 PST 2001
//    Create labels only from mesh related to varName, not from all
//    meshes.
//
//    Hank Childs, Wed Aug 14 11:30:18 PDT 2002
//    Only use the labels from the material we actually have.
//
//    Kathleen Bonnell, Thu Sep  5 10:55:47 PDT 2002
//    Moved bulk of code to PrivateSetPlotAtts to aid in maintenance, as it is
//    shared with ResetPlotAtts.
//
//    Brad Whitlock, Fri Mar 26 15:15:38 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//    Changed API.
//
// ****************************************************************************

void
BoundaryViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    *(BoundaryAttributes*)atts = *defaultAtts;

    PrivateSetPlotAtts(atts, plot);
}

Function: BoundaryViewerEnginePluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: BoundaryViewerEnginePluginInfo::ReInitializePlotAtts
//
//  Purpose:
//    ReInitialize the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Kathleen Bonnell
//  Creation:   December 5, 2002
//
//  Modifications:
//    Brad Whitlock, Fri Mar 26 15:15:38 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:31:20 PST 2007
//    Changed API.
//
// ****************************************************************************

void
BoundaryViewerEnginePluginInfo::ReInitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    PrivateSetPlotAtts(atts, plot);
}

Function: BoundaryViewerEnginePluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: BoundaryViewerEnginePluginInfo::ResetPlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: meredith -- generated by xml2info
//  Creation:   Fri Sep 7 10:53:06 PDT 2001
//
//  Modifications:
//    Kathleen Bonnell, Mon Apr 29 13:37:14 PDT 2002
//    Create labels only from mesh related to varName, not from all
//    meshes.
//
//    Hank Childs, Wed Aug 14 11:30:18 PDT 2002
//    Only use the labels from the material we actually have.
//
//    Kathleen Bonnell, Thu Sep  5 10:55:47 PDT 2002
//    Moved code to PrivateSetPlotAtts to aid in maintenance, as the code is
//    shared with InitializePlotAtts.
//
//    Brad Whitlock, Fri Mar 26 15:15:38 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//    Changed API.
//
// ****************************************************************************

void
BoundaryViewerEnginePluginInfo::ResetPlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    PrivateSetPlotAtts(atts, plot);
}

Function: BoundaryViewerEnginePluginInfo::PrivateSetPlotAtts
Declaration: void   PrivateSetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: BoundaryViewerEnginePluginInfo::PrivateSetPlotAtts
//
//  Purpose:
//    Initialize the plot attributes.
//
//  Arguments:
//    atts          The attribute subject to initialize.
//    hostName      The host name of the plot.
//    databaseName  The database name of the plot.
//    varName       The variable name of the plot.
//
//  Notes:
//    This code was pulled from ResetPlotAtts and InitializePlotAtts to
//    aid in maintenance, and reworkd to support groups.
//
//  Programmer: Kathleen Bonnell
//  Creation:   September 5, 2002
//
//  Modifications:
//    Kathleen Bonnell, Thu Dec  5 16:53:22 PST 2002
//    Changed exception from ImproperUse to InvalidVariable.
//
//    Brad Whitlock, Wed Nov 20 14:12:03 PST 2002
//    I added support for discrete color tables.
//
//    Kathleen Bonnell, Thu Sep  4 16:08:46 PDT 2003
//    Set colors, subsetNames for defaultAtts so that "Reset" won't zero
//    out the colors in the gui.
//
//    Brad Whitlock, Fri Mar 26 15:15:38 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:27:15 PST 2007
//    Changed API.
//
//    Kathleen Biagas, Thu Dec 15 16:51:01 PST 2016
//    Remove Subset logic as this plot only supports Materials.
//
// ****************************************************************************

#include <stdio.h>

#include <avtColorTables.h>
#include <avtDatabaseMetaData.h>
#include <avtBoundaryPlot.h>
#include <avtTypes.h>
#include <set>

#include <avtPlotMetaData.h>

#include <DebugStream.h>
#include <InvalidVariableException.h>

void
BoundaryViewerEnginePluginInfo::PrivateSetPlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    BoundaryAttributes *boundaryAtts = (BoundaryAttributes *)atts;

    //
    // Get the meta-data and initialize the boundary names and colors in the
    // new BoundaryAttributes object.
    //
    const avtDatabaseMetaData *md = plot.GetMetaData();
    if (md == NULL)
    {
        return;
    }

    avtDatabaseMetaData *nonConstmd = const_cast <avtDatabaseMetaData *>(md);

    std::string vn(plot.GetVariableName());

    const avtMaterialMetaData *mat = NULL;

    std::string meshName = nonConstmd->MeshForVar(vn);

    stringVector       sv;
    stringVector::const_iterator pos;
    std::set<int> groupSet;
    std::vector<int> gIDS;

    //
    // Ensure only Material subsets
    //
    if (nonConstmd->DetermineSubsetType(vn) != AVT_MATERIAL_SUBSET)
    {
        EXCEPTION1(InvalidVariableException, vn);
    }

    //
    // Create boundary names.
    //
    mat = md->GetMaterial(vn);
    if (mat != NULL)
    {
        for(pos = mat->materialNames.begin();
            pos != mat->materialNames.end(); ++pos)
        {
            sv.push_back(*pos);
        }
    }

    //
    // Add a color for each boundary name.
    //
    ColorAttribute *ca = new ColorAttribute[sv.size() + 1];
    avtColorTables *ct = avtColorTables::Instance();
    if(ct->IsDiscrete(ct->GetDefaultDiscreteColorTable()))
    {
        // The CT is discrete, get its color color control points.
        for(int i = 0; i < (int)sv.size(); ++i)
        {
            unsigned char rgb[3] = {0,0,0};
            ct->GetControlPointColor(ct->GetDefaultDiscreteColorTable(), i, rgb);
            ca[i].SetRed(int(rgb[0]));
            ca[i].SetGreen(int(rgb[1]));
            ca[i].SetBlue(int(rgb[2]));
        }
    }
    else
    {
        // The CT is continuous, sample the CT so we have a unique color
        // for each element in sv.
        unsigned char *rgb = ct->GetSampledColors(
            ct->GetDefaultDiscreteColorTable(), (int)sv.size());
        if(rgb)
        {
            for(size_t i = 0; i < sv.size(); ++i)
            {
                ca[i].SetRed(int(rgb[i*3]));
                ca[i].SetGreen(int(rgb[i*3+1]));
                ca[i].SetBlue(int(rgb[i*3+2]));
            }
            delete [] rgb;
        }
    }

    ColorAttributeList cal;
    int idx = 0;
    for(pos = sv.begin(); pos != sv.end(); ++pos)
    {
        if (idx < boundaryAtts->GetMultiColor().GetNumColors())
        {
            // The meshIndex is within the defaultAtts' color
            // vector size.
            cal.AddColors(boundaryAtts->GetMultiColor()[idx]);
        }
        else
        {
            // The meshIndex is greater than the size of the
            // defaultAtts' color vector. Use colors from the
            // default discrete color table.
            cal.AddColors(ca[idx]);
        }
        ++idx;
    }

    delete [] ca;

    // Set the boundary names and colors in the boundaryAtts.
    boundaryAtts->SetBoundaryNames(sv);
    boundaryAtts->SetMultiColor(cal);
    defaultAtts->SetBoundaryNames(sv);
    defaultAtts->SetMultiColor(cal);
}

