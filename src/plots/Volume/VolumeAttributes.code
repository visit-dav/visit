Code: SetFromNode
Prefix:
Postfix:
    if(colorControlPoints.GetNumControlPoints() < 2)
         SetDefaultColorControlPoints();

Initialization: colorControlPoints
    SetDefaultColorControlPoints();

Initialization: freeformOpacity
    for(int i = 0; i < 256; ++i)
        freeformOpacity[i] = (unsigned char)i;

Target: xml2java
Initialization: freeformOpacity
    freeformOpacity = new byte[256];
        for(int i = 0; i < 256; ++i)
            freeformOpacity[i] = (byte)i;

Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const VolumeAttributes &obj) const;
Definition:
// ****************************************************************************
//  Method:  VolumeAttributes::ChangesRequireRecalculation
//
//  Modifications:
//    Jeremy Meredith, Thu Oct  2 13:27:54 PDT 2003
//    Let changes in rendererType to force a recalculation.  This is 
//    appropriate since the 3D texturing renderer prefers different 
//    dimensions (i.e. powers of two) than the splatting renderer.
//
//    Hank Childs, Mon Dec 15 14:42:26 PST 2003
//    Recalculate if the smooth option was hit.
//
//    Hank Childs, Mon Nov 22 09:37:12 PST 2004
//    Recalculate if the ray trace button was hit.
//
//    Brad Whitlock, Wed Dec 15 09:31:24 PDT 2004
//    Removed doSoftware since it's now part of rendererType.
//
//    Kathleen Bonnell, Thu Mar  3 09:27:40 PST 2005
//    Recalculate if scaling or skewFactor changed for RayCasting.
//
//    Brad Whitlock, Tue Dec 23 16:58:42 PST 2008
//    Recalculate more often with a HW renderer mode so we can recalculate
//    the histogram.
//
//    Hank Childs, Fri Jan 29 14:23:45 MST 2010
//    Re-execute the pipeline if we need lighting.
//
//    Allen Harvey, Thurs Nov 3 7:21:13 EST 2011
//    Added checks for not doing resampling
//
//    Qi WU, Sat Jun 10 22:21:27 MST 2018
//    Added RayCastingOSPRay option for volume rendering
//
// ****************************************************************************

bool
VolumeAttributes::ChangesRequireRecalculation(const VolumeAttributes &obj) const
{
    if (opacityVariable != obj.opacityVariable)
        return true;

    if (compactVariable != obj.compactVariable)
        return true;

    if (resampleTarget != obj.resampleTarget)
        return true;

    if (resampleFlag != obj.resampleFlag)
        return true;

    if (rendererType == VolumeAttributes::RayCasting ||
        rendererType == VolumeAttributes::RayCastingSLIVR ||
        rendererType == VolumeAttributes::RayCastingOSPRay ||
        rendererType == VolumeAttributes::RayCastingIntegration)
    {
        // Trilinear requires ghost zone while Rasterization and KernelBased do not
        if ((sampling == Rasterization || sampling == KernelBased) && obj.sampling == Trilinear)
            return true;

        if ((sampling == Trilinear) && (obj.sampling == KernelBased || obj.sampling == Rasterization))
            return true;
        
        // We're in software mode. Any change to the renderer type requires
        // a reexecute.
        if(rendererType != obj.rendererType)
            return true;

        if (scaling != obj.scaling)
            return true;
        if (scaling == VolumeAttributes::Skew && skewFactor != obj.skewFactor)
            return true;
        if (lightingFlag != obj.lightingFlag)
            return true;
    }
    else
    {
        // We're in hardware mode now but if we're transitioning to software
        // then we need to reexecute. Transferring between any of the hardware
        // modes does not require a reexecute.
        if(obj.rendererType == VolumeAttributes::RayCasting ||
           obj.rendererType == VolumeAttributes::RayCastingSLIVR ||
           obj.rendererType == VolumeAttributes::RayCastingOSPRay ||
           obj.rendererType == VolumeAttributes::RayCastingIntegration)
        {
            return true;
        }

        // We need to reexecute on the engine for thse changes in HW mode.

        if(useColorVarMin != obj.useColorVarMin)
            return true;
        if(colorVarMin != obj.colorVarMin)
            return true;
        if(useColorVarMax != obj.useColorVarMax)
            return true;
        if(colorVarMax != obj.colorVarMax)
            return true;
        if(useOpacityVarMin != obj.useOpacityVarMin)
            return true;
        if(opacityVarMin != obj.opacityVarMin)
            return true;
        if(useOpacityVarMax != obj.useOpacityVarMax)
            return true;
        if(opacityVarMax != obj.opacityVarMax)
            return true;
        if(gradientType != obj.gradientType)
            return true;
        if(scaling != obj.scaling)
            return true;
        if(skewFactor != obj.skewFactor)
            return true;
    }

    if (smoothData != obj.smoothData)
        return true;

    return false;
}

Function: GetTransferFunction
Declaration: void GetTransferFunction(unsigned char *rgba) const;
Definition:

// ****************************************************************************
// Method: VolumeAttributes::GetTransferFunction
//
// Purpose: 
//   This method calculates the transfer function and stores it in the rgba
//   array that is passed in.
//
// Programmer: Brad Whitlock
// Creation:   Tue Aug 21 15:44:34 PST 2001
//
// Modifications:
//   Brad Whitlock, Thu Nov 21 15:05:25 PST 2002
//   GetColors has been moved to ColorControlPointList. I updated this code
//   to take that into account.
//
//   Jeremy Meredith, Thu Oct  2 13:29:40 PDT 2003
//   Made the method const.
//
//   Jeremy Meredith, Fri Feb 20 15:16:43 EST 2009
//   Made opacity mode be an enum instead of a flag.
//   Added support for alphas to come from a color table
//   instead of being specified by the user in the plot itself.
//
// ****************************************************************************

void
VolumeAttributes::GetTransferFunction(unsigned char *rgba) const
{
    unsigned char rgb[256 * 3];
    unsigned char alphas[256];
    const unsigned char *a_ptr;

    // Figure out the colors
    colorControlPoints.GetColors(rgb, 256, alphas);
    // Figure out the opacities
    if (opacityMode == FreeformMode)
        a_ptr = freeformOpacity;
    else if (opacityMode == GaussianMode)
    {
        GetGaussianOpacities(alphas);
        a_ptr = alphas;
    }
    else // color table mode
    {
        // we already got the opacities
        a_ptr = alphas;
    }

    unsigned char *rgb_ptr = rgb;
    unsigned char *rgba_ptr = rgba;
    for(int i = 0; i < 256; ++i)
    {
        // Copy the color
        *rgba_ptr++ = *rgb_ptr++;
        *rgba_ptr++ = *rgb_ptr++;
        *rgba_ptr++ = *rgb_ptr++;
        // Copy the alpha
        *rgba_ptr++ = *a_ptr++;
    }
}

Function: SetDefaultColorControlPoints
Declaration: void SetDefaultColorControlPoints();
Definition:
// ****************************************************************************
// Method: VolumeAttributes::SetDefaultColorControlPoints
//
// Purpose: 
//   This method replaces all of the color control points in the list with the
//   default color control points.
//
// Programmer: Brad Whitlock
// Creation:   Tue Aug 21 15:44:34 PST 2001
//
// Modifications:
//   
// ****************************************************************************

void
VolumeAttributes::SetDefaultColorControlPoints()
{
    const float positions[] = {0., 0.25, 0.5, 0.75, 1.};
    const unsigned char colors[5][4] = {
        {0,   0,   255, 255},
        {0,   255, 255, 255},
        {0,   255, 0,   255},
        {255, 255, 0,   255},
        {255, 0,   0,   255}};

    // Clear the color control point list.
    colorControlPoints.ClearControlPoints();

    // Set the default control points in the color control point list.
    for(int i = 0; i < 5; ++i)
    {
        ColorControlPoint cpt;
        cpt.SetPosition(positions[i]);
        cpt.SetColors(colors[i]);
        colorControlPoints.AddControlPoints(cpt);
    }
    SelectColorControlPoints();
}

Function: GetGaussianOpacities
Declaration: void GetGaussianOpacities(unsigned char *alphas) const;
Definition:
// ****************************************************************************
// Method: VolumeAttributes::GetGaussianOpacities
//
// Purpose: 
//   This method calculates the opacities using the object's gaussian control
//   point list and stores the results in the alphas array that is passed in.
//
// Arguments:
//   alphas : The return array for the colors.
//
// Programmer: Brad Whitlock
// Creation:   Thu Sep 6 10:23:59 PDT 2001
//
// Modifications:
//    Jeremy Meredith, Thu Oct  2 13:30:00 PDT 2003
//    Made the method const.
//
// ****************************************************************************
#include <math.h>
void
VolumeAttributes::GetGaussianOpacities(unsigned char *alphas) const
{
    int i;
    float values[256];
    for (i=0; i<256; i++)
        values[i] = 0.;

    for (int p=0; p<opacityControlPoints.GetNumControlPoints(); p++)
    {
        const GaussianControlPoint &pt =
                               opacityControlPoints.GetControlPoints(p);
        float pos    = pt.GetX();
        float width  = pt.GetWidth();
        float height = pt.GetHeight();
        float xbias  = pt.GetXBias();
        float ybias  = pt.GetYBias();
        for (int i=0; i<256; i++)
        {
            float x = float(i)/float(256-1);

            // clamp non-zero values to pos +/- width
            if (x > pos+width || x < pos-width)
            {
                values[i] = (values[i] > 0.) ? values[i] : 0.;
                continue;
            }

            // non-zero width
            if (width == 0)
                width = .00001;

            // translate the original x to a new x based on the xbias
            float x0;
            if (xbias==0 || x == pos+xbias)
            {
                x0 = x;
            }
            else if (x > pos+xbias)
            {
                if (width == xbias)
                    x0 = pos;
                else
                    x0 = pos+(x-pos-xbias)*(width/(width-xbias));
            }
            else // (x < pos+xbias)
            {
                if (-width == xbias)
                    x0 = pos;
                else
                    x0 = pos-(x-pos-xbias)*(width/(width+xbias));
            }

            // center around 0 and normalize to -1,1
            float x1 = (x0-pos)/width;

            // do a linear interpolation between:
            //    a gaussian and a parabola        if 0<ybias<1
            //    a parabola and a step function   if 1<ybias<2
            float h0a = exp(-(4*x1*x1));
            float h0b = 1. - x1*x1;
            float h0c = 1.;
            float h1;
            if (ybias < 1)
                h1 = ybias*h0b + (1-ybias)*h0a;
            else
                h1 = (2-ybias)*h0b + (ybias-1)*h0c;
            float h2 = height * h1;
            
            // perform the MAX over different guassians, not the sum
            values[i] = (values[i] > h2) ? values[i] : h2;
        }
    }

    // Convert to unsigned char and return.
    for(i = 0; i < 256; ++i)
    {
        int tmp = int(values[i] * 255.);
        if(tmp < 0)
            tmp = 0;
        else if(tmp > 255)
            tmp = 255;
        alphas[i] = (unsigned char)(tmp);
    }
}

Function: GetOpacities
Declaration: void GetOpacities(unsigned char *alphas);
Definition:
// ****************************************************************************
//  Method:  VolumeAttributes::GetOpacities
//
//  Purpose:
//    Get the actual opacities for the plot.
//
//  Modifications:
//    Jeremy Meredith, Fri Feb 20 15:16:43 EST 2009
//    Made opacity mode be an enum instead of a flag.
//    Added support for alphas to come from a color table
//    instead of being specified by the user in the plot itself.
//
// ****************************************************************************
void
VolumeAttributes::GetOpacities(unsigned char *alphas)
{
    if (opacityMode == FreeformMode)
    {
        for(int i = 0; i < 256; ++i)
            alphas[i] = freeformOpacity[i];
    }
    else if (opacityMode == GaussianMode)
    {
        GetGaussianOpacities(alphas);
    }
    else // color table mode
    {
        unsigned char rgbtmp[256 * 3];
        colorControlPoints.GetColors(rgbtmp, 256, alphas);
    }
}

Function: SetSmoothing
Declaration: void SetSmoothing(ColorControlPointList::SmoothingMethod val);
Definition:
void
VolumeAttributes::SetSmoothing(ColorControlPointList::SmoothingMethod val)
{
    colorControlPoints.SetSmoothing(val);
    Select(2, (void *)&colorControlPoints);
}

Function: GetSmoothing
Declaration: ColorControlPointList::SmoothingMethod GetSmoothing() const;
Definition:
ColorControlPointList::SmoothingMethod
VolumeAttributes::GetSmoothing() const
{
    return colorControlPoints.GetSmoothing();
}

Function: SetEqualSpacingFlag
Declaration: void SetEqualSpacingFlag(bool val);
Definition:
void
VolumeAttributes::SetEqualSpacingFlag(bool val)
{
    colorControlPoints.SetEqualSpacingFlag(val);
    Select(2, (void *)&colorControlPoints);
}

Function: GetEqualSpacingFlag
Declaration: bool GetEqualSpacingFlag() const;
Definition:
bool
VolumeAttributes::GetEqualSpacingFlag() const
{
    return colorControlPoints.GetEqualSpacingFlag();
}

Function: AnyNonTransferFunctionMembersAreDifferent
Declaration: bool AnyNonTransferFunctionMembersAreDifferent(const VolumeAttributes &) const;
Definition:
// ****************************************************************************
// Method: VolumeAttributes::AnyNonTransferFunctionMembersAreDifferent
//
// Purpose: 
//   This method returns true if any non-transfer function members are different.
//
// Programmer: Brad Whitlock
// Creation:   Thu Sep 6 10:23:59 PDT 2001
//
// Modifications:
//    Jeremy Meredith, Fri Feb 20 15:16:43 EST 2009
//    Made opacity mode be an enum instead of a flag.
//
// ****************************************************************************

bool
VolumeAttributes::AnyNonTransferFunctionMembersAreDifferent(const VolumeAttributes &rhs) const
{
    bool same = true;
    for(int i = 0; i < NumAttributes(); ++i)
    {
        // Skip any of the transfer function members.
        if(i == ID_colorControlPoints || 
           i == ID_opacityAttenuation || 
           i == ID_opacityMode || 
           i == ID_opacityControlPoints ||
           i == ID_freeformOpacity)
        {
            continue;
        }
        same &= FieldsEqual(i, &rhs);
    }

    return !same;
}

Target: xml2python
Function: VolumeAttributes_SetFreeformOpacity
Declaration: VolumeAttributes_SetFreeformOpacity
Definition:
// ****************************************************************************
//  Modifications:
//    Kathleen Bonnell, Fri Oct 14 08:24:34 PDT 2005
//    Added custom code, to parse different types of args:
//    (int index, int val) -- sets the opacity value at the specified index
//    (list or tuple object) --  as long as it is numeric and has length
//    of 256, will set the opacity values to the values in the list or tuple.
//
// ****************************************************************************

static PyObject *
VolumeAttributes_SetFreeformOpacity(PyObject *self, PyObject *args)
{
//
// THIS METHOD IS CUSTOM CODED!!!!!!.
//
    VolumeAttributesObject *obj = (VolumeAttributesObject *)self;

    unsigned char *cvals = obj->data->GetFreeformOpacity();
    int opacity, index;
    if(PyArg_ParseTuple(args, "ii", &index, &opacity))
    {
        if(index >= 0 && index < 256)
        {
            if(opacity < 0) opacity = 0;
            if(opacity > 255) opacity = 255;
            cvals[index] = (unsigned char)(opacity);
        }
    }
    else
    {
        PyObject     *tuple;
        if(!PyArg_ParseTuple(args, "O", &tuple))
        {
            return NULL;
        }
        if(PyTuple_Check(tuple) || PyList_Check(tuple))
        {
            if(PySequence_Size(tuple) != 256)
                return NULL;

            PyErr_Clear();
            for(int i = 0; i < PySequence_Size(tuple); ++i)
            {
                int c;
                PyObject *item = PySequence_GetItem(tuple, i);
                if(PyInt_Check(item))
                    c = int(PyInt_AS_LONG(item));
                else if(PyFloat_Check(item))
                    c = int(PyFloat_AS_DOUBLE(item));
                else if(PyLong_Check(item))
                    c = int(PyLong_AsDouble(item));
                else
                    c = 0;
                Py_DECREF(item);
                if(c < 0) c = 0;
                if(c > 255) c = 255;
                cvals[i] = (unsigned char)(c);
           }
        }
        else
            return NULL;
    }

    // Mark the freeformOpacity in the object as modified.
    obj->data->SelectFreeformOpacity();

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2info
Function: VolumeViewerEnginePluginInfo::Permits2DViewScaling
Declaration: virtual bool Permits2DViewScaling() const;
Definition:
bool
VolumeViewerEnginePluginInfo::Permits2DViewScaling() const
{
    return false;
}

Function: VolumeViewerEnginePluginInfo::InitializeGlobalObjects
Declaration: static void InitializeGlobalObjects();
Definition:
// ****************************************************************************
//  Method:  VolumeViewerEnginePluginInfo::InitializeGlobalObjects
//
//  Purpose:
//    Initialize the plot atts.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
//  Modifications:
//    Kathleen Biagas, Fri Jun  8 12:07:11 PDT 2018
//    Mimic the auto-init functionality of vtkVolumeRenderingOpenGL2.
//    Can't use it here, because the factory won't be unregistered when this
//    library is unloaded.
//
// ****************************************************************************

#include <vtkRenderingVolumeOpenGL2ObjectFactory.h>

static vtkRenderingVolumeOpenGL2ObjectFactory *volFactory = NULL;
static int volFactory_count = 0;

void
VolumeViewerEnginePluginInfo::InitializeGlobalObjects()
{
    if (VolumeViewerEnginePluginInfo::clientAtts == NULL)
    {
        VolumeViewerEnginePluginInfo::clientAtts  = new VolumeAttributes;
        VolumeViewerEnginePluginInfo::defaultAtts = new VolumeAttributes;
    }
    // Want to ensure only 1 factory gets registered for this lib
    if (++volFactory_count == 1)
    {
        volFactory = vtkRenderingVolumeOpenGL2ObjectFactory::New();
        vtkObjectFactory::RegisterFactory(volFactory);
        volFactory->Delete();
    }
}

Function: VolumeViewerEnginePluginInfo::~VolumeViewerEnginePluginInfo
Declaration: virtual ~VolumeViewerEnginePluginInfo();
Definition:
// ****************************************************************************
//  Method:  VolumeViewerEnginePluginInfo::Destructor
//
//  Purpose:
//    Unregister the volume factory.
//
//  Programmer: Kathleen Biagas
//  Creation:   June 8, 2018
//
//  Modifications:
//
// ****************************************************************************

VolumeViewerEnginePluginInfo::~VolumeViewerEnginePluginInfo()
{
    // Want to ensure only 1 factory gets unregistered for this lib
    if (--volFactory_count == 0)
    {
        vtkObjectFactory::UnRegisterFactory(volFactory);
    }
}


Target: xml2python
Function: VolumeAttributes_SetMaterialProperties
Declaration: VolumeAttributes_SetMaterialProperties
Definition:

/*static*/ PyObject *
VolumeAttributes_SetMaterialProperties(PyObject *self, PyObject *args)
{
    VolumeAttributesObject *obj = (VolumeAttributesObject *)self;

    double *dvals = obj->data->GetMaterialProperties();
    if(!PyArg_ParseTuple(args, "dddd", &dvals[0], &dvals[1], &dvals[2], &dvals[3]))
    {
        PyObject     *tuple;
        if(!PyArg_ParseTuple(args, "O", &tuple))
            return NULL;

        if(PyTuple_Check(tuple))
        {
            if(PyTuple_Size(tuple) != 4)
                return NULL;

            PyErr_Clear();
            for(int i = 0; i < PyTuple_Size(tuple); ++i)
            {
                PyObject *item = PyTuple_GET_ITEM(tuple, i);
                if(PyFloat_Check(item))
                    dvals[i] = PyFloat_AS_DOUBLE(item);
                else if(PyInt_Check(item))
                    dvals[i] = double(PyInt_AS_LONG(item));
                else if(PyLong_Check(item))
                    dvals[i] = PyLong_AsDouble(item);
                else
                    dvals[i] = 0.;
            }
        }
        else
            return NULL;
    }

    // Mark the materialProperties in the object as modified.
    obj->data->SelectMaterialProperties();

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2cmake
Condition: VISIT_SLIVR
Definitions: -DVISIT_SLIVR

Target: xml2cmake
Condition:       VISIT_OSPRAY
Includes:        ${OSPRAY_INCLUDE_DIR}
VLinkLibraries:  ${OSPRAY_LIBRARIES}
ELinkLibraries:  ${OSPRAY_LIBRARIES}


