Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const VectorAttributes &obj);
Definition:
bool
VectorAttributes::ChangesRequireRecalculation(const VectorAttributes &obj)
{
    return ((glyphLocation != obj.glyphLocation) ||
            (useStride != obj.useStride) ||
            (stride != obj.stride) ||
            (glyphLocation != obj.glyphLocation) ||
            (nVectors != obj.nVectors) ||
            (origOnly != obj.origOnly));
}

Function: GetAnimationScale
Declaration: double GetAnimationScale() const;
Definition:
#include <math.h>
double
VectorAttributes::GetAnimationScale() const
{
    const int nsteps = 100;
    double angle = 2.* M_PI * (double(animationStep % nsteps) / double(nsteps-1));
    return 0.75 + 0.25 * cos(angle);
}

Target: xml2info
Function: VectorViewerEnginePluginInfo::SupportsAnimation
Declaration: virtual bool SupportsAnimation() const;
Definition:
// ****************************************************************************
// Method: VectorViewerEnginePluginInfo::SupportsAnimation
//
// Purpose:
//   Tell VisIt that this plot supports animation.
//
// Programmer: Brad Whitlock
// Creation:   Fri Sep 13 11:29:59 PDT 2013
//
// Modifications:
//
// ****************************************************************************

bool
VectorViewerEnginePluginInfo::SupportsAnimation() const
{
    return true;
}

Function: VectorViewerEnginePluginInfo::AnimationReset
Declaration: virtual bool AnimationReset(AttributeSubject *atts, const avtPlotMetaData &plot);
Definition:
// ****************************************************************************
// Method: VectorViewerEnginePluginInfo::AnimationReset
//
// Purpose:
//   Resets the plot's animation.
//
// Arguments:
//   atts : The attribute subject that we may modify.
//   plot : The plot that we're animating.
//
// Returns:  True if the plot attributes changed as a result of reset.
//
// Programmer: Brad Whitlock
// Creation:   Fri Sep 13 11:29:59 PDT 2013
//
// Modifications:
//
// ****************************************************************************
#include <avtPlotMetaData.h>

bool
VectorViewerEnginePluginInfo::AnimationReset(AttributeSubject *atts, const avtPlotMetaData &)
{
    VectorAttributes *cAtts = (VectorAttributes *)atts;
    cAtts->SetAnimationStep(0);
    return true;
}


Function: VectorViewerEnginePluginInfo::AnimationStep
Declaration: virtual bool AnimationStep(AttributeSubject *atts, const avtPlotMetaData &plot);
Definition:
// ****************************************************************************
// Method: VectorViewerEnginePluginInfo::AnimationStep
//
// Purpose:
//   Take an animation step.
//
// Arguments:
//   atts : The attribute subject that we may modify.
//   plot : The plot that we're animating.
//
// Returns:  True if the plot attributes changed.
//
// Programmer: Brad Whitlock
// Creation:   Fri Sep 13 11:29:59 PDT 2013
//
// Modifications:
//
// ****************************************************************************

bool
VectorViewerEnginePluginInfo::AnimationStep(AttributeSubject *atts, const avtPlotMetaData &)
{
    VectorAttributes *cAtts = (VectorAttributes *)atts;
    cAtts->SetAnimationStep(cAtts->GetAnimationStep()+1);
    return true;
}

Target: xml2atts
Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: VectorAttributes::ProcessOldVersions
//
// Purpose:
//   This method allows handling of older config/session files that may
//   contain fields that are no longer present or have been modified/renamed.
//
// Programmer: Kathleen Biagas
// Creation:   April 4, 2018
//
// Modifications:
//
// ****************************************************************************

void
VectorAttributes::ProcessOldVersions(DataNode *parentNode,
                                    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("VectorAttributes");
    if(searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "3.0.0"))
    {
        if (searchNode->GetNode("lineStyle") != 0)
            searchNode->RemoveNode("lineStyle");
    }

    if (VersionLessThan(configVersion, "3.2.0"))
    {
        DataNode *k = 0;
        if((k = searchNode->GetNode("colorByMag")) != 0)
        {
            searchNode->AddNode(new DataNode("colorByMagnitude", k->AsBool()));
            searchNode->RemoveNode(k, true);
        }
    }
}

Target: xml2python
Code: PyVectorAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields in VectorAttributes
    if(strcmp(name, "colorByMag") == 0)
    {
        VectorAttributesObject *vectorObj = (VectorAttributesObject *)self;
        bool colorByMagnitude = vectorObj->data->GetColorByMagnitude();
        return PyInt_FromLong(colorByMagnitude?1L:0L);
    }
    if(strcmp(name, "highQuality") == 0)
    {
        VectorAttributesObject *vectorObj = (VectorAttributesObject *)self;
        bool highQuality = vectorObj->data->GetGeometryQuality() == VectorAttributes::High;
        return PyInt_FromLong(highQuality?1L:0L);
    }

    // lineStyle and it's possible enumerations
    bool lineStyleFound = false;
    if (strcmp(name, "lineStyle") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "SOLID") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DASH") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOT") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOTDASH") == 0)
    {
        lineStyleFound = true;
    }
    if (lineStyleFound)
    {
        fprintf(stdout, "lineStyle is no longer a valid Vector "
                       "attribute.\nIt's value is being ignored, please remove "
                       "it from your script.\n");
        return PyInt_FromLong(0L);
    }

Target: xml2python
Code: PyVectorAttributes_setattr
Prefix:
Postfix:
   // Try and handle legacy fields in VectorAttributes
    if(obj == NULL)
    {
        VectorAttributesObject *VectorObj = (VectorAttributesObject *)self;
        if(strcmp(name, "colorByMag") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                VectorObj->data->SetColorByMagnitude(false);
            else
                VectorObj->data->SetColorByMagnitude(true);

            Py_INCREF(Py_None);
            obj = Py_None;
        }
        if(strcmp(name, "highQuality") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                VectorObj->data->SetGeometryQuality(VectorAttributes::Fast);
            else
                VectorObj->data->SetGeometryQuality(VectorAttributes::High);

            Py_INCREF(Py_None);
            obj = Py_None;
        }
        if(strcmp(name, "lineStyle") == 0)
        {
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }

