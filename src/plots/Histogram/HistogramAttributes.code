Target: xml2python
Code: PyHistogramAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields

    // lineStyle and it's possible enumerations
    bool lineStyleFound = false;
    if (strcmp(name, "lineStyle") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "SOLID") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DASH") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOT") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOTDASH") == 0)
    {
        lineStyleFound = true;
    }
    if (lineStyleFound)
    {
        fprintf(stdout, "lineStyle is no longer a valid Histogram "
                       "attribute.\nIt's value is being ignored, please remove "
                       "it from your script.\n");
        return PyInt_FromLong(0L);
    }

Code: PyHistogramAttributes_setattr
Prefix:
Postfix:
    // Try and handle legacy fields
    if(obj == NULL)
    {
        if(strcmp(name, "lineStyle") == 0)
        {
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }

Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const HistogramAttributes &) const;
Definition:
bool
HistogramAttributes::ChangesRequireRecalculation(const HistogramAttributes &obj) const
{
    if (limitsMode != obj.GetLimitsMode())
        return true;
    if (minFlag != obj.GetMinFlag())
        return true;
    if (maxFlag != obj.GetMaxFlag())
        return true;
    if (minFlag && (min != obj.GetMin()))
        return true;
    if (maxFlag && (max != obj.GetMax()))
        return true;
    if (useBinWidths != obj.GetUseBinWidths())
        return true;
    if (outputType != obj.GetOutputType())
        return true;
    if (numBins != obj.GetNumBins())
        return true;
    if (weightVariable != obj.GetWeightVariable())
        return true;
    if (zone != obj.GetZone())
        return true;
    if (domain != obj.GetDomain())
        return true;
    if (histogramType != obj.GetHistogramType())
        return true;
    if ( dataScale != obj.GetDataScale() )
        return true;
    if ( binScale != obj.GetBinScale() )
        return true;
    if (normalizeHistogram != obj.GetNormalizeHistogram())
        return true;
    if (computeAsCDF != obj.GetComputeAsCDF())
        return true;
    return false;
}

Function: VarChangeRequiresReset
Declaration: virtual bool VarChangeRequiresReset(void);
Definition:
bool
HistogramAttributes::VarChangeRequiresReset()
{
    return true;
}

Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
bool
HistogramAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const HistogramAttributes *tmp = (const HistogramAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if(atts->TypeName() == "PickAttributes")
    {
        const PickAttributes *tmp = (const PickAttributes*)atts;
        int dom = tmp->GetDomain();
        dom = (dom < 0 ? 0 : dom);  // -1 is val for single domain problems
        SetDomain(dom);
        SetZone(tmp->GetElementNumber());
        retval = true;
    }

    return retval;
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: HistogramAttributes::ProcessOldVersions
//
// Purpose:
//   This method allows handling of older config/session files that may
//   contain fields that are no longer present or have been modified/renamed.
//
// Programmer: Kathleen Biagas
// Creation:   April 4, 2018
//
// Modifications:
//
// ****************************************************************************

void
HistogramAttributes::ProcessOldVersions(DataNode *parentNode,
                                    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("HistogramAttributes");
    if(searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "3.0.0"))
    {
        if (searchNode->GetNode("lineStyle") != 0)
            searchNode->RemoveNode("lineStyle");
    }
}

Target: xml2info
Function: HistogramViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: HistogramViewerEnginePluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: childs -- generated by xml2info
//  Creation:   Wed May 24 09:22:33 PDT 2006
//
//  Modifications:
//    Hank Childs, Wed May 24 08:45:06 PDT 2006
//    Populated with custom code.
//
//    Brad Whitlock, Wed Feb 21 14:26:13 PST 2007
//    Changed API.
//
// ****************************************************************************
#include <avtPlotMetaData.h>
#include <avtDatabaseMetaData.h>

void
HistogramViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    *(HistogramAttributes*)atts = *defaultAtts;
    HistogramAttributes *hatts = (HistogramAttributes *) atts;

    //
    // Get the meta-data and initialize the variable type in the atts.
    //
    const avtDatabaseMetaData *md = plot.GetMetaData();
    if (md == NULL)
    {
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
        return;
    }

    avtVarType t = md->DetermineVarType(plot.GetVariableName());
    if (t == AVT_SCALAR_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
    else if (t == AVT_ARRAY_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyVarsForSingleZone);
    else
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
}

Function: HistogramViewerEnginePluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: HistogramViewerEnginePluginInfo::ReInitializePlotAtts
//
//  Purpose:
//    ReInitialize the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Hank Childs
//  Creation:   May 24, 2006
//
//  Modifications:
//    Brad Whitlock, Wed Feb 21 14:25:26 PST 2007
//    Changed API.
//
// ****************************************************************************

void
HistogramViewerEnginePluginInfo::ReInitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    HistogramAttributes *hatts = (HistogramAttributes *) atts;

    //
    // Get the meta-data and initialize the variable type in the atts.
    //
    const avtDatabaseMetaData *md = plot.GetMetaData();
    if (md == NULL)
    {
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
        return;
    }

    avtVarType t = md->DetermineVarType(plot.GetVariableName());
    if (t == AVT_SCALAR_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
    else if (t == AVT_ARRAY_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyVarsForSingleZone);
    else
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
}

Function: HistogramViewerEnginePluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: HistogramViewerEnginePluginInfo::ResetPlotAtts
//
//  Purpose:
//    Reset the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Hank Childs
//  Creation:   May 24, 2006
//
//  Modifications:
//    Brad Whitlock, Wed Feb 21 14:26:31 PST 2007
//    Changed API.
//
// ****************************************************************************
void
HistogramViewerEnginePluginInfo::ResetPlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    ReInitializePlotAtts(atts, plot);
}

Function: HistogramViewerEnginePluginInfo::ProvidesLegend
Declaration: virtual bool ProvidesLegend() const;
Definition:
bool
HistogramViewerEnginePluginInfo::ProvidesLegend() const
{
    return false;
}

