Target: xml2python
Code: PyScatterAttributes_getattr
Prefix:
Postfix:
    // try to handle old attributes
    if(strcmp(name, "foregroundFlag") == 0)
    {
        if( ScatterAttributes_GetColorType(self, NULL) == PyInt_FromLong(0) )
        {
            PyObject *retval = PyInt_FromLong(1);
            return retval;
        }
        else //if( ScatterAttributes_GetColorType(self, NULL) == PyInt_FromLong(1) )
        {
            PyObject *retval = PyInt_FromLong(0);
            return retval;
        }
    }

Code: PyScatterAttributes_setattr
Prefix:
Postfix:

    // try to handle old attributes
    if(strcmp(name, "foregroundFlag") == 0)
    {
        PyObject *new_args = NULL;

        // from the tuple get the foreground value
        int ival;
        if(!PyArg_ParseTuple(tuple, "i", &ival))
              new_args = Py_BuildValue("(i)", 0);

        // foreground is false so single color and color type is 1
        else if( ival == 0 )
        {
            new_args = Py_BuildValue("(i)", 1);
        }
        // foreground is true so foreground color and color type is 0
        else if( ival == 1 )
        {
            new_args = Py_BuildValue("(i)", 0);
        }

        if (new_args)
        {
            obj = ScatterAttributes_SetColorType(self, new_args);

            Py_DECREF(new_args);
        }
    }

    // If the user changes one of the roles and one of the roles is
    // "Color" then assume that they want to use the color table.

    // The above maintains backwards compatibility. Below allows new
    // foreward new capibility.

    // If they do not want to use the color table and want to use
    // either the foreground or a single color they must set it after
    // all variables (roles) have been set.
    if( strcmp(name, "var1Role") == 0 ||
        strcmp(name, "var2Role") == 0 ||
        strcmp(name, "var3Role") == 0 ||
        strcmp(name, "var4Role") == 0 )
    {
        // A color variable has been specified.
        if(ScatterAttributes_GetVar1Role(self, NULL) == PyInt_FromLong(3) ||
           ScatterAttributes_GetVar2Role(self, NULL) == PyInt_FromLong(3) ||
           ScatterAttributes_GetVar3Role(self, NULL) == PyInt_FromLong(3) ||
           ScatterAttributes_GetVar4Role(self, NULL) == PyInt_FromLong(3) )
        {
            PyObject *new_args = Py_BuildValue("(i)", 2);
            obj = ScatterAttributes_SetColorType(self, new_args);
            Py_DECREF(new_args);
        }

        // No color variable so use the foreground as a default.
        else
        {
            PyObject *new_args = Py_BuildValue("(i)", 0);
            obj = ScatterAttributes_SetColorType(self, new_args);
            Py_DECREF(new_args);
        }
    }

Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const ScatterAttributes &) const;
Definition:
// ****************************************************************************
// Modifications:
//   Cyrus Harrison, Wed Aug 18 14:55:58 PDT 2010
//   Check if var1 has changed.
//
// ****************************************************************************
bool
ScatterAttributes::ChangesRequireRecalculation(const ScatterAttributes &obj) const
{
    bool var1Changed = false;
    if(var1Role != None && var1Role != Color)
    {
        bool minMaxChanged =
            var1MinFlag != obj.var1MinFlag ||
            var1MaxFlag != obj.var1MaxFlag ||
            var1Min != obj.var1Min ||
            var1Max != obj.var1Max;

        bool scalingChanged =
            var1Scaling != obj.var1Scaling ||
            (var1Scaling == Skew && var1SkewFactor != obj.var1SkewFactor);

        var1Changed = var1 != obj.var1 || minMaxChanged || scalingChanged;
    }
    else
        var1Changed = var1 != obj.var1;

    bool var2Changed = false;
    if(var2Role != None)
    {
        if(var2Role != Color)
        {
            bool minMaxChanged =
                var2MinFlag != obj.var2MinFlag ||
                var2MaxFlag != obj.var2MaxFlag ||
                var2Min != obj.var2Min ||
                var2Max != obj.var2Max;

            bool scalingChanged =
                var2Scaling != obj.var2Scaling ||
                (var2Scaling == Skew && var2SkewFactor != obj.var2SkewFactor);

            var2Changed = var2 != obj.var2 || minMaxChanged || scalingChanged;
        }
        else
            var2Changed = var2 != obj.var2;
    }

    bool var3Changed = false;
    if(var3Role != None)
    {
        if(var3Role != Color)
        {
            bool minMaxChanged =
                var3MinFlag != obj.var3MinFlag ||
                var3MaxFlag != obj.var3MaxFlag ||
                var3Min != obj.var3Min ||
                var3Max != obj.var3Max;

            bool scalingChanged =
                var3Scaling != obj.var3Scaling ||
                (var3Scaling == Skew && var3SkewFactor != obj.var3SkewFactor);

            var3Changed = var3 != obj.var3 || minMaxChanged || scalingChanged;
        }
        else
            var3Changed = var3 != obj.var3;
    }

    bool var4Changed = false;
    if(var4Role != None)
    {
        if(var4Role != Color)
        {
            bool minMaxChanged =
                var4MinFlag != obj.var4MinFlag ||
                var4MaxFlag != obj.var4MaxFlag ||
                var4Min != obj.var4Min ||
                var4Max != obj.var4Max;

            bool scalingChanged =
                var4Scaling != obj.var4Scaling ||
                (var4Scaling == Skew && var4SkewFactor != obj.var4SkewFactor);

            var4Changed = var4 != obj.var4 || minMaxChanged || scalingChanged;
        }
        else
            var4Changed = var4 != obj.var4;
    }

    return colorType != obj.colorType ||
           var1Role != obj.var1Role ||
           var2Role != obj.var2Role ||
           var3Role != obj.var3Role ||
           var4Role != obj.var4Role ||
           scaleCube != obj.scaleCube ||
           var1Changed ||
           var2Changed ||
           var3Changed ||
           var4Changed;
}

Target: xml2info
Function: ScatterGUIPluginInfo::CreatePluginWizard
Declaration: virtual QvisWizard *ScatterGUIPluginInfo::CreatePluginWizard(...);
Definition:
// ****************************************************************************
// Method: ScatterGUIPluginInfo::CreatePluginWizard
//
// Purpose:
//   Creates a Scatter plot wizard and returns a pointer to it.
//
// Arguments:
//   attr   : The attributes that should be used for the plot.
//   parent : The wizard's parent widget.
//   name   : The name of the wizard.
//
// Returns:    A pointer to the new wizard.
//
// Note:
//
// Programmer: Brad Whitlock
// Creation:   Tue Dec 14 09:48:06 PDT 2004
//
// Modifications:
//   Mark Blair, Mon Aug 21 18:29:00 PDT 2006
//   Made argument sequence compatible with upgraded base class.
//
//   Cyrus Harrison, Wed Aug 18 14:55:58 PDT 2010
//   Pass name of the first var selection to the gui.
//
// ****************************************************************************
#include <QvisScatterPlotWizard.h>
QvisWizard *
ScatterGUIPluginInfo::CreatePluginWizard(AttributeSubject *attr,
    QWidget *parent, const std::string &varName, const avtDatabaseMetaData *md,
    const ExpressionList *expList)
{
    return new QvisScatterPlotWizard(attr, parent,varName);
}

