Target: xml2python
Code: PyMeshAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields in MeshAttributes
    if(strcmp(name, "backgroundFlag") == 0)
    {
        MeshAttributesObject *meshObj = (MeshAttributesObject *)self;
        bool backgroundFlag = meshObj->data->GetOpaqueColorSource() == MeshAttributes::Background;
        return PyInt_FromLong(backgroundFlag?1L:0L);
    }
    else if(strcmp(name, "foregroundFlag") == 0)
    {
        MeshAttributesObject *meshObj = (MeshAttributesObject *)self;
        bool foregroundFlag = meshObj->data->GetMeshColorSource() == MeshAttributes::Foreground;
        return PyInt_FromLong(foregroundFlag?1L:0L);
    }

    // lineStyle and it's possible enumerations
    bool lineStyleFound = false;
    if (strcmp(name, "lineStyle") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "SOLID") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DASH") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOT") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOTDASH") == 0)
    {
        lineStyleFound = true;
    }
    if (lineStyleFound)
    {
        fprintf(stdout, "lineStyle is no longer a valid Mesh "
                       "attribute.\nIt's value is being ignored, please remove "
                       "it from your script.\n");
        return PyInt_FromLong(0L);
    }

Code: PyMeshAttributes_setattr
Prefix:
Postfix:
    // Try and handle legacy fields in MeshAttributes
    if(obj == NULL)
    {
        MeshAttributesObject *meshObj = (MeshAttributesObject *)self;
        if(strcmp(name, "backgroundFlag") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                meshObj->data->SetOpaqueColorSource(MeshAttributes::OpaqueCustom);
            else
                meshObj->data->SetOpaqueColorSource(MeshAttributes::Background);

            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "foregroundFlag") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                meshObj->data->SetMeshColorSource(MeshAttributes::MeshCustom);
            else
                meshObj->data->SetMeshColorSource(MeshAttributes::Foreground);

            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "lineStyle") == 0)
        {
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }

Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const MeshAttributes &, const int);
Definition:
// ****************************************************************************
//  Modifications:
//
//    Kathleen Bonnell, Wed Aug 22 16:00:32 PDT 2001
//    Changing opaque mode no longer requires recalculation.
//
//    Jeremy Meredith, Mon Dec  9 16:30:54 PST 2002
//    Added smoothing level.
//
//    Jeremy Meredith, Fri Dec 20 11:33:43 PST 2002
//    Added point size variable and its enabled flag.
//
//    Hank Childs, Thu Aug 21 23:05:45 PDT 2003
//    Added point type.
//
//    Kathleen Bonnell, Thu Feb  5 13:07:06 PST 2004
//    Added spatDim argument, added showInternal.
//
//    Kathleen Bonnell, Tue Nov  2 10:32:21 PST 2004
//    Removed point type and point size from test, changed pointSizeVar test
//    so that only true if changes require adding new secondary varaible.
//
//    Kathleen Biagas, Thu Apr 23 13:14:51 PDT 2015
//    Removed never-used oulineOnly and errorTolerance atts.
//
//    Kathleen Biagas, Wed Jun  10 10:00:03 PDT 2020
//    Added test for changing point type.
//
// ****************************************************************************

bool
MeshAttributes::ChangesRequireRecalculation(const MeshAttributes &obj,
                                            const int spatDim)
{
    bool needSecondaryVar = (obj.pointSizeVarEnabled &&
                            ((pointSizeVar != obj.pointSizeVar) &&
                             (obj.pointSizeVar != "default") &&
                             (obj.pointSizeVar != "") &&
                             (obj.pointSizeVar != "\0")));

    // Certain point type changes require a recalculation.
    bool currentPointTypeIsPoint =     pointType == Point;
    bool newPointTypeIsPoint     = obj.pointType == Point;

    bool changingPointType =  pointType != obj.pointType &&
                              currentPointTypeIsPoint != newPointTypeIsPoint;

    return ( needSecondaryVar || changingPointType ||
            (smoothingLevel != obj.smoothingLevel) ||
            (showInternal != obj.showInternal && spatDim == 3));
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: MeshAttributes::ProcessOldVersions
//
// Purpose:
//   This method handles some old fields by converting them to new fields.
//
// Programmer: Brad Whitlock
// Creation:   Fri Mar 12 09:33:52 PST 2010
//
// Modifications:
//
// ****************************************************************************
#include <Utility.h>
void
MeshAttributes::ProcessOldVersions(DataNode *parentNode,
    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("MeshAttributes");
    if(searchNode == 0)
        return;

    if(VersionLessThan(configVersion, "2.0.0"))
    {
        DataNode *k = 0;
        if((k = searchNode->GetNode("foregroundFlag")) != 0)
        {
            MeshColor val = k->AsBool() ? Foreground : MeshCustom;
            searchNode->RemoveNode(k, true);
            searchNode->AddNode(new DataNode("meshColorSource", MeshColor_ToString(val)));
        }
        if((k = searchNode->GetNode("backgroundFlag")) != 0)
        {
            OpaqueColor val = k->AsBool() ? Background : OpaqueCustom;
            searchNode->RemoveNode(k, true);
            searchNode->AddNode(new DataNode("opaqueColorSource", OpaqueColor_ToString(val)));
        }
    }
    if(VersionLessThan(configVersion, "3.0.0"))
    {
        if (searchNode->GetNode("lineStyle") != 0)
            searchNode->RemoveNode("lineStyle");
    }
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
// Method: MeshAttributes::CreateCompatible
//
// Purpose:
//   CreateCompatible method for the MeshAttributes class.
//   Can create PointGlyphAttributes.
//
// Programmer: Kathleen Biagas
// Creation:   June 10, 2020
//
// Modifications:
//
// ****************************************************************************

AttributeSubject *
MeshAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new MeshAttributes(*this);
    }
    else if(tname == "PointGlyph")
    {
        PointGlyphAttributes *pga = new PointGlyphAttributes();
        pga->SetPointSize(GetPointSize());
        pga->SetPointType(GetPointType());
        pga->SetPointSizeVarEnabled(GetPointSizeVarEnabled());
        pga->SetPointSizeVar(GetPointSizeVar());
        pga->SetPointSizePixels(GetPointSizePixels());
        retval = pga;
    }

    return retval;
}


