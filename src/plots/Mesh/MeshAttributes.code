Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const MeshAttributes &, const int);
Definition:
// ****************************************************************************
//  Modifications:
//
//    Kathleen Bonnell, Wed Aug 22 16:00:32 PDT 2001
//    Changing opaque mode no longer requires recalculation.
//
//    Jeremy Meredith, Mon Dec  9 16:30:54 PST 2002
//    Added smoothing level.
//
//    Jeremy Meredith, Fri Dec 20 11:33:43 PST 2002
//    Added point size variable and its enabled flag.
//
//    Hank Childs, Thu Aug 21 23:05:45 PDT 2003
//    Added point type.
//
//    Kathleen Bonnell, Thu Feb  5 13:07:06 PST 2004
//    Added spatDim argument, added showInternal.
//
//    Kathleen Bonnell, Tue Nov  2 10:32:21 PST 2004
//    Removed point type and point size from test, changed pointSizeVar test
//    so that only true if changes require adding new secondary varaible.
//
//    Kathleen Biagas, Thu Apr 23 13:14:51 PDT 2015
//    Removed never-used oulineOnly and errorTolerance atts.
//
//    Kathleen Biagas, Wed Jun  10 10:00:03 PDT 2020
//    Added test for changing point type.
//
// ****************************************************************************

bool
MeshAttributes::ChangesRequireRecalculation(const MeshAttributes &obj,
                                            const int spatDim)
{
    bool needSecondaryVar = (obj.pointSizeVarEnabled &&
                            ((pointSizeVar != obj.pointSizeVar) &&
                             (obj.pointSizeVar != "default") &&
                             (obj.pointSizeVar != "") &&
                             (obj.pointSizeVar != "\0")));

    // Certain point type changes require a recalculation.
    bool currentPointTypeIsPoint =     pointType == Point;
    bool newPointTypeIsPoint     = obj.pointType == Point;

    bool changingPointType =  pointType != obj.pointType &&
                              currentPointTypeIsPoint != newPointTypeIsPoint;

    return ( needSecondaryVar || changingPointType ||
            (smoothingLevel != obj.smoothingLevel) ||
            (showInternal != obj.showInternal && spatDim == 3));
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
// Method: MeshAttributes::CreateCompatible
//
// Purpose:
//   CreateCompatible method for the MeshAttributes class.
//   Can create PointGlyphAttributes.
//
// Programmer: Kathleen Biagas
// Creation:   June 10, 2020
//
// Modifications:
//
// ****************************************************************************

AttributeSubject *
MeshAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new MeshAttributes(*this);
    }
    else if(tname == "PointGlyph")
    {
        PointGlyphAttributes *pga = new PointGlyphAttributes();
        pga->SetPointSize(GetPointSize());
        pga->SetPointType(GetPointType());
        pga->SetPointSizeVarEnabled(GetPointSizeVarEnabled());
        pga->SetPointSizeVar(GetPointSizeVar());
        pga->SetPointSizePixels(GetPointSizePixels());
        retval = pga;
    }

    return retval;
}

Target: xml2info
Function: MeshViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: MeshViewerEnginePluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Programmer: Mark C. Miller 
//  Creation:   November 3, 2020
// ****************************************************************************
#include <avtPlotMetaData.h>

void
MeshViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    *(MeshAttributes*)atts = *defaultAtts;
    SetAutonomousColors(atts,
        plot.GetBackgroundColor(), plot.GetForegroundColor());
}

Function: MeshViewerEnginePluginInfo::SetAutonomousColors
Declaration: void SetAutonomousColors(AttributeSubject *, double const *, double const *);
Definition:
// ****************************************************************************
//  Method: MeshViewerEnginePluginInfo::SetAutonomousColors
//
//  Purpose:
//    Sets the color for any autonomous color selection modes 
//
//  Programmer: Mark C. Miller 
//  Creation:   November 3, 2020
// ****************************************************************************
#include <avtColorTables.h>

void
MeshViewerEnginePluginInfo::SetAutonomousColors(AttributeSubject *atts,
    double const *bgColor, double const *fgColor)
{
    MeshAttributes *meshAtts = (MeshAttributes *)atts;
    bool attsChanged = false;

    unsigned char bg[3] = {static_cast<unsigned char>(bgColor[0]*255),
                           static_cast<unsigned char>(bgColor[1]*255),
                           static_cast<unsigned char>(bgColor[2]*255)};
    unsigned char fg[3] = {static_cast<unsigned char>(fgColor[0]*255),
                           static_cast<unsigned char>(fgColor[1]*255),
                           static_cast<unsigned char>(fgColor[2]*255)};

    if (meshAtts->GetOpaqueColorSource() == MeshAttributes::OpaqueRandom)
    {
        unsigned char rgb[3] = {bg[0], bg[1], bg[2]};

        // deconflict opaque color with foreground
        avtColorTables *ct = avtColorTables::Instance();
        if (!ct->GetJNDControlPointColor(ct->GetDefaultDiscreteColorTable(),
                                            "MeshColor", fg, rgb))
            ct->GetJNDControlPointColor("distinct", "MeshColor", fg, rgb);

        ColorAttribute c(rgb[0], rgb[1], rgb[2]);
        meshAtts->SetOpaqueColor(c);
        attsChanged = true;
    }

    if (meshAtts->GetMeshColorSource() == MeshAttributes::MeshRandom)
    {
        unsigned char rgb[3] = {fg[0], fg[1], fg[2]};
        ColorAttribute opqc = meshAtts->GetOpaqueColor();

        // deconflict mesh (lines) color with opaque color
        avtColorTables *ct = avtColorTables::Instance();
        if (!ct->GetJNDControlPointColor(ct->GetDefaultDiscreteColorTable(),
                                            "MeshColor", opqc.GetColor(), rgb))
            ct->GetJNDControlPointColor("distinct", "MeshColor", opqc.GetColor(), rgb);

        ColorAttribute c(rgb[0], rgb[1], rgb[2]);
        meshAtts->SetMeshColor(c);
        attsChanged = true;
    }

    // Ensure GUI reflects any color choices made here
    if (attsChanged)
        SetClientAtts(atts);
}
