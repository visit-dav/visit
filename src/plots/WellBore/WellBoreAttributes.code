Code: SetNWellBores
Prefix:
Postfix:
    // Grow the color vector.
    EnlargeMultiColor(nWellBores);

Function: EnlargeMultiColor
Declaration: void EnlargeMultiColor(int newSize);
Definition:
// ****************************************************************************
// Method: ContourAttributes::EnlargeMultiColor
//
// Purpose:
//   Enlarges the multiColor vector to the new size.
//
// Arguments:
//   newSize    The new size of the color vector.
//
// Programmer: Eric Brugger
// Creation:   October 1, 2008
//
// Modifications:
//
// ****************************************************************************

void
WellBoreAttributes::EnlargeMultiColor(int newSize)
{
    // Add any colors that are needed to the end of the vector to ensure
    // we have the right number of elements in the vector.
    if(newSize > 0)
    {
        unsigned char *rgb = new unsigned char[newSize * 4];

        // If it's a discrete color table, just use the colors of
        // the control points. Otherwise, sample the color table.
        if(defaultPalette.GetDiscreteFlag())
        {
            int nColors = defaultPalette.GetNumControlPoints();
            for(int i = 0, index = 0; i < newSize; ++i, index += 4)
            {
                int j = i % nColors;
                const ColorControlPoint &ccp = defaultPalette.operator[](j);
                const unsigned char *c = ccp.GetColors();
                rgb[index] = c[0];
                rgb[index+1] = c[1];
                rgb[index+2] = c[2];
                rgb[index+3] = c[3];
            }
        }
        else
        {
            defaultPalette.GetColors(rgb, newSize);
        }

        bool modified = false;
        for(int i = 0; i < newSize; ++i)
        {
            int j = i * 4;
            if(i < multiColor.GetNumColors())
            {
                if(!ColorIsChanged(i))
                {
                    ColorAttribute &ca = multiColor.GetColors(i);
                    ca.SetRgba(int(rgb[j]), int(rgb[j+1]), int(rgb[j+2]),int(rgb[j+3]));
                }
            }
            else
            {
                multiColor.AddColors(ColorAttribute(rgb[j],
                                                    rgb[j+1],
                                                    rgb[j+2],
                                                    rgb[j+3]));
            }
            modified = true;
        }
        delete [] rgb;

        // If the multiColor vector was modified, select it.
        if(modified)
            SelectMultiColor();
    }
}

Function: ColorIsChanged
Declaration: bool ColorIsChanged(int index) const;
Definition:
// ****************************************************************************
// Method: WellBoreAttributes::ColorIsChanged
//
// Purpose:
//   Returns whether or not a color has been modified.
//
// Arguments:
//   index      A color index.
//
// Programmer: Eric Brugger
// Creation:   October 1, 2008
//
// Modifications:
//
// ***************************************************************************
bool
WellBoreAttributes::ColorIsChanged(int index) const
{
    size_t i = 0;
    for(; i < changedColors.size(); ++i)
    {
        if(changedColors[i] == ((unsigned char)index))
            break;
    }

    return (i < changedColors.size());
}

Function: MarkColorAsChanged
Declaration: void MarkColorAsChanged(int index);
Definition:
// ****************************************************************************
// Method: WellBoreAttributes::MarkColorAsChanged
//
// Purpose:
//   Marks a color as having been modified.
//
// Arguments:
//   index      A color index.
//
// Programmer: Eric Brugger
// Creation:   October 1, 2008
//
// Modifications:
//
// ****************************************************************************
void
WellBoreAttributes::MarkColorAsChanged(int index)
{
    if(!ColorIsChanged(index))
    {
        changedColors.push_back(((unsigned char)index));
        SelectChangedColors();
    }
}

Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const WellBoreAttributes &);
Definition:
bool
WellBoreAttributes::ChangesRequireRecalculation(const WellBoreAttributes &obj)
{
    if (drawWellsAs != obj.drawWellsAs) return true;
    if (drawWellsAs == Cylinders)
    {
        if (wellCylinderQuality != obj.wellCylinderQuality) return true;
        if (wellRadius != obj.wellRadius) return true;
    }
    if (nWellBores != obj.nWellBores) return true;
    if (wellBores != obj.wellBores) return true;
    if (wellNames != obj.wellNames) return true;
    if (wellAnnotation != obj.wellAnnotation) return true;
    if (wellStemHeight != obj.wellStemHeight) return true;

    return false;
}

Target: xml2info
Function: WellBoreViewerEnginePluginInfo::InitializeGlobalObjects
Declaration: static void InitializeGlobalObjects();
Definition:
// ****************************************************************************
// Method:  WellBoreViewerEnginePluginInfo::InitializeGlobalObjects
//
// Purpose:
//   Initialize the plot atts.
//
// Programmer: Eric Brugger
// Creation:   October 1, 2008
//
// Modifications:
//
// ****************************************************************************
void
WellBoreViewerEnginePluginInfo::InitializeGlobalObjects()
{
    if (WellBoreViewerEnginePluginInfo::clientAtts == NULL)
    {
        WellBoreViewerEnginePluginInfo::clientAtts  = new WellBoreAttributes;
        WellBoreViewerEnginePluginInfo::defaultAtts = new WellBoreAttributes;
    }

    InitializeDefaultPalette(clientAtts);
    InitializeDefaultPalette(defaultAtts);
}

Function: WellBoreViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
// Method: WellBoreViewerEnginePluginInfo::InitializePlotAtts
//
// Purpose:
//   Initialize the plot attributes to the default attributes.
//
// Arguments:
//   atts       The attribute subject to initialize.
//   plot       The viewer plot whose attributes are getting initialized.
//
// Programmer: Eric Brugger
// Creation:   October 1, 2008
//
// Modifications:
//
// ****************************************************************************

void
WellBoreViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &)
{
    WellBoreAttributes *wellBore = (WellBoreAttributes *)atts;
    *wellBore = *defaultAtts;

    // Set the defaultPalette for the plot.
    InitializeDefaultPalette(wellBore);
}

Function: WellBoreViewerEnginePluginInfo::InitializeDefaultPalette
Declaration: static void InitializeDefaultPalette(WellBoreAttributes *);
Definition:
// ****************************************************************************
// Method: WellBoreViewerEnginePluginInfo::InitializeDefaultPalette
//
// Purpose:
//   Initializes the default palette in the wellBore attributes using the
//   default discrete color table.
//
// Arguments:
//   wellBore   The WellBoreAttributes to initialize.
//
// Programmer: Eric Brugger
// Creation:   October 1, 2008
//
// Modifications:
//
// ****************************************************************************
#include <avtColorTables.h>
#include <ColorTableAttributes.h>
void
WellBoreViewerEnginePluginInfo::InitializeDefaultPalette(
    WellBoreAttributes *wellBore)
{
    // Copy over the wellBore's defaultPalette with the default discrete
    // color table from avtColorTable.
    if(wellBore->GetColorType() != WellBoreAttributes::ColorByMultipleColors ||
       wellBore->GetDefaultPalette().GetNumControlPoints() < 1)
    {
        avtColorTables *ct = avtColorTables::Instance();
        ColorTableAttributes *ctAtts = ct->GetColorTables();
        int i = ctAtts->GetColorTableIndex(ct->GetDefaultDiscreteColorTable());
        if(i != -1)
        {
            wellBore->SetDefaultPalette(ctAtts->operator[](i));
        }
    }
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: WellBoreAttributes::ProcessOldVersions
//
// Purpose:
//   This method allows handling of older config/session files that may
//   contain fields that are no longer present or have been modified/renamed.
//
// Programmer: Kathleen Biagas
// Creation:   April 4, 2018
//
// Modifications:
//
// ****************************************************************************

void
WellBoreAttributes::ProcessOldVersions(DataNode *parentNode,
                                    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("WellBoreAttributes");
    if(searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "3.0.0"))
    {
        if (searchNode->GetNode("wellLineStyle") != 0)
            searchNode->RemoveNode("wellLineStyle");
    }
}


Target: xml2python
Code: PyWellBoreAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields

    // wellLineStyle and it's possible enumerations
    bool wellLineStyleFound = false;
    if (strcmp(name, "wellLineStyle") == 0)
    {
        wellLineStyleFound = true;
    }
    else if (strcmp(name, "SOLID") == 0)
    {
        wellLineStyleFound = true;
    }
    else if (strcmp(name, "DASH") == 0)
    {
        wellLineStyleFound = true;
    }
    else if (strcmp(name, "DOT") == 0)
    {
        wellLineStyleFound = true;
    }
    else if (strcmp(name, "DOTDASH") == 0)
    {
        wellLineStyleFound = true;
    }

    if (wellLineStyleFound)
    {
        fprintf(stdout, "wellLineStyle is no longer a valid WellBore "
                       "attribute.\nIt's value is being ignored, please remove "
                       "it from your script.\n");
        return PyInt_FromLong(0L);
    }


Code: PyWellBoreAttributes_setattr
Prefix:
Postfix:
    // Try and handle legacy fields
    if(obj == NULL)
    {
        if(strcmp(name, "wellLineStyle") == 0)
        {
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }



