Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const SpreadsheetAttributes &) const;
Definition:
bool
SpreadsheetAttributes::ChangesRequireRecalculation(const SpreadsheetAttributes &obj) const
{
    return (subsetName != obj.subsetName);
}

Function: CopyAttributes
Declaration: bool CopyAttributes(const AttributeGroup *atts);
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::CopyAttributes
//
// Purpose:
//   CopyAttributes method for the SpreadsheetAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: Hank Childs
// Creation:   August 31, 2007
//
// Modifications:
//   Gunther H. Weber, Fri Sep 14 11:33:48 PDT 2007
//   Copy pick letters. Move clearing of pick history to custom
//   SetSubsetName() method.
//
//   Brad Whitlock, Thu May 21 14:43:24 PDT 2009
//   Use pick element and type instead of the pick point.
//
//   Brad Whitlock, Wed Jun 27 16:04:29 PDT 2012
//   Do not turn off the tracer plane if we're just clearing picks.
//
// ****************************************************************************

bool
SpreadsheetAttributes::CopyAttributes(const AttributeGroup *atts)
{
    if (atts->TypeName() == "PlaneAttributes")
    {
        PlaneAttributes *p = (PlaneAttributes *) atts;
        const double *n = p->GetNormal();
        if (fabs(n[2]) >= fabs(n[0]) && fabs(n[2]) >= fabs(n[1]))
            SetNormal(Z);
        else if (fabs(n[1]) >= fabs(n[0]) && fabs(n[1]) >= fabs(n[2]))
            SetNormal(Y);
        else
            SetNormal(X);
        return true;
    }
    if (atts->TypeName() == "PickAttributes")
    {
        PickAttributes *p = (PickAttributes *) atts;

        // Handle a clear of pick points
        if (p->GetClearWindow())
        {
            pastPicks.clear();
            pastPickLetters.clear();
            currentPickValid = false;
            return true;
        }

        // If we got this from a pick, then the tracer plane will just
        // get in the way, so turn it off.
        SetShowTracerPlane(false);

        // Handle subset changes
        if (p->GetSubsetName() != "" &&
            p->GetSubsetName() != subsetName)
        {
            SetSubsetName(p->GetSubsetName());
        }

        // Add current pick to history, if valid
        if (currentPickValid)
        {
            pastPicks.push_back(GetCurrentPick());
            pastPicks.push_back(GetCurrentPickType());
            pastPickLetters.push_back(GetCurrentPickLetter());
        }

        // Set current pick based on history
        currentPickValid = true;
        SetCurrentPick(p->GetElementNumber());
        SetCurrentPickType((int)p->GetPickType());
        SetCurrentPickLetter(p->GetPickLetter());

        return true;
    }

    if(TypeName() != atts->TypeName())
        return false;

    // Call assignment operator.
    const SpreadsheetAttributes *tmp = (const SpreadsheetAttributes *)atts;
    *this = *tmp;

    return true;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::CreateCompatible
//
// Purpose:
//   CreateCompatible method for the SpreadsheetAttributes class.
//
// Programmer: Hank Childs
// Creation:   September 14, 2007
//
// Modifications:
//
// ****************************************************************************

AttributeSubject *
SpreadsheetAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;
    if(TypeName() == tname)
        retval = new SpreadsheetAttributes(*this);
    else if (tname == "PickAttributes")
    {
        PickAttributes *p = new PickAttributes();
        p->SetSubsetName(GetSubsetName());
        retval = p;
    }
    return retval;
}

Function: SetSubsetName
Declaration: void SetSubsetName(const std::string &subsetName_);
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::SetSubsetName
//
// Purpose:
//   Custom SetSubsetName method for the SpreadsheetAttributes class
//   that clears the pick history if the subset changes.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: Gunther H. Weber
// Creation:   September 13, 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetAttributes::SetSubsetName(const std::string &subsetName_)
{
    subsetName = subsetName_;
    pastPicks.clear();
    pastPickLetters.clear();
    SetCurrentPickValid(false);
    Select(0, (void *)&subsetName);
}

Function: CreateNode
Declaration: bool CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd);
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::CreateNode
//
// Purpose:
//   This method creates a DataNode representation of the object so it can be saved to a config file.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//   Brad Whitlock, Tue May 26 11:42:36 PDT 2009
//   Prevent the pick-related attributes from being saved.
//
// ****************************************************************************

bool
SpreadsheetAttributes::CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd)
{
    if(parentNode == 0)
        return false;

    SpreadsheetAttributes defaultObject;
    bool addToParent = false;
    // Create a node for SpreadsheetAttributes.
    DataNode *node = new DataNode("SpreadsheetAttributes");

    if(completeSave || !FieldsEqual(ID_subsetName, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("subsetName", subsetName));
    }

    if(completeSave || !FieldsEqual(ID_formatString, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("formatString", formatString));
    }

    if(completeSave || !FieldsEqual(ID_useColorTable, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("useColorTable", useColorTable));
    }

    if(completeSave || !FieldsEqual(ID_colorTableName, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("colorTableName", colorTableName));
    }

    if(completeSave || !FieldsEqual(ID_showTracerPlane, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showTracerPlane", showTracerPlane));
    }

        DataNode *tracerColorNode = new DataNode("tracerColor");
        if(tracerColor.CreateNode(tracerColorNode, completeSave, true))
        {
            addToParent = true;
            node->AddNode(tracerColorNode);
        }
        else
            delete tracerColorNode;
    if(completeSave || !FieldsEqual(ID_normal, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("normal", NormalAxis_ToString(normal)));
    }

    if(completeSave || !FieldsEqual(ID_sliceIndex, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("sliceIndex", sliceIndex));
    }

    if(completeSave || !FieldsEqual(ID_spreadsheetFont, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("spreadsheetFont", spreadsheetFont));
    }

    if(completeSave || !FieldsEqual(ID_showPatchOutline, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showPatchOutline", showPatchOutline));
    }

    if(completeSave || !FieldsEqual(ID_showCurrentCellOutline, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showCurrentCellOutline", showCurrentCellOutline));
    }

    // Add the node to the parent node.
    if(addToParent || forceAdd)
        parentNode->AddNode(node);
    else
        delete node;

    return (addToParent || forceAdd);
}

Target: xml2info
Function: SpreadsheetViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerEnginePluginInfo::InitializePlotAtts
//
// Purpose:
//   Initializes the plot attributes.
//
// Arguments:
//   atts    : The plot attributes to check.
//   md      : The plot metadata.
//   varName : The plot variable.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 11:36:13 PDT 2007
//
// Modifications:
//
// ****************************************************************************
void
SpreadsheetViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    *(SpreadsheetAttributes*)atts = *defaultAtts;

    PrivateSetPlotAtts(atts, plot);
}

Function: SpreadsheetViewerEnginePluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerEnginePluginInfo::ReInitializePlotAtts
//
// Purpose:
//   Makes sure that the subset name in the plot attributes is valid.
//
// Arguments:
//   atts    : The plot attributes to check.
//   md      : The plot metadata.
//   varName : The plot variable.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 11:36:13 PDT 2007
//
// Modifications:
//
// ****************************************************************************
void
SpreadsheetViewerEnginePluginInfo::ReInitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    PrivateSetPlotAtts(atts, plot);
}

Function: SpreadsheetViewerEnginePluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerEnginePluginInfo::ResetPlotAtts
//
// Purpose:
//   Resets the plot attributes.
//
// Arguments:
//   atts    : The plot attributes to reset.
//   md      : The plot metadata.
//   varName : The plot variable.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 11:36:13 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerEnginePluginInfo::ResetPlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)

{
    *(SpreadsheetAttributes*)atts = *defaultAtts;

    PrivateSetPlotAtts(atts, plot);
}

Function: SpreadsheetViewerEnginePluginInfo::ProvidesLegend
Declaration: virtual bool ProvidesLegend() const;
Definition:
bool
SpreadsheetViewerEnginePluginInfo::ProvidesLegend() const
{
    return false;
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayCreate
Declaration: virtual void *AlternateDisplayCreate(ViewerPlot *plot);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayCreate
//
// Purpose:
//   Creates an alternate display that will display data for the Spreadsheet
//   plot.
//
// Arguments:
//   plot : Pointer to the ViewerPlot that will own the alternate display.
//
// Returns:    A pointer to the alternate display.
//
// Note:       We refer to the alternate display using void* so it can be
//             whatever type of display that is most appropriate Qt, X, ...
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:53:23 PDT 2007
//
// Modifications:
//   Brad Whitlock, Mon Aug 11 16:24:41 PDT 2008
//   Removed name argument from SpreadsheetViewer constructor.
//
// ****************************************************************************
#include <SpreadsheetViewer.h>
#include <avtCallback.h>
void *
SpreadsheetViewerPluginInfo::AlternateDisplayCreate(ViewerPlot *plot)
{
    void *dpy = 0;

    if(!avtCallback::GetNowinMode())
    {
        // We're not in nowin mode so create the spreadsheet viewer.
        SpreadsheetViewer *win = new SpreadsheetViewer(plot, 0);
        dpy = (void *)win;
    }

    return dpy;
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayDestroy
Declaration: virtual void AlternateDisplayDestroy(void *dpy);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayDestroy
//
// Purpose:
//   This method is called when the alternate display must be destroyed.
//
// Arguments:
//   dpy : The handle to the alternate display.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:55:03 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerPluginInfo::AlternateDisplayDestroy(void *dpy)
{
    if(dpy != 0)
    {
        SpreadsheetViewer *v = (SpreadsheetViewer *)dpy;
        delete v;
    }
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayClear
Declaration: virtual void AlternateDisplayClear(void *dpy);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayClear
//
// Purpose:
//   This method is called when the alternate display must be cleared of data.
//
// Arguments:
//   dpy : The handle to the alternate display.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:55:03 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerPluginInfo::AlternateDisplayClear(void *dpy)
{
    if(dpy != 0)
    {
        SpreadsheetViewer *v = (SpreadsheetViewer *)dpy;
        v->clear();
    }
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayHide
Declaration: virtual void AlternateDisplayHide(void *dpy);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayHide
//
// Purpose:
//   This method is called when the alternate display must be hidden.
//
// Arguments:
//   dpy : The handle to the alternate display.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:55:03 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerPluginInfo::AlternateDisplayHide(void *dpy)
{
    if(dpy != 0)
    {
        SpreadsheetViewer *v = (SpreadsheetViewer *)dpy;
        v->hide();
    }
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayShow
Declaration: virtual void AlternateDisplayShow(void *dpy);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayShow
//
// Purpose:
//   This method is called when the alternate display must be shown.
//
// Arguments:
//   dpy : The handle to the alternate display.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:55:03 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerPluginInfo::AlternateDisplayShow(void *dpy)
{
    if(dpy != 0)
    {
        SpreadsheetViewer *v = (SpreadsheetViewer *)dpy;
        if(v->isMinimized())
            v->showNormal();
        else
            v->show();
        v->raise();
    }
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayIconify
Declaration: virtual void AlternateDisplayIconify(void *dpy);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayIconify
//
// Purpose:
//   This method is called when the alternate display must be iconified.
//
// Arguments:
//   dpy : The handle to the alternate display.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:55:03 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerPluginInfo::AlternateDisplayIconify(void *dpy)
{
    if(dpy != 0)
    {
        SpreadsheetViewer *v = (SpreadsheetViewer *)dpy;
        v->showMinimized();
    }
}

Function: SpreadsheetViewerPluginInfo::AlternateDisplayDeIconify
Declaration: virtual void AlternateDisplayDeIconify(void *dpy);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerPluginInfo::AlternateDisplayDeIconify
//
// Purpose:
//   This method is called when the alternate display must be de-iconified.
//
// Arguments:
//   dpy : The handle to the alternate display.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 10:55:03 PDT 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetViewerPluginInfo::AlternateDisplayDeIconify(void *dpy)
{
    if(dpy != 0)
    {
        SpreadsheetViewer *v = (SpreadsheetViewer *)dpy;
        v->showNormal();
    }
}

Function: SpreadsheetViewerEnginePluginInfo::PrivateSetPlotAtts
Declaration: void   PrivateSetPlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
// Method: SpreadsheetViewerEnginePluginInfo::PrivateSetPlotAtts
//
// Purpose:
//   Makes sure that the subset name in the plot attributes is valid.
//
// Arguments:
//   atts    : The plot attributes to check.
//   md      : The plot metadata.
//   varName : The plot variable.
//
// Programmer: Brad Whitlock
// Creation:   Wed Feb 21 11:36:13 PDT 2007
//
// Modifications:
//   Hank Childs, Mon Dec 14 16:04:01 PST 2009
//   Add support for new SIL interface.
//
//   Brad Whitlock, Thu Jun  3 14:39:43 PDT 2010
//   I fixed a bug with the SIL changes.
//
// ****************************************************************************
#include <avtSILRestriction.h>
#include <avtPlotMetaData.h>

void
SpreadsheetViewerEnginePluginInfo::PrivateSetPlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    // Search for a SIL_DOMAIN category under the current silTopSet and add
    // sets that are used.
    SpreadsheetAttributes *sAtts = (SpreadsheetAttributes *)atts;
    bool validName = false;
    bool firstNameSet = false;
    std::string firstName;
    int nSets = 1;
    avtSILRestriction_p silr = plot.GetSILRestriction();
    avtSILSet_p current = silr->GetSILSet(silr->GetTopSet());
    const std::vector<int> &mapsOut = current->GetMapsOut();
    for(size_t j = 0; j < mapsOut.size() && !validName; ++j)
    {
        int cIndex = mapsOut[j];
        avtSILCollection_p collection = silr->GetSILCollection(cIndex);
        if(*collection != NULL && collection->GetRole() == SIL_DOMAIN)
        {
            nSets = collection->GetNumberOfSubsets();
            for(int si = 0; si < nSets && !validName; ++si)
            {
                if(!firstNameSet)
                {
                    firstName = silr->GetSILSet(collection->GetSubset(si))->GetName();
                    firstNameSet = true;
                }
                validName = (silr->GetSILSet(collection->GetSubset(si))->GetName() ==
                             sAtts->GetSubsetName());
            }
            break;
        }
    }

    // If the subset name is not valid then override it. Set it in the
    // default attributes so the GUI window does not get too confused when
    // the default attributes get sent to the client as when a plot of another
    // type is selected.
    if(!validName)
    {
        if(nSets > 1)
        {
            if(firstNameSet)
            {
                sAtts->SetSubsetName(firstName);
                defaultAtts->SetSubsetName(firstName);
            }
        }
        else
        {
            sAtts->SetSubsetName("Whole");
            defaultAtts->SetSubsetName("Whole");
        }
    }
}

Function: SpreadsheetViewerEnginePluginInfo::Permits2DViewScaling
Declaration: virtual bool Permits2DViewScaling() const;
Definition:
bool
SpreadsheetViewerEnginePluginInfo::Permits2DViewScaling() const
{
    return false;
}

Target: xml2atts
Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::ProcessOldVersions
//
// Purpose:
//   This method handles some old fields by converting them to new fields.
//
// Programmer: Burlen Loring
// Creation:   Fri Jul 18 15:20:59 PDT 2014
//
// Modifications:
//
// ****************************************************************************
void
SpreadsheetAttributes::ProcessOldVersions(DataNode *parentNode,
    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("SpreadsheetAttributes");
    if(searchNode == 0)
        return;

    // deal with the changes in r7405 where type of currentPick was
    // changed from double[3] to int. Since that patch pick related
    // attributes are no longer recorded in session files so we will
    // need to ignore them here.
    if(VersionLessThan(configVersion, "2.0.0"))
    {
        const char *pickAtts[] = {
            "currentPick",
            "currentPickType",
            "currentPickValid",
            "currentPickLetter",
            "pastPicks",
            "pastPickLetters"
            };
        for (size_t i=0; i<6; ++i)
        {
            DataNode *pickAtt = searchNode->GetNode(pickAtts[i]);
            if (pickAtt)
            {
                searchNode->RemoveNode(pickAtt, true);
            }
        }
    }
}

