Target: xml2python
Code: PyCurveAttributes_getattr
Prefix:
Postfix:
#if VISIT_OBSOLETE_AT_VERSION(3,3,2)
#error This code is obsolete in this version. Please remove it.
#else
    // Try and handle legacy fields in CurveAttributes

    //
    // removed in 3.0.0
    //
    // lineStyle and it's possible enumerations
    bool lineStyleFound = false;
    if (strcmp(name, "lineStyle") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "SOLID") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DASH") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOT") == 0)
    {
        lineStyleFound = true;
    }
    else if (strcmp(name, "DOTDASH") == 0)
    {
        lineStyleFound = true;
    }
    if (lineStyleFound)
    {
        PyErr_WarnEx(NULL,
            "lineStyle is no longer a valid Curve "
            "attribute.\nIt's value is being ignored, please remove "
            "it from your script.\n", 3);
        return PyInt_FromLong(0L);
    }
#endif

Code: PyCurveAttributes_setattr
Prefix:
Postfix:
#if VISIT_OBSOLETE_AT_VERSION(3,3,2)
#error This code is obsolete in this version. Please remove it.
#else
   // Try and handle legacy fields in CurveAttributes
    if(obj == &NULL_PY_OBJ)
    {
        CurveAttributesObject *CurveObj = (CurveAttributesObject *)self;

        //
        // removed in 3.0.0
        //
        if(strcmp(name, "lineStyle") == 0)
        {
            PyErr_WarnEx(NULL, "'lineStyle' is obsolete. It is being ignored.", 3);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }
#endif

Target: xml2atts
Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
bool
CurveAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const CurveAttributes *tmp = (const CurveAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if(atts->TypeName() == "Line")
    {
        const Line *tmp = (const Line*)atts;
        SetDesignator(tmp->GetDesignator());
        SetCurveColor(tmp->GetColor());
        retval = true;
    }

    return retval;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
AttributeSubject *
CurveAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new CurveAttributes(*this);
    }
    else if(tname == "Line")
    {
        Line *line = new Line;
        line->SetDesignator(GetDesignator());
        line->SetColor(GetCurveColor());
        line->SetLineWidth(GetLineWidth());
        retval = line;
    }

    return retval;
}

Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const CurveAttributes &) const;
Definition:
// ****************************************************************************
//
// Modifications:
//    Kathleen Biagas, Wed Sep 11 17:16:26 PDT 2013
//    Return true if converting coordinates.
//
// ****************************************************************************

bool
CurveAttributes::ChangesRequireRecalculation(const CurveAttributes &obj) const
{
    if (polarToCartesian != obj.polarToCartesian) return true;
    if (angleUnits != obj.angleUnits && obj.polarToCartesian) return true;
    if (polarCoordinateOrder != obj.polarCoordinateOrder && obj.polarToCartesian) return true;
    return false;
}

Function: ProcessOldVersions
Declaration: virtual void  ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: CurveAttributes::ProcessOldVersions
//
// Purpose:
//   This method creates modifies a DataNode representation of the object
//   so it conforms to the newest representation of the object, which can
//   can be read back in.
//
// Programmer: Kathleen Bonnell
// Creation:   August 16, 2010
//
// Modifications:
//   Kathleen Biagas, Tue Feb 15 13:34:17 PST 2022
//   Removed processing of version < 2.1.0.
//
// ****************************************************************************
#include <visit-config.h>
#ifdef VIEWER
#include <avtCallback.h>
#endif

void
CurveAttributes::ProcessOldVersions(DataNode *parentNode,
                                         const char *configVersion)
{
#if VISIT_OBSOLETE_AT_VERSION(3,3,2)
#error This code is obsolete in this version. Please remove it.
#else
    if (parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("CurveAttributes");
    if (searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "3.0.0"))
    {
       if (searchNode->GetNode("lineStyle") != 0)
       {
#ifdef VIEWER
            avtCallback::IssueWarning(DeprecationMessage("lineStyle", "3.3.2").c_str());
#endif
            searchNode->RemoveNode("lineStyle");
       }
    }
#endif
}

Target: xml2info
Function: CurveViewerEnginePluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const avtPlotMetaData &);
Definition:
// ****************************************************************************
//  Method: CurveViewerEnginePluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: whitlocb -- generated by xml2info
//  Creation:   Fri Mar 26 15:09:32 PST 2004
//
//  Modifications:
//    Kathleen Bonnell, Mon Oct 31 17:05:35 PST 2005
//    Added call to SetColor.
//
//    Mark C. Miller, Mon Nov  2 11:53:01 PST 2020
//    Changed name of SetColor to SetAutonomousColors
// ****************************************************************************
#include <avtPlotMetaData.h>

void
CurveViewerEnginePluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const avtPlotMetaData &plot)
{
    *(CurveAttributes*)atts = *defaultAtts;
    SetAutonomousColors(atts,
        plot.GetBackgroundColor(), plot.GetForegroundColor());
}

Function: CurveViewerEnginePluginInfo::SetAutonomousColors
Declaration: void SetAutonomousColors(AttributeSubject *, double const *, double const *);
Definition:
// ****************************************************************************
//  Method: CurveViewerEnginePluginInfo::SetAutonomousColors
//
//  Purpose:
//    Sets the color if the CycleColors att is set to true. 
//
//  Arguments:
//    atts      The attribute subject. 
//
//  Programmer: Kathleen Bonnell 
//  Creation:   October 31, 2005 
//
//  Modifications:
//
//    Hank Childs, Sat Mar 13 10:35:34 PST 2010
//    Change Boolean test to comparison with enumeration.
//
//    Brad Whitlock, Fri Jul  5 16:55:22 PDT 2013
//    Set the fill color too.
//
//    Mark C. Miller, Mon Nov  2 17:54:17 PST 2020
//    Changed name to SetAutonomousColors where any modes for selecting
//    color that do not involve the user specifying an explicit color are
//    handled here.
// ****************************************************************************
#include <avtColorTables.h>

void
CurveViewerEnginePluginInfo::SetAutonomousColors(AttributeSubject *atts,
    double const *bgColor, double const *fgColor)
{
    CurveAttributes *curveAtts = (CurveAttributes *)atts;

    if (curveAtts->GetCurveColorSource() == CurveAttributes::Cycle)
    {
        unsigned char bg[3] = {static_cast<unsigned char>(bgColor[0]*255),
                               static_cast<unsigned char>(bgColor[1]*255),
                               static_cast<unsigned char>(bgColor[2]*255)};
        unsigned char rgb[3] = {static_cast<unsigned char>(fgColor[0]*255),
                                static_cast<unsigned char>(fgColor[1]*255),
                                static_cast<unsigned char>(fgColor[2]*255)};
        avtColorTables *ct = avtColorTables::Instance();

        if (!ct->GetJNDControlPointColor(ct->GetDefaultDiscreteColorTable(),
                                            "CurveColor", bg, rgb))
            ct->GetJNDControlPointColor("distinct", "CurveColor" , bg, rgb);

        ColorAttribute c(rgb[0], rgb[1], rgb[2]);
        curveAtts->SetCurveColor(c);
        curveAtts->SetFillColor1(c);

        // Make a whiter version of the color for fill color 2.
        unsigned char wrgb[3];
        avtColorTables::ModifyColor(rgb, 1.75, wrgb);
        ColorAttribute wc(wrgb[0], wrgb[1], wrgb[2]);
        curveAtts->SetFillColor2(wc);

        // Inform GUI of color selections made here
        SetClientAtts(atts);
    }
}

Function: CurveViewerEnginePluginInfo::PermitsCurveViewScaling
Declaration: virtual bool PermitsCurveViewScaling() const;
Definition:
bool
CurveViewerEnginePluginInfo::PermitsCurveViewScaling() const
{
    return true;
}

Function: CurveViewerEnginePluginInfo::SupportsAnimation
Declaration: virtual bool SupportsAnimation() const;
Definition:
// ****************************************************************************
// Method: CurveViewerEnginePluginInfo::SupportsAnimation
//
// Purpose:
//   Tell VisIt that this plot supports animation.
//
// Programmer: Brad Whitlock
// Creation:   Fri Sep 13 11:29:59 PDT 2013
//
// Modifications:
//
// ****************************************************************************

bool
CurveViewerEnginePluginInfo::SupportsAnimation() const
{
    return true;
}

Function: CurveViewerEnginePluginInfo::AnimationReset
Declaration: virtual bool AnimationReset(AttributeSubject *atts, const avtPlotMetaData &plot);
Definition:
// ****************************************************************************
// Method: CurveViewerEnginePluginInfo::AnimationReset
//
// Purpose:
//   Resets the plot's animation.
//
// Arguments:
//   atts : The attribute subject that we may modify.
//   plot : The plot that we're animating.
//
// Returns:  True if the plot attributes changed as a result of reset.
//
// Programmer: Brad Whitlock
// Creation:   Fri Sep 13 11:29:59 PDT 2013
//
// Modifications:
//
// ****************************************************************************

bool
CurveViewerEnginePluginInfo::AnimationReset(AttributeSubject *atts, const avtPlotMetaData &plot)
{
    CurveAttributes *cAtts = (CurveAttributes *)atts;
    bool update = false;
    if(cAtts->GetDoBallTimeCue() || cAtts->GetDoLineTimeCue())
    {
        if(plot.GetActualSpatialExtents().HasExtents())
        {
            double ext[6] = {0., 1., 0., 1., 0., 1.};
            plot.GetActualSpatialExtents().CopyTo(ext);

            cAtts->SetTimeForTimeCue(ext[0]);
            update = true;
        }
    }
    return update;
}

Function: CurveViewerEnginePluginInfo::AnimationStep
Declaration: virtual bool AnimationStep(AttributeSubject *atts, const avtPlotMetaData &plot);
Definition:
// ****************************************************************************
// Method: CurveViewerEnginePluginInfo::AnimationStep
//
// Purpose:
//   Take an animation step.
//
// Arguments:
//   atts : The attribute subject that we may modify.
//   plot : The plot that we're animating.
//
// Returns:  True if the plot attributes changed.
//
// Programmer: Brad Whitlock
// Creation:   Fri Sep 13 11:29:59 PDT 2013
//
// Modifications:
//
// ****************************************************************************

bool
CurveViewerEnginePluginInfo::AnimationStep(AttributeSubject *atts, const avtPlotMetaData &plot)
{
    CurveAttributes *cAtts = (CurveAttributes *)atts;
    bool update = false;
    if(cAtts->GetDoBallTimeCue() || cAtts->GetDoLineTimeCue())
    {
        if(plot.GetActualSpatialExtents().HasExtents())
        {
            double ext[6] = {0., 1., 0., 1., 0., 1.};
            plot.GetActualSpatialExtents().CopyTo(ext);

            double EPS = (ext[1] - ext[0]) / 1000.;
            double currentT = cAtts->GetTimeForTimeCue();
            if(currentT >= ext[0]-EPS && currentT <= ext[1]+EPS)
            {
                double t = (currentT - ext[0]) / (ext[1] - ext[0]);
                t += 0.01;
                double newT = (1. - t) * ext[0] + t * ext[1];
                if(newT > ext[1])
                    cAtts->SetTimeForTimeCue(ext[0]);
                else
                    cAtts->SetTimeForTimeCue(newT);
            }
            else
                cAtts->SetTimeForTimeCue(ext[0]);
            update = true;
        }
    }
    return update;
}

