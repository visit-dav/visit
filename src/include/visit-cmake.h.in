/* include/visit-config.h.in.  Generated from configure.in by autoheader.  */

/*******************************************************************************
 * Optional I/O libraries
 ******************************************************************************/

/* Define if building universal (internal helper macro) */
#cmakedefine AC_APPLE_UNIVERSAL_BUILD

/* Define if you have the cgns library. */
#cmakedefine HAVE_LIBCGNS

/* Define if you have the gdal library. */
#cmakedefine HAVE_LIBGDAL

/* Define if you have hdf4. */
#cmakedefine HAVE_LIBHDF4

/* Define if you have hdf5. */
#cmakedefine HAVE_LIBHDF5

/* Define if you have the netcdf library. */
#cmakedefine HAVE_LIBNETCDF

/* Define if you have the netcdf header. */
#cmakedefine HAVE_NETCDF_H

/* Define if you have the OpenEXR library. */
#cmakedefine HAVE_LIBOPENEXR

/* Define if you have pdb. */
#cmakedefine HAVE_LIBPDB

/* Define if you are using PDB proper instead of PDB lite. */
#cmakedefine HAVE_PDB_PROPER

/* Define if you have silo. */
#cmakedefine HAVE_LIBSILO

/* Define to identify the variant of PDB Lite (in silo) */
#cmakedefine PDB_LITE_HAS_LONG_LONG

/*******************************************************************************
 * Optional libraries
 ******************************************************************************/

/* Define if you have the boost library. */
#cmakedefine HAVE_BOOST

/* Define if you have the Damaris library. */
#cmakedefine HAVE_DAMARIS

/* Define if you have the FastBit library. */
#cmakedefine HAVE_LIBFASTBIT 

/* Define if you have the FastQuery library. */
#cmakedefine HAVE_LIBFASTQUERY

/* Define to 1 if you have the `m' library (-lm). */
#cmakedefine HAVE_LIBM 1

/* Define if you have the MFEM library. */
#cmakedefine HAVE_LIBMFEM

/* Define if you have the VTKh library. */
#cmakedefine HAVE_LIBVTKH

/* Define if you have the X11 library */
#cmakedefine HAVE_LIBX11

/* Define to 1 if you have the `z' library (-lz). */
#cmakedefine HAVE_LIBZ 1

/* Define if you have the Nektar++ library. */
#cmakedefine HAVE_NEKTAR_PP

/* Define if you have the OSMESA */
#cmakedefine HAVE_OSMESA

/* Define if you have the EGL */
#cmakedefine HAVE_EGL

/*******************************************************************************
 * Header file checks
 ******************************************************************************/

/* Define to 1 if you have the <fcntl.h> header file. */
#cmakedefine HAVE_FCNTL_H 1

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H 1

/* Define to 1 if you have the <limits.h> header file. */
#cmakedefine HAVE_LIMITS_H 1

/* Define to 1 if you have the <memory.h> header file. */
#cmakedefine HAVE_MEMORY_H 1

/* Define if socklen_t is defined. */
#cmakedefine HAVE_SOCKLEN_T

/* Define to 1 if stdbool.h conforms to C99. */
#cmakedefine HAVE_STDBOOL_H 1

/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H 1

/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H 1

/* Define to 1 if you have the <strings.h> header file. */
#cmakedefine HAVE_STRINGS_H 1

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H 1

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H 1

/* Define to 1 if you have the <sys/time.h> header file. */
#cmakedefine HAVE_SYS_TIME_H 1

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H 1

/* Define if you have the pthread library. */
#cmakedefine HAVE_THREADS

/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H 1

/* Define to 1 if you have the ANSI C header files. */
#cmakedefine STDC_HEADERS 1

/* Define to 1 if the system has the type `_Bool'. */
#cmakedefine HAVE__BOOL 1

/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
#cmakedefine TIME_WITH_SYS_TIME 1

/*******************************************************************************
 * Prototype checks
 ******************************************************************************/

/* Define to 1 if you have the `memmove' function. */
#cmakedefine HAVE_MEMMOVE 1

/* Define to 1 if you have the `div' function. */
#cmakedefine HAVE_DIV 1

/* Define if you have the prototype for ftime in the <sys/timeb.h>. */
#cmakedefine HAVE_FTIME_PROTOTYPE

/* Define if you have isfinite. */
#cmakedefine HAVE_ISFINITE

/* Define to 1 if you have the `select' function. */
#cmakedefine HAVE_SELECT 1

/* Define to 1 if you have the `setenv' function. */
#cmakedefine HAVE_SETENV 1

/* Define to 1 if you have the `strtof' function. */
#cmakedefine HAVE_STRTOF 1

/* Define if you have the prototype for strtof in the <stdlib.h>. */
#cmakedefine HAVE_STRTOF_PROTOTYPE

/* defined for aligned_alloc function, a malloc substitute in cstdlib  */
#cmakedefine HAVE_ALIGNED_ALLOC
#define VISIT_MEM_ALIGN 64

/*******************************************************************************
 * Package information
 ******************************************************************************/

/* Define to the address where bug reports for this package should be sent. */
#cmakedefine PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#cmakedefine PACKAGE_NAME

/* Define to the full name and version of this package. */
#cmakedefine PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#cmakedefine PACKAGE_TARNAME

/* Define to the version of this package. */
#cmakedefine PACKAGE_VERSION

/*******************************************************************************
 * Platform information
 ******************************************************************************/

/* The size of `boolean', as computed by sizeof. */
#cmakedefine SIZEOF_BOOLEAN @SIZEOF_BOOLEAN@

/* The size of `char', as computed by sizeof. */
#cmakedefine SIZEOF_CHAR @SIZEOF_CHAR@

/* The size of `double', as computed by sizeof. */
#cmakedefine SIZEOF_DOUBLE @SIZEOF_DOUBLE@

/* The size of `float', as computed by sizeof. */
#cmakedefine SIZEOF_FLOAT @SIZEOF_FLOAT@

/* The size of `int', as computed by sizeof. */
#cmakedefine SIZEOF_INT  @SIZEOF_INT@

/* The size of `long', as computed by sizeof. */
#cmakedefine SIZEOF_LONG @SIZEOF_LONG@

/* The size of `long double', as computed by sizeof. */
#cmakedefine SIZEOF_LONG_DOUBLE @SIZEOF_LONG_DOUBLE@

/* The size of a `long double', as computed by sizeof. */
#cmakedefine SIZEOF_LONG_FLOAT @SIZEOF_LONG_FLOAT@

/* The size of `long long', as computed by sizeof. */
#cmakedefine SIZEOF_LONG_LONG @SIZEOF_LONG_LONG@

/* The size of `short', as computed by sizeof. */
#cmakedefine SIZEOF_SHORT @SIZEOF_SHORT@

/* The size of `unsigned char', as computed by sizeof. */
#cmakedefine SIZEOF_UNSIGNED_CHAR @SIZEOF_UNSIGNED_CHAR@

/* The size of `unsigned int', as computed by sizeof. */
#cmakedefine SIZEOF_UNSIGNED_INT @SIZEOF_UNSIGNED_INT@

/* The size of `size_t', as computed by sizeof. */
#cmakedefine SIZEOF_SIZE_T @SIZEOF_SIZE_T@

/* The size of `unsigned long', as computed by sizeof. */
#cmakedefine SIZEOF_UNSIGNED_LONG @SIZEOF_UNSIGNED_LONG@

/* The size of `unsigned long long', as computed by sizeof. */
#cmakedefine SIZEOF_UNSIGNED_LONG_LONG @SIZEOF_UNSIGNED_LONG_LONG@

/* The size of `unsigned short', as computed by sizeof. */
#cmakedefine SIZEOF_UNSIGNED_SHORT @SIZEOF_UNSIGNED_SHORT@

/* The size of `void *', as computed by sizeof. */
#cmakedefine SIZEOF_VOID_P @SIZEOF_VOID_P@

/* The size of a `off64_t', as computed by sizeof. */
#cmakedefine SIZEOF_OFF64_T @SIZEOF_OFF64_T@

/* Define the slash character */
#cmakedefine VISIT_SLASH_CHAR @VISIT_SLASH_CHAR@

/* Define the slash string */
#cmakedefine VISIT_SLASH_STRING @VISIT_SLASH_STRING@

/* Define the plugin extension string */
#cmakedefine VISIT_PLUGIN_EXTENSION "@VISIT_PLUGIN_EXTENSION@"

/* Define VISIT_USE_PTY if we want to use PTYs. */
#cmakedefine VISIT_USE_PTY

/* Define PTY_SYSV if we have System V style pty functions -- BSD otherwise. */
#cmakedefine PTY_SYSV

/* Define NO_SETBUF if streambuf::setbuf is not public. */
#cmakedefine NO_SETBUF

/* Define if we want to use VisIt's no-spin BCast. */
#cmakedefine VISIT_USE_NOSPIN_BCAST

/* VisIt version as string */
#cmakedefine VISIT_VERSION "@VISIT_VERSION@"

/*
         Compile time VisIt version number support

VISIT_VERSION is a string. It does not support == or >< comparisons
at compile time. The logic below does. It works by carefully
constructing an integer from the major, minor and patch fields of the
version number taking care that the patch field can include a single
trailing letter for (a)lpha, (b)eta. This number is used internally
to define a greater-than-or-equal macro for testing VisIt version
numbers like so...

#if VISIT_VERSION_GE(3,0,0b)
    code for versions of VisIt the same or newer than 3.0.0b
#endif

The two-level indirection in the macros, V_V_HEX->_V_V_HEX->__V_V_HEX
is necessary to ensure the correct substitutions occur for the CPP token
pasting involved.

Finally, there are some sanity checks on the resulting version number
logic here to cause compilation failure if this logic seems to be failing.
*/

/* VisIt version as broken out integer values. */
/* Don't use #cmakedefine because 0 values will get undef'd */
#define VISIT_VERSION_MAJOR @VISIT_VERSION_MAJOR@
#define VISIT_VERSION_MINOR @VISIT_VERSION_MINOR@
#define VISIT_VERSION_PATCH @VISIT_VERSION_PATCH@

#define __VISIT_VERSION_HEX(A,B,C) (((A)<<24)|((B)<<16)|(((C)<=0x9)*(((C)<<8)|0xF))|(((C)>0x9)*((((C)&0xF0)<<4)|(C)&0x0F)))
#define _VISIT_VERSION_HEX(A,B,C) __VISIT_VERSION_HEX(A,B,(0x##C))
#define VISIT_VERSION_HEX(A,B,C) _VISIT_VERSION_HEX(A,B,C)

/* GE version macro defined in terms of the HEX version number */
#define VISIT_VERSION_GE(A,B,C) (VISIT_VERSION_HEX(VISIT_VERSION_MAJOR,VISIT_VERSION_MINOR,VISIT_VERSION_PATCH)>=VISIT_VERSION_HEX(A,B,C))

/* Sanity checks for VISIT_VERSION_HEX Utility */
#if VISIT_VERSION_HEX(2,13,3) < VISIT_VERSION_HEX(2,13,3a)
#error Problem with VISIT_VERSION_HEX() macro function
#endif
#if VISIT_VERSION_HEX(3,0,0b) < VISIT_VERSION_HEX(3,0,0a)
#error Problem with VISIT_VERSION_HEX() macro function
#endif
#if VISIT_VERSION_HEX(3,0,0) < VISIT_VERSION_HEX(2,13,3)
#error Problem with VISIT_VERSION_HEX() macro function
#endif
#if VISIT_VERSION_HEX(3,0,0) < VISIT_VERSION_HEX(3,0,0b)
#error Problem with VISIT_VERSION_HEX() macro function
#endif
#if VISIT_VERSION_HEX(3,0,1) < VISIT_VERSION_HEX(3,0,0b)
#error Problem with VISIT_VERSION_HEX() macro function
#endif

/* Plugin version macro */
#define VISIT_PLUGIN_VERSION_NAME(A,B) A##B
#ifdef WIN32
/* We need the extern "C" on Windows. */
#define VISIT_PLUGIN_VERSION(NAME, EXPORTMACRO) extern "C" EXPORTMACRO const char *VISIT_PLUGIN_VERSION_NAME(NAME,VisItPluginVersion) = VISIT_VERSION;
#else
#define VISIT_PLUGIN_VERSION(NAME, EXPORTMACRO) EXPORTMACRO const char *NAME##VisItPluginVersion = VISIT_VERSION;
#endif

/* App version check macro. Must check against the hex value.
   Usage: #if (APP_VERSION_CHECK(4, 4, 0) <= APP_VERSION_HEX )
*/
#define VISIT_APP_VERSION_CHECK(major, minor, patch) ((major<<16)|(minor<<8)|(patch))

/* Define to 1 if your processor stores words with the most significant byte
   first (like Motorola and SPARC, unlike Intel and VAX). */
#cmakedefine WORDS_BIGENDIAN 1
/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
   significant byte first (like Motorola and SPARC, unlike Intel). */

/* NEED TO CHECK OF MORE NEEDS TO BE DONE FOR THIS OR IF THE CMAKE DEFINE
   ABOVE WILL BE SUFFICIENT 
#if defined AC_APPLE_UNIVERSAL_BUILD
# if defined __BIG_ENDIAN__
#  define WORDS_BIGENDIAN 1
# endif
#else
# ifndef WORDS_BIGENDIAN
#  undef WORDS_BIGENDIAN
# endif
#endif
*/

/* Define the largest image that VisIt can save. */
#cmakedefine VISIT_RENDERING_SIZE_LIMIT @VISIT_RENDERING_SIZE_LIMIT@

/* Define to `int' if <sys/types.h> doesn't define. */
#cmakedefine gid_t

/* Define to `int' if <sys/types.h> doesn't define. */
#cmakedefine uid_t

/* Disable ssh tunneling on Panther. */
#cmakedefine PANTHERHACK

/* Force ssh tunneling. */
#cmakedefine VISIT_FORCE_SSH_TUNNELING

/* Force WinMain entry point on applications. */
#cmakedefine VISIT_WINDOWS_APPLICATION

/* Define a uniform socket buffer size that we can use in various places. */
#define VISIT_SOCKET_BUFFER_SIZE 1024

/* define control to intentionally leak things or not. my profiling shows it
   saves on the order of 0.001 sec to undefine this. leaving it undefined
   for now in case there's some issue with it when using a remote server.
#define DEBUG_MEMORY_LEAKS
*/
