Function: SupplyMissingDefaultsIfAppropriate
Declaration: void SupplyMissingDefaultsIfAppropriate();
Definition:
// ****************************************************************************
// Method: ThresholdOpAttributes::SupplyMissingDefaultsIfAppropriate
//
// Purpose: If attributes are set up for a single threshold variable, supply
//          default values for any attribute values that are missing.
//
// Programmer: Mark Blair
// Creation:   Thu Sep 28 12:07:05 PDT 2006
//
// Modifications:
//
//    Kevin Griffin, Wed Feb 15 11:50:13 PDT 2017
//    Added boundsRange field.
//
// ****************************************************************************

void
ThresholdOpAttributes::SupplyMissingDefaultsIfAppropriate()
{
    size_t totalEntryCount = 0;

    if (listedVarNames.size() > 1) return;
    totalEntryCount += listedVarNames.size();

    if (zonePortions.size() > 1) return;
    totalEntryCount += zonePortions.size();

    if (lowerBounds.size() > 1) return;
    totalEntryCount += lowerBounds.size();

    if (upperBounds.size() > 1) return;
    totalEntryCount += upperBounds.size();

    if (boundsRange.size() > 1) return;
    totalEntryCount += boundsRange.size();

    if ((totalEntryCount & 3) == 0) return;

    stringVector singleVarName;
    intVector    singleZonePortion;
    doubleVector singleLowerBound;
    doubleVector singleUpperBound;
    stringVector singleBoundsRange;

    if (listedVarNames.size() == 0)
    {
        singleVarName.push_back(std::string("default"));
        SetListedVarNames(singleVarName);
    }

    if (zonePortions.size() == 0)
    {
        singleZonePortion.push_back((int)PartOfZone);
        SetZonePortions(singleZonePortion);
    }

    if (lowerBounds.size() == 0)
    {
        singleLowerBound.push_back(-1e+37);
        SetLowerBounds(singleLowerBound);
    }

    if (upperBounds.size() == 0)
    {
        singleUpperBound.push_back(+1e+37);
        SetUpperBounds(singleUpperBound);
    }

    if(boundsRange.size() == 0)
    {
        singleBoundsRange.push_back("min:max");
        SetBoundsRange(singleBoundsRange);
    }
}

Function: AttributesAreConsistent
Declaration: bool AttributesAreConsistent() const;
Definition:
// ****************************************************************************
// Method: ThresholdOpAttributes::AttributesAreConsistent
//
// Purpose: Returns true only if (1) all vector attributes are the same length
//          and (2) the index of the currently displayable variable information
//          in the Threshold GUI window is in range.
//
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
//   Mark Blair, Tue Apr 17 16:24:42 PDT 2007
//   Rewritten to support new Threshold GUI; no more shown variable.
//
//   Kevin Griffin, Wed Feb 15 11:50:13 PDT 2017
//   Added boundsRange check.
//
// ****************************************************************************

bool
ThresholdOpAttributes::AttributesAreConsistent() const
{
    size_t varListSize = listedVarNames.size();

    if ((zonePortions.size() != varListSize) ||
        (lowerBounds.size()  != varListSize) ||
        (upperBounds.size()  != varListSize) ||
        (boundsRange.size() != varListSize))
    {
        return false;
    }

    return true;
}

Function: ForceAttributeConsistency
Declaration: void ForceAttributeConsistency();
Definition:
// ****************************************************************************
// Method: ThresholdOpAttributes::ForceAttributeConsistency
//
// Purpose: Forces Threshold attributes to be consistent.  Attributes can be
//          inconsistent, for instance, if the user has specified an invalid
//          combination of them in the CLI.  If current attributes are in fact
//          inconsistent, this is recorded in the debug log.
//
// Programmer: Mark Blair
// Creation:   Tue Mar 13 19:51:29 PDT 2007
//
// Modifications:
//
//   Kevin Griffin, Wed Feb 15 11:50:13 PDT 2017
//   Added boundsRange
//
// ****************************************************************************
#include <DebugStream.h>
void
ThresholdOpAttributes::ForceAttributeConsistency()
{
    size_t varListSize = listedVarNames.size();
    size_t varNum;
    double boundValue;
    bool consistent = ((zonePortions.size() == varListSize) &&
                       ( lowerBounds.size() == varListSize) &&
                       ( upperBounds.size() == varListSize) &&
                       ( boundsRange.size() == varListSize));

    if (!consistent)
    {
        if (zonePortions.size() > varListSize) zonePortions.resize(varListSize);
        if ( lowerBounds.size() > varListSize)  lowerBounds.resize(varListSize);
        if ( upperBounds.size() > varListSize)  upperBounds.resize(varListSize);
        if ( boundsRange.size() > varListSize)  boundsRange.resize(varListSize);

        for (varNum = 0; varNum < varListSize; varNum++ )
        {
            if (zonePortions.size() < varListSize)
                zonePortions.push_back((int)ThresholdOpAttributes::PartOfZone);
            if (lowerBounds.size() < varListSize)
                lowerBounds.push_back(-1e+37);
            if (upperBounds.size() < varListSize)
                upperBounds.push_back(+1e+37);
            if (boundsRange.size() < varListSize)
                boundsRange.push_back("min:max");
        }
    }

    for (varNum = 0; varNum < varListSize; varNum++ )
    {
        if (lowerBounds[varNum] > upperBounds[varNum])
        {
            consistent = false;

            boundValue          = lowerBounds[varNum];
            lowerBounds[varNum] = upperBounds[varNum];
            upperBounds[varNum] = boundValue;
        }
    }

    if (!consistent && (varListSize > 0))
    {
        if (defaultVarName == std::string("default"))
            defaultVarName = listedVarNames[0];
    }

    if (!consistent)
    {
        debug3 << "Threshold operator attributes are inconsistent; "
               << "corrections will be applied." << endl;
        SelectAll();
    }
}

Function: SwitchDefaultVariableNameToTrueName
Declaration: void SwitchDefaultVariableNameToTrueName();
Definition:
// ****************************************************************************
// Method: ThresholdOpAttributes::SwitchDefaultVariableNameToTrueName
//
// Purpose: Replaces the anonymous "default" variable name with its true name
//          if the default variable is scalar.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   Deletes default variable from threshold variable list if not scalar.
//
//   Mark Blair, Tue Apr 17 16:24:42 PDT 2007
//   Rewritten to support new Threshold GUI; no more "shown variable".
//
//   Mark Blair, Tue Sep 18 17:06:28 PDT 2007
//   No longer deletes variable from threshold variable list if not scalar.
//   Also changed method name to reflect this.
//
// ****************************************************************************

void
ThresholdOpAttributes::SwitchDefaultVariableNameToTrueName()
{
    size_t varPosition;
    bool changedTheList;
    std::string listedVarName;

    do
    {
        for (varPosition = 0; varPosition < listedVarNames.size(); varPosition++)
        {
            listedVarName = listedVarNames[varPosition];

            if (listedVarName == std::string("default")) break;
            if (listedVarName == defaultVarName) break;
        }

        changedTheList = false;

        if (varPosition < listedVarNames.size())
        {
            if (listedVarName == std::string("default"))
            {
                listedVarNames[varPosition] = defaultVarName;
                Select(1, (void *)&listedVarNames);

                changedTheList = true;
            }
        }
    }
    while (changedTheList);
}

