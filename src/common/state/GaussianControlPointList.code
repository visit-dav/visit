Target: xml2atts
Function: SetNumControlPoints
Declaration: void SetNumControlPoints(const int n);
Definition:
// ****************************************************************************
// Method: GaussianControlPointList::SetNumControlPoints
//
// Purpose:
//   Resized the controlpoints vector, adding or removing points as needed. 
//
// Note:       Generated by xml2atts from code file.
//
// Programmer: Kathleen Biagas 
// Creation:   May 24, 2022
//
// Modifications:
//
// ****************************************************************************

void
GaussianControlPointList::SetNumControlPoints(const int n)
{
    int currentSize = GetNumControlPoints();

    if(n == currentSize)
    {
        return;
    }
    else if (n == 0)
    {
        // ClearControlPoints calls Select so there is no need to progress to
        // the bottom of this method to repeat Select.
        ClearControlPoints();
        return;
    }
    else if(n < currentSize)
    {
        AttributeGroupVector::iterator pos = controlPoints.end();
        pos--;
        for (int i = 0; i < (currentSize-n); ++i, --pos)
        {
            delete *pos;
            controlPoints.erase(pos);
        }
    }
    else
    {
        float delta = 1.f/float(n-1);
        float pos = 0.f;
        for(int i = 0; i < currentSize; ++i, pos+=delta)
        {
            ((GaussianControlPoint*)(controlPoints[i]))->SetX(pos);
        }
        controlPoints.resize(n);
        for(int i = currentSize; i < n; ++i, pos+=delta)
        {
            GaussianControlPoint *gpt = new GaussianControlPoint();
            gpt->SetX(pos);
            gpt->SetHeight(0.5f);
            gpt->SetWidth(0.03f);
            gpt->SetXBias(0.0f);
            gpt->SetYBias(0.0f);
            controlPoints[i] = gpt;
        }
    }

    Select(ID_controlPoints, (void*)&controlPoints);
}

Target: xml2python
Function: GaussianControlPointList_SetNumControlPoints
Declaration: GaussianControlPointList_SetNumControlPoints
Definition:
PyObject *
GaussianControlPointList_SetNumControlPoints(PyObject *self, PyObject *args)
{
    GaussianControlPointListObject *obj = (GaussianControlPointListObject *)self;
    int numItems = -1;
    if(!PyArg_ParseTuple(args, "i", &numItems))
        return PyErr_Format(PyExc_TypeError, "Expecting integer numItems");
    obj->data->SetNumControlPoints(numItems);
    Py_INCREF(Py_None);
    return Py_None;
}

