Function: SetFromNode
Declaration: virtual void SetFromNode(DataNode *parentNode);
Definition:
// ****************************************************************************
// Method: AnnotationObject::SetFromNode
//
// Purpose:
//   This method sets attributes in this object from values in a DataNode
//    representation of the object.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Fri Mar 17 14:44:33 PST 2006
//
// Modifications:
//   Kathleen Bonnell, Fri Mar 31 14:14:25 PST 2006
//   Handle the case where the parentNode saved postion as float instead
//   of double.
//
//   Brad Whitlock, Fri Mar 23 17:08:29 PST 2007
//   Added objectName.
//
//   Kathleen Bonnell, Thu Oct  1 15:00:50 PDT 2009
//   Added intAttribute2, intAttribute3, doubleVector1, stringVector1,
//   stringVector2
// ****************************************************************************

void
AnnotationObject::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("AnnotationObject");
    if(searchNode == 0)
        return;

    DataNode *node;
    if((node = searchNode->GetNode("objectName")) != 0)
        SetObjectName(node->AsString());
    if((node = searchNode->GetNode("objectType")) != 0)
    {
        // Allow enums to be int or string in the config file
        if(node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if(ival >= 0 && ival < 8)
                SetObjectType(AnnotationType(ival));
        }
        else if(node->GetNodeType() == STRING_NODE)
        {
            AnnotationType value;
            if(AnnotationType_FromString(node->AsString(), value))
                SetObjectType(value);
        }
    }
    if((node = searchNode->GetNode("visible")) != 0)
        SetVisible(node->AsBool());
    if((node = searchNode->GetNode("active")) != 0)
        SetActive(node->AsBool());
    if((node = searchNode->GetNode("position")) != 0)
    {
        if(node->GetNodeType() == FLOAT_ARRAY_NODE)
        {
            const float *fn = node->AsFloatArray();
            double dp[3] = {fn[0], fn[1], fn[2]};
            SetPosition(dp);
        }
        else
            SetPosition(node->AsDoubleArray());
    }
    if((node = searchNode->GetNode("position2")) != 0)
    {
        if(node->GetNodeType() == FLOAT_ARRAY_NODE)
        {
            const float *fn = node->AsFloatArray();
            double dp[3] = {fn[0], fn[1], fn[2]};
            SetPosition2(dp);
        }
        else
            SetPosition2(node->AsDoubleArray());
    }
    if((node = searchNode->GetNode("textColor")) != 0)
        textColor.SetFromNode(node);
    if((node = searchNode->GetNode("useForegroundForTextColor")) != 0)
        SetUseForegroundForTextColor(node->AsBool());
    if((node = searchNode->GetNode("color1")) != 0)
        color1.SetFromNode(node);
    if((node = searchNode->GetNode("color2")) != 0)
        color2.SetFromNode(node);
    if((node = searchNode->GetNode("text")) != 0)
        SetText(node->AsStringVector());
    if((node = searchNode->GetNode("fontFamily")) != 0)
    {
        // Allow enums to be int or string in the config file
        if(node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if(ival >= 0 && ival < 3)
                SetFontFamily(FontFamily(ival));
        }
        else if(node->GetNodeType() == STRING_NODE)
        {
            FontFamily value;
            if(FontFamily_FromString(node->AsString(), value))
                SetFontFamily(value);
        }
    }
    if((node = searchNode->GetNode("fontBold")) != 0)
        SetFontBold(node->AsBool());
    if((node = searchNode->GetNode("fontItalic")) != 0)
        SetFontItalic(node->AsBool());
    if((node = searchNode->GetNode("fontShadow")) != 0)
        SetFontShadow(node->AsBool());
    if((node = searchNode->GetNode("doubleAttribute1")) != 0)
        SetDoubleAttribute1(node->AsDouble());
    if((node = searchNode->GetNode("intAttribute1")) != 0)
        SetIntAttribute1(node->AsInt());
    if((node = searchNode->GetNode("options")) != 0)
        SetOptions(node->AsMapNode());
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: AnnotationObject::ProcessOldVersions
//
// Purpose:
//   This method maps old AnnotationAttributes fields to the 1.9.0 version of
//   the data node tree for AnnotationAttributes.
//
// Programmer: Kathleen Bonnell
// Creation:   Thu Sep 17 10:06:49 PDT 2009
//
// Modifications:
//   Kathleen Biagas, Wed Nov 28 14:03:22 PST 2018
//   Split off the different version checks into stand alone methods based
//   on objectType.
//
// ****************************************************************************

void
AnnotationObject::ProcessOldVersions(DataNode *parentNode,
    const char *configVersion)
{
    if (!VersionLessThan(configVersion, "3.0.0") || parentNode == 0)
    {
        return;
    }

    DataNode * searchNode = parentNode->GetNode("AnnotationObject");
    if (searchNode == 0)
        return;

    DataNode *node = searchNode->GetNode("objectType");
    if (node == 0)
        return;

    if (node->AsString() == "LegendAttributes")
        ProcessOldLegend(searchNode, configVersion);
    else if (node->AsString() == "Line3D")
        ProcessOldLine3D(searchNode);
    else if (node->AsString() == "Line2D")
        ProcessOldLine2D(searchNode);
}

Function: ProcessOldLegend
Declaration: void ProcessOldLegend(DataNode *searchNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: AnnotationObject::ProcessOldLegend
//
// Purpose:
//   This method maps old Legend fields to
//   the data node tree for AnnotationObject.
//
// Programmer: Kathleen Bonnell
// Creation:   November 28, 2018
//
// Modifications:
//
// ****************************************************************************

void
AnnotationObject::ProcessOldLegend(DataNode *searchNode, const char *configVersion)
{
    // what follows is for Legends only
    DataNode *node = NULL;
    if (VersionLessThan(configVersion, "2.0.0"))
    {
        node = searchNode->GetNode("intAttribute1");
        if (node != 0)
        {
            int n = node->AsInt();

            if ((n & (1 << 2)) != 0) // DrawLabels is set, change it to DrawValues
            {
                n -= 4;   // DrawLabels
                n += 512; // DrawValues
            }
            // other new legend enums, default to on, and sum to 384
            n += 384;
            node->SetInt(n);
        }

        // new numTics attribute, default setting is 5
    }

    // pre 3.0.0
    MapNode options;
    node = searchNode->GetNode("intAttribute2");
    if (node != 0)
    {
        options["numTicks"] = node->AsInt();
        searchNode->RemoveNode("intAttribute2");
    }
    else // pre 2.0.0
    {
        options["numTicks"] = 5; // default
    }

    node = searchNode->GetNode("intAttribute3");
    if (node != 0)
    {
        options["legendType"] = node->AsInt();
        searchNode->RemoveNode("intAttribute3");
    }
    else // pre 2.0.0
    {
        options["legendType"] = 0; // default "Variable" type
    }
    node = searchNode->GetNode("stringVector1");
    if (node != 0)
    {
        options["suppliedLabels"] = node->AsStringVector();
        searchNode->RemoveNode("stringVector1");
    }
    node = searchNode->GetNode("doubleVector1");
    if (node != 0)
    {
        options["suppliedValues"] = node->AsDoubleVector();
        searchNode->RemoveNode("doubleVector1");
    }
    node = searchNode->GetNode("stringVector2");
    if (node != 0)
    {
        options["suppliedValuesStrings"] = node->AsStringVector();
        searchNode->RemoveNode("stringVector2");
    }
    node = searchNode->GetNode("doubleAttribute1");
    if (node != 0)
    {
        options["fontHeight"] = node->AsDouble();
        searchNode->RemoveNode("doubleAttribute1");
    }
    node = new DataNode("options", options);
    searchNode->AddNode(node);
}

Function: ProcessOldLine3D
Declaration: void ProcessOldLine3D(DataNode *searchNode);
Definition:
// ****************************************************************************
// Method: AnnotationObject::ProcessOldLine3D
//
// Purpose:
//   This method maps old Line3D AnnotationObject fields to the 3.0.0 version
//   of the data node tree for Line3D AnnotationObjects.
//
// Programmer: Kathleen Biagas
// Creation:   November 28, 2018
//
// Modifications:
//
// ****************************************************************************

void
AnnotationObject::ProcessOldLine3D(DataNode *searchNode)
{
    // what follows is for Line3D only

    // Line3D specific options are now stored in a MapNode
    MapNode options;

    DataNode *node = searchNode->GetNode("color2");
    if (node != 0)
    {
        // color2 stored arrow1, arrow2, arrow1Resolution and arrow2Resolution
        const unsigned char *c2 = node->GetNode("ColorAttribute")->GetNode("color")->AsUnsignedCharArray();
        options["arrow1"] = (bool) c2[0];
        options["arrow2"] = (bool) c2[1];
        options["arrow1Resolution"] = (int) c2[2];
        options["arrow2Resolution"] = (int) c2[3];
        searchNode->RemoveNode("color2");
    }

    node = searchNode->GetNode("doubleVector1");
    if (node != 0)
    {
        // doubleVector1 stored arrow1Radius, arrow2Radius,
        // tubeQuality, tubeRadius
        const doubleVector &dv = node->AsDoubleVector();
        options["arrow1Radius"] = dv[0];
        options["arrow2Radius"] = dv[1];
        options["tubeQuality"]  = (int)dv[2];
        options["tubeRadius"]   = dv[3];

        // add new arrow height options, % of radius
        options["arrow1Height"] = dv[0] * 2.8;
        options["arrow1Height"] = dv[1] * 2.8;

        searchNode->RemoveNode("doubleVector1");
    }

    node = searchNode->GetNode("intAttribute1");
    if (node != 0)
    {
        // intAttribute1 stored  line width
        options["width"] = node->AsInt();
        searchNode->RemoveNode("intAttribute1");
    }

    node = searchNode->GetNode("intAttribute2");
    if (node != 0)
    {
        // intAttribute2 stored lineStyle, no longer applicable
        searchNode->RemoveNode("intAttribute2");
    }

    node = searchNode->GetNode("intAttribute3");
    if (node != 0)
    {
        // intAttribute3 stored line Type
        options["lineType"] = node->AsInt();
        searchNode->RemoveNode("intAttribute3");
    }

    // Probably being over-cautious here, but perform some sanity checks to
    // ensure all the required options are present,  fill with defaults if not
    if (! options.HasEntry("arrow1"))
        options["arrow1"] = false;
    if (! options.HasEntry("arrow2"))
        options["arrow2"] = false;
    if (! options.HasEntry("arrow1Resolution"))
        options["arrow1Resolution"] = 16;
    if (! options.HasEntry("arrow2Resolution"))
        options["arrow2Resolution"] = 16;
    if (! options.HasEntry("arrow1Radius"))
        options["arrow1Radius"] = 0.5;
    if (! options.HasEntry("arrow2Radius"))
        options["arrow2Radius"] = 0.5;
    if (! options.HasEntry("arrow1Height"))
        options["arrow1Height"] = 1.4;
    if (! options.HasEntry("arrow2Height"))
        options["arrow2Height"] = 1.4;
    if (! options.HasEntry("width"))
        options["width"] = 0;
    if (! options.HasEntry("lineType"))
        options["lineType"] = 0;
    if (! options.HasEntry("tubeQuality"))
        options["tubeQuality"] = 1;
    if (! options.HasEntry("tubeRadius"))
        options["tubeRadius"] = 0.5;

    node = new DataNode("options", options);
    searchNode->AddNode(node);
}

Function: ProcessOldLine2D
Declaration: void ProcessOldLine2D(DataNode *searchNode);
Definition:
// ****************************************************************************
// Method: AnnotationObject::ProcessOldLine2D
//
// Purpose:
//   This method maps old Line2D AnnotationObject fields to the 3.0.0 version
//   of the data node tree for Line2D AnnotationObjects.
//
// Programmer: Kathleen Biagas
// Creation:   November 28, 2018
//
// Modifications:
//
// ****************************************************************************

void
AnnotationObject::ProcessOldLine2D(DataNode *searchNode)
{
    // what follows is for Line2D only

    // Line3D specific options are now stored in a MapNode
    MapNode options;

    DataNode *node = searchNode->GetNode("color2");
    if (node != 0)
    {
        // color2 stored beginArrow and endArrow in 'green'(1)  and 'blue' (2)
        const unsigned char *c2 = node->GetNode("ColorAttribute")->GetNode("color")->AsUnsignedCharArray();
        options["beginArrowStyle"] = (int) c2[1];
        options["endArrowStyle"]   = (int) c2[2];
        searchNode->RemoveNode("color2");
    }

    node = searchNode->GetNode("intAttribute1");
    if (node != 0)
    {
        // intAttribute1 stored  line width
        options["width"] = node->AsInt();
        searchNode->RemoveNode("intAttribute1");
    }

    node = searchNode->GetNode("intAttribute2");
    if (node != 0)
    {
        // intAttribute2 stored lineStyle, no longer applicable
        searchNode->RemoveNode("intAttribute2");
    }

    // Probably being over-cautious here, but perform some sanity checks to
    // ensure all the required options are present,  fill with defaults if not
    if (! options.HasEntry("beginArrowStyle"))
        options["arrow1"] = 0;
    if (! options.HasEntry("endArrowStyle"))
        options["arrow2"] = 0;
    if (! options.HasEntry("width"))
        options["width"] = 0;

    node = new DataNode("options", options);
    searchNode->AddNode(node);
}

Function: ProcessOldText3D
Declaration: void ProcessOldText3D(DataNode *searchNode);
Definition:
// ****************************************************************************
// Method: AnnotationObject::ProcessOldText3D
//
// Purpose:
//   This method maps old Text3D AnnotationObject fields to the 3.0.0 version
//   of the data node tree for Text3D AnnotationObjects.
//
// Programmer: Kathleen Biagas
// Creation:   November 28, 2018
//
// Modifications:
//
// ****************************************************************************

void
AnnotationObject::ProcessOldText3D(DataNode *searchNode)
{
    // what follows is for Text3D only

    MapNode options;

    DataNode *node = searchNode->GetNode("fontBold");
    if (node != 0)
    {
        options["preserveOrientation"] = node->AsBool();
        searchNode->RemoveNode("fontBold");
    }

    node = searchNode->GetNode("fontItalic");
    if (node != 0)
    {
        options["useRelativeHeight"] = node->AsBool();
        searchNode->RemoveNode("fontItalic");
    }

    node = searchNode->GetNode("intAttribute1");
    if (node != 0)
    {
        options["relativeHeight"] = node->AsInt();
        searchNode->RemoveNode("intAttribute1");
    }

    node = searchNode->GetNode("doubleAttribute1");
    if (node != 0)
    {
        options["fixedHeight"] = node->AsDouble();
        searchNode->RemoveNode("doubleAttribute1");
    }

    node = new DataNode("options", options);
    searchNode->AddNode(node);
}

