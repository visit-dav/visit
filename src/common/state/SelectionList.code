Function: GetSelection
Declaration: int GetSelection(const std::string &name) const;
Definition:
int
SelectionList::GetSelection(const std::string &name) const
{
    int retval = -1;
    for(int i = 0; i < GetNumSelections(); ++i)
    {
        if(GetSelections(i).GetName() == name)
        {
            retval = i;
            break;
        }
    }
    return retval;
}

Function: GetSelectionSummary
Declaration: int GetSelectionSummary(const std::string &name) const;
Definition:
int
SelectionList::GetSelectionSummary(const std::string &name) const
{
    int retval = -1;
    for(int i = 0; i < GetNumSelectionSummarys(); ++i)
    {
        if(GetSelectionSummary(i).GetName() == name)
        {
            retval = i;
            break;
        }
    }
    return retval;
}

Function: SetFromNode
Declaration: bool SetFromNode(DataNode *parentNode);
Definition:
// ****************************************************************************
// Method: SelectionList::SetFromNode
//
// Purpose:
//   This method sets attributes in this object from values in a DataNode representation of the object.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//   Brad Whitlock
//   Do not use the selection summary list.
//
// ****************************************************************************

void
SelectionList::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("SelectionList");
    if(searchNode == 0)
        return;

    DataNode *node;
    DataNode **children;
    if((node = searchNode->GetNode("autoApplyUpdates")) != 0)
        SetAutoApplyUpdates(node->AsBool());

    // Clear all the SelectionPropertiess if we got any.
    bool clearedSelections = false;
    // Go through all of the children and construct a new
    // SelectionProperties for each one of them.
    children = searchNode->GetChildren();
    if(children != 0)
    {
        for(int i = 0; i < searchNode->GetNumChildren(); ++i)
        {
            if(children[i]->GetKey() == std::string("SelectionProperties"))
            {
                if (!clearedSelections)
                {
                    ClearSelections();
                    clearedSelections = true;
                }
                SelectionProperties temp;
                temp.SetFromNode(children[i]);
                AddSelections(temp);
            }
        }
    }

    // Clear all the SelectionSummary list.
    ClearSelectionSummarys();
}

Function: CreateNode
Declaration: bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
Definition:
// ****************************************************************************
// Method: SelectionList::CreateNode
//
// Purpose:
//   This method creates a DataNode representation of the object so it can be saved to a config file.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//   Brad Whitlock
//   Do not save the selection summary list.
//
// ****************************************************************************

bool
SelectionList::CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd)
{
    if(parentNode == 0)
        return false;

    SelectionList defaultObject;
    bool addToParent = false;
    // Create a node for SelectionList.
    DataNode *node = new DataNode("SelectionList");

    if(completeSave || !FieldsEqual(ID_autoApplyUpdates, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("autoApplyUpdates", autoApplyUpdates));
    }

    if(completeSave)
    {
        addToParent = true;
        for(size_t i = 0; i < selections.size(); ++i)
            selections[i]->CreateNode(node, completeSave, true);
    }

    // Add the node to the parent node.
    if(addToParent || forceAdd)
        parentNode->AddNode(node);
    else
        delete node;

    return (addToParent || forceAdd);
}
