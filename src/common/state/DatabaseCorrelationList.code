Function: FindCorrelation
Declaration: DatabaseCorrelation *FindCorrelation(const std::string &name) const;
Definition:
DatabaseCorrelation *
DatabaseCorrelationList::FindCorrelation(const std::string &name) const
{
    DatabaseCorrelation *retval = 0;

    for(size_t i = 0; i < correlations.size(); ++i)
    {
        DatabaseCorrelation *c = (DatabaseCorrelation *)correlations[i];
        if(name == c->GetName())
        {
            retval = c;
            break;
        }
    }

    return retval;
}

Function: PrintOperator
Declaration: ostream &operator <<(ostream &, const DatabaseCorrelationList &cL);
Definition:
ostream &
operator << (ostream &os, const DatabaseCorrelationList &cL)
{
   os << "{";
   for(int i = 0; i < cL.GetNumCorrelations(); ++i)
   {
      os << cL[i] << ", " << endl;
   }
   os << "}";
   return os;
}

Function: RemoveCorrelation
Declaration: bool RemoveCorrelation(const std::string &name);
Definition:
// ****************************************************************************
// Method: DatabaseCorrelationList::RemoveCorrelation
//
// Purpose:
//   Removes the named correlation from the list.
//
// Arguments:
//   name : The name of the correlation to remove.
//
// Programmer: Brad Whitlock
// Creation:   Sun Jan 25 02:29:13 PDT 2004
//
// Modifications:
//
// ****************************************************************************

bool
DatabaseCorrelationList::RemoveCorrelation(const std::string &name)
{
    int delIndex = -1;
    for(int i = 0; i < GetNumCorrelations(); ++i)
    {
       const DatabaseCorrelation &c = GetCorrelations(i);
       if(c.GetName() == name)
       {
           delIndex = i;
           break;
       }
    }

    if(delIndex >= 0)
       RemoveCorrelations(delIndex);

    return (delIndex>=0);
}

Function: CreateNode
Declaration: bool CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd);
Definition:
// ****************************************************************************
// Method: DatabaseCorrelationList::CreateNode
//
// Purpose:
//   This method creates a DataNode representation of the object so it can be saved to a config file.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Mon Mar 1 16:55:46 PST 2004
//
// Modifications:
//   Brad Whitlock, Thu Mar 25 16:45:47 PST 2004
//   I modified the code so the correlation list is only saved when
//   completeSave is true.
//
// ****************************************************************************

bool
DatabaseCorrelationList::CreateNode(DataNode *parentNode, bool completeSave, bool)
{
    if(parentNode == 0)
        return false;

    // Only save the correlations on a complete save.
    DataNode *node = new DataNode("DatabaseCorrelationList");
    if(completeSave)
    {
        for(size_t i = 0; i < correlations.size(); ++i)
            correlations[i]->CreateNode(node, completeSave, true);
    }

    node->AddNode(new DataNode("needPermission", needPermission));
    node->AddNode(new DataNode("defaultCorrelationMethod", defaultCorrelationMethod));
    node->AddNode(new DataNode("whenToCorrelate", WhenToCorrelate_ToString(whenToCorrelate)));

    // Add the node to the parent node.
    parentNode->AddNode(node);

    return true;
}

