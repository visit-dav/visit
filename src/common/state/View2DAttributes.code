Target: xml2python
Code: PyView2DAttributes.C
Prefix:
//
// The type description structure
//
static PyNumberMethods View2DAttributes_as_number = {
    (binaryfunc)View2DAttributes_Add, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)View2DAttributes_Mul, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0,    /*nb_remainder*/
    (binaryfunc)0,    /*nb_divmod*/
    (ternaryfunc)0,    /*nb_power*/
    (unaryfunc)0,    /*nb_negative*/
    (unaryfunc)0,    /*nb_positive*/
    (unaryfunc)0,    /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    (unaryfunc)0,    /*nb_invert*/
    (binaryfunc)0,    /*nb_lshift*/
    (binaryfunc)0,    /*nb_rshift*/
    (binaryfunc)0,    /*nb_and*/
    (binaryfunc)0,    /*nb_xor*/
    (binaryfunc)0,    /*nb_or*/
    0,            /*nb_coerce*/
    (unaryfunc)0,    /*nb_int*/
    (unaryfunc)0,    /*nb_long*/
    (unaryfunc)0,    /*nb_float*/
    (unaryfunc)0,    /*nb_oct*/
    (unaryfunc)0,     /*nb_hex*/
    0,            /*nb_inplace_add*/
    0,            /*nb_inplace_subtract*/
    0,            /*nb_inplace_multiply*/
    0,            /*nb_inplace_divide*/
    0,            /*nb_inplace_remainder*/
    0,            /*nb_inplace_power*/
    0,            /*nb_inplace_lshift*/
    0,            /*nb_inplace_rshift*/
    0,            /*nb_inplace_and*/
    0,            /*nb_inplace_xor*/
    0,            /*nb_inplace_or*/
}; 
Postfix:

Target: xml2atts
Constant: DEFAULT_FULL_FRAME_AUTO_THRESHOLD
Declaration: static const double DEFAULT_FULL_FRAME_AUTO_THRESHOLD;
Definition: const double View2DAttributes::DEFAULT_FULL_FRAME_AUTO_THRESHOLD = 100.0;


Target: xml2java
Constant: DEFAULT_FULL_FRAME_AUTO_THRESHOLD
Declaration: DEFAULT_FULL_FRAME_AUTO_THRESHOLD
Definition:
    public final static double DEFAULT_FULL_FRAME_AUTO_THRESHOLD = 100.0;


Target: xml2atts
Function: GetUseFullFrame
Declaration: bool GetUseFullFrame(const double *limits=0) const;
Definition:
// ****************************************************************************
// Method: View2DAttributes::GetUseFullFrame
//
// Purpose: Together with the full frame activation mode and, optionally,
// limits, this method determines if full frame mode should be used.
//
// Programmer: Mark C. Miller
// Creation:   July 20, 2005
//
//  Modifications:
//    Shelly Prevost, Fri Mar 23 15:03:31 PDT 2007
//    Added code to check for DBL_MAX to avoid doing math that
//    exceeded maximums and cause a crash.
// ****************************************************************************

bool
View2DAttributes::GetUseFullFrame(const double *limits) const
{
    if (fullFrameActivationMode == Off)
        return false;

    if (fullFrameActivationMode == On)
        return true;

    if (limits == 0)
        return false;
        
    // if the limits are not initialized then doing math
    // with them will cause an error so check them first.
    if ( (limits[1] == -DBL_MAX  && limits[0] == DBL_MAX) ||
         (limits[3] == -DBL_MAX  && limits[2] == DBL_MAX)   )
    {
        return false;
    }
    
    double dlimit1 = limits[1] - limits[0];
    double dlimit2 = limits[3] - limits[2];
    double aspect;

    if (dlimit1 > dlimit2)
    {
        if (dlimit2 != 0)
            aspect = dlimit1 / dlimit2;
        else
            aspect = fullFrameAutoThreshold;
    }
    else
    {
        if (dlimit1 != 0)
            aspect = dlimit2 / dlimit1;
        else
            aspect = fullFrameAutoThreshold;
    }

    if (aspect >= fullFrameAutoThreshold)
        return true;
    else
        return false;
}

Function: SetUseFullFrame
Declaration: void SetUseFullFrame(bool ff);
Definition:
// ****************************************************************************
// Method: View2DAttributes::SetUseFullFrame
//
// Purpose: Sets full frame activation mode to On/Off if it is not currently
// in Auto mode. Otherwise, it does not change the mode.
//
// Programmer: Mark C. Miller
// Creation:   July 20, 2005
//
// ****************************************************************************

void
View2DAttributes::SetUseFullFrame(bool ff)
{
    if (fullFrameActivationMode == Auto)
        return;

    if (ff)
        fullFrameActivationMode = On;
    else
        fullFrameActivationMode = Off;
}

Function: ResetView
Declaration: void ResetView(const double *bbox);
Definition:
#include <math.h>
// ****************************************************************************
// Method: View2DAttributes::ResetView
//
// Purpose: 
//   Resets the view to something that can accommodate the bbox.
//
// Arguments:
//   bbox : The 2D extents that we're trying to look at.
//
// Programmer: Brad Whitlock
// Creation:   Tue Mar  3 16:21:14 PST 2009
//
// Modifications:
//   
// ****************************************************************************
void
View2DAttributes::ResetView(const double *bbox)
{
    const double vpc[] = {0.2, 0.95, 0.15, 0.95};
    View2DAttributes view2D;
    view2D.SetWindowCoords(bbox);
    view2D.SetViewportCoords(vpc);

    // Copy the object into this.
    *this = view2D;
}

Target: xml2python
Function: View2DAttributes_Add
Declaration: View2DAttributes_Add
Definition:
static PyObject *
View2DAttributes_Add(PyObject *v, PyObject *w)
{
    bool arg1isObject = PyView2DAttributes_Check(v);
    bool arg2isObject = PyView2DAttributes_Check(w);
    if(!arg1isObject || !arg2isObject)
    {
        cerr << "View2DAttributes_Add: One or more arguments are not View2DAttributes!" << endl;
        return NULL;
    }


    PyObject *retval = NewView2DAttributes(0);
    View2DAttributes *c = PyView2DAttributes_FromPyObject(retval);
    View2DAttributes *a = ((View2DAttributesObject *)v)->data;
    View2DAttributes *b = ((View2DAttributesObject *)w)->data;


    c->GetWindowCoords()[0] = a->GetWindowCoords()[0] + b->GetWindowCoords()[0];
    c->GetWindowCoords()[1] = a->GetWindowCoords()[1] + b->GetWindowCoords()[1];
    c->GetWindowCoords()[2] = a->GetWindowCoords()[2] + b->GetWindowCoords()[2];
    c->GetWindowCoords()[3] = a->GetWindowCoords()[3] + b->GetWindowCoords()[3];


    c->GetViewportCoords()[0] = a->GetViewportCoords()[0] + b->GetViewportCoords()[0];
    c->GetViewportCoords()[1] = a->GetViewportCoords()[1] + b->GetViewportCoords()[1];
    c->GetViewportCoords()[2] = a->GetViewportCoords()[2] + b->GetViewportCoords()[2];
    c->GetViewportCoords()[3] = a->GetViewportCoords()[3] + b->GetViewportCoords()[3];


    if(a->GetFullFrameAutoThreshold() < b->GetFullFrameAutoThreshold())
        c->SetFullFrameAutoThreshold(a->GetFullFrameAutoThreshold());
    else
        c->SetFullFrameAutoThreshold(b->GetFullFrameAutoThreshold());


    if(a->GetFullFrameActivationMode() == View2DAttributes::On &&
       b->GetFullFrameActivationMode() == View2DAttributes::On)
    {
        c->SetFullFrameActivationMode(View2DAttributes::On);
    }
    else if(a->GetFullFrameActivationMode() == View2DAttributes::Off &&
       b->GetFullFrameActivationMode() == View2DAttributes::Off)
    {
        c->SetFullFrameActivationMode(View2DAttributes::Off);
    }
    else
        c->SetFullFrameActivationMode(View2DAttributes::Auto); 

    return retval;
}


Function: View2DAttributes_Mul
Declaration: View2DAttributes_Mul
Definition:
static PyObject *
View2DAttributes_Mul(PyObject *v, PyObject *w)
{
    PyObject *retval = NewView2DAttributes(0);
    View2DAttributes *c = PyView2DAttributes_FromPyObject(retval);


    View2DAttributes *a;
    double val = 1.;
    bool arg1isObject = PyView2DAttributes_Check(v);
    bool arg2isObject = PyView2DAttributes_Check(w);


    if(arg1isObject && arg2isObject)
    {
        return NULL;
    }
    else
    {
        PyObject *num;


        if(arg1isObject)
        {
            a = ((View2DAttributesObject *)v)->data;
            num = w;
        }
        else
        {
            a = ((View2DAttributesObject *)w)->data;
            num = v;
        }


        if(PyFloat_Check(num))
            val = PyFloat_AS_DOUBLE(num);
        else if(PyInt_Check(num))
            val = double(PyInt_AS_LONG(num));
        else if(PyLong_Check(num))
            val = PyLong_AsDouble(num);
        else
        {
            cerr << "MUL: Expected numeric argument is not a number!" << endl;
        }


        c->GetWindowCoords()[0] = a->GetWindowCoords()[0] * val;
        c->GetWindowCoords()[1] = a->GetWindowCoords()[1] * val; 
        c->GetWindowCoords()[2] = a->GetWindowCoords()[2] * val;
        c->GetWindowCoords()[3] = a->GetWindowCoords()[3] * val;


        c->GetViewportCoords()[0] = a->GetViewportCoords()[0] * val;
        c->GetViewportCoords()[1] = a->GetViewportCoords()[1] * val;
        c->GetViewportCoords()[2] = a->GetViewportCoords()[2] * val;
        c->GetViewportCoords()[3] = a->GetViewportCoords()[3] * val;


        c->SetFullFrameAutoThreshold(a->GetFullFrameAutoThreshold() * val);
        c->SetFullFrameActivationMode(a->GetFullFrameActivationMode());
    }

    return retval;
}


