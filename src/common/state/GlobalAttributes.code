Initialization: userDirForSessionFiles
#ifdef WIN32
    userDirForSessionFiles = true;
#else
    userDirForSessionFiles = false;
#endif

Function: CreateNode
Declaration: virtual bool CreateNode(DataNode *node, bool, bool);
Definition:
// ****************************************************************************
// Method: GlobalAttributes::CreateNode
//
// Purpose:
//   Creates a node called "GlobalAttributes" that has all of the
//   GlobalAttributes in it.
//
// Arguments:
//   parentNode   : The node under which the globalAtts node is created.
//   completeSave : Tells the method to save all fields even if they are not
//                  different.
//   forceAdd     : Tells the method to add a node to the parent node.
//
// Notes:
//   Only a handful of the attributes that this object contains are
//   made persistent. Other values are not good to save out since they
//   would have to update the state in other state objects in order to
//   work properly. Eventually, we might do that.
//
// Programmer: Brad Whitlock
// Creation:   Thu Sep 28 13:02:04 PST 2000
//
// Modifications:
//   Brad Whitlock, Mon Sep 16 14:50:20 PST 2002
//   I added the window layout.
//
//   Brad Whitlock, Mon Nov 4 13:51:39 PST 2002
//   I added makeDefaultConfirmation.
//
//   Eric Brugger, Thu Mar 13 14:05:40 PST 2003
//   I added cloneWindowOnFirstRef.
//
//   Brad Whitlock, Thu Mar 20 10:19:35 PDT 2003
//   I removed maintainView and maintainData.
//
//   Eric Brugger, Fri Apr 18 10:27:53 PDT 2003
//   I added maintainView.
//
//   Brad Whitlock, Tue May 20 10:43:27 PDT 2003
//   I made it made it save only what differs from the defaults.
//
//   Brad Whitlock, Wed Dec 17 12:09:40 PDT 2003
//   I added a completeSave flag.
//
//   Brad Whitlock, Fri Jan 23 16:16:02 PST 2004
//   I changed the numbering due to a change in attribute ordering.
//
//   Eric Brugger, Tue Mar 30 08:39:07 PST 2004
//   I added maintainData.
//
//   Brad Whitlock, Thu Aug 5 16:48:46 PST 2004
//   I added automaticallyAddOperator.
//
//   Mark C. Miller, Thu Mar 22 13:32:05 PDT 2007
//   Added tryHarderCyclesTimes
//
//   Hank Childs, Wed Aug 15 18:42:46 CDT 2007
//   Added treatAllDBsAsTimeVarying.
//
//   Kathleen Bonnell, Mon Oct  8 18:17:24 PDT 2007
//   Added createMeshQuality/TimeDerivativeExpressions.
//
//   Cyrus Harrison, Wed Nov 28 15:22:42 PST 2007
//   Added createVectorMagnitudeExpressions
//
//   Brad Whitlock, Fri Dec 14 15:02:46 PST 2007
//   Made it use IDs.
//
//   Brad Whitlock, Thu Jan 24 11:34:45 PDT 2008
//   Made it save newPlotsInheritSILRestriction.
//
//   Brad Whitlock, Thu Jan 31 10:03:01 PST 2008
//   Made it save userDirForSessionFiles, saveCrashRecovery.
//
//   Gunther H. Weber, Mon Feb  4 15:13:11 PST 2008
//   Made it save applySelection.
//
//   Jeremy Meredith, Wed Feb  3 14:54:47 EST 2010
//   Removed maintainData, moved maintainView to view settings, not global.
//
//   Kathleen Biagas, Thu Jul 25 13:47:07 PDT 2013
//   Add precision.
//
//   David Camp, Thu Aug  8 08:50:06 PDT 2013
//   Added the restore from last session feature.
//
//   Cameron Christensen, Tuesday, June 10, 2014
//   Add backend.
//
// ****************************************************************************

bool
GlobalAttributes::CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd)
{
    if(parentNode == 0)
        return false;

    bool addToParent = false;
    GlobalAttributes defaultObject;

    // Create a node for GlobalAttributes.
    DataNode *node = new DataNode("GlobalAttributes");

    if(completeSave || !FieldsEqual(ID_autoUpdateFlag, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("autoUpdateFlag", autoUpdateFlag));
    }

    if(completeSave || !FieldsEqual(ID_replacePlots, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("replacePlots", replacePlots));
    }

    if(completeSave || !FieldsEqual(ID_applyWindow, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("applyWindow", applyWindow));
    }

    if(completeSave || !FieldsEqual(ID_applyOperator, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("applyOperator", applyOperator));
    }

    if(completeSave || !FieldsEqual(ID_windowLayout, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("windowLayout", windowLayout));
    }

    if(completeSave || !FieldsEqual(ID_makeDefaultConfirm, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("makeDefaultConfirm", makeDefaultConfirm));
    }

    if(completeSave || !FieldsEqual(ID_cloneWindowOnFirstRef, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("cloneWindowOnFirstRef",
                                    cloneWindowOnFirstRef));
    }

    if(completeSave || !FieldsEqual(ID_automaticallyAddOperator, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("automaticallyAddOperator",
            automaticallyAddOperator));
    }

    if(completeSave || !FieldsEqual(ID_tryHarderCyclesTimes, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("tryHarderCyclesTimes",
            tryHarderCyclesTimes));
    }

    if(completeSave || !FieldsEqual(ID_treatAllDBsAsTimeVarying, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("treatAllDBsAsTimeVarying",
                      treatAllDBsAsTimeVarying));
    }

    if(completeSave || !FieldsEqual(ID_createMeshQualityExpressions, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("createMeshQualityExpressions",
                      createMeshQualityExpressions));
    }

    if(completeSave || !FieldsEqual(ID_createTimeDerivativeExpressions, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("createTimeDerivativeExpressions",
                      createTimeDerivativeExpressions));
    }

    if(completeSave || !FieldsEqual(ID_createVectorMagnitudeExpressions, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("createVectorMagnitudeExpressions",
                      createVectorMagnitudeExpressions));
    }

    if(completeSave || !FieldsEqual(ID_newPlotsInheritSILRestriction, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("newPlotsInheritSILRestriction",
                      newPlotsInheritSILRestriction));
    }

    if(completeSave || !FieldsEqual(ID_userDirForSessionFiles, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("userDirForSessionFiles",
                      userDirForSessionFiles));
    }

    if(completeSave || !FieldsEqual(ID_saveCrashRecoveryFile, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("saveCrashRecoveryFile",
                      saveCrashRecoveryFile));
    }

    if(completeSave || !FieldsEqual(ID_applySelection, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("applySelection",
                      applySelection));
    }

    if(completeSave || !FieldsEqual(ID_userRestoreSessionFile, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("userRestoreSessionFile",
                      userRestoreSessionFile));
    }

    if(completeSave || !FieldsEqual(ID_precisionType, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("precisionType",
                      precisionType));
    }

    if(completeSave || !FieldsEqual(ID_backendType, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("backendType",
                      backendType));
    }

    if(completeSave || !FieldsEqual(ID_removeDuplicateNodes, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("removeDuplicateNodes",
                      removeDuplicateNodes));
    }

    // Add the node to the parent node.
    if(addToParent || forceAdd)
        parentNode->AddNode(node);
    else
        delete node;

    return (addToParent || forceAdd);
}

Function: SetFromNode
Declaration: virtual void SetFromNode(DataNode *node);
Definition:
// ****************************************************************************
// Method: GlobalAttributes::SetFromNode
//
// Purpose:
//   Looks for a node called "GlobalAttributes" under the parentNode. If
//   it is found, then it looks for various properties and sets the
//   object's attributes accordingly.
//
// Arguments:
//   parentNode : The node to start looking for "GlobalAttributes".
//
// Notes:
//   Only a handful of the attributes that this object contains are
//   made persistent. Other values are not good to save out since they
//   would have to update the state in other state objects in order to
//   work properly. Eventually, we might do that.
//
// Programmer: Brad Whitlock
// Creation:   Thu Sep 28 13:02:57 PST 2000
//
// Modifications:
//   Brad Whitlock, Mon Sep 16 14:51:35 PST 2002
//   I added the window layout.
//
//   Brad Whitlock, Mon Nov 4 13:52:32 PST 2002
//   I added makeDefaultConfirm.
//
//   Eric Brugger, Thu Mar 13 14:05:40 PST 2003
//   I added cloneWindowOnFirstRef.
//
//   Brad Whitlock, Thu Mar 20 10:19:35 PDT 2003
//   I removed maintainView and maintainData.
//
//   Eric Brugger, Fri Apr 18 10:27:53 PDT 2003
//   I added maintainView.
//
//   Eric Brugger, Tue Mar 30 08:39:07 PST 2004
//   I added maintainData.
//
//   Brad Whitlock, Thu Aug 5 16:51:14 PST 2004
//   I added automaticallyAddOperator.
//
//   Mark C. Miller, Thu Mar 22 13:32:05 PDT 2007
//   Added tryHarderCyclesTimes
//
//   Hank Childs, Wed Aug 15 18:42:46 CDT 2007
//   Added treatAllDBsAsTimeVarying.
//
//   Kathleen Bonnell, Mon Oct  8 18:17:24 PDT 2007
//   Added createMeshQuality/TimeDerivativeExpressions.
//
//   Cyrus Harrison, Wed Nov 28 15:22:42 PST 2007
//   Added createVectorMagnitudeExpressions
//
//   Brad Whitlock, Thu Jan 24 11:35:54 PDT 2008
//   Added newPlotsInheritSILRestriction.
//
//   Brad Whitlock, Thu Jan 31 10:03:01 PST 2008
//   Made it read userDirForSessionFiles, saveCrashRecovery.
//
//   Gunther H. Weber, Mon Feb  4 15:14:51 PST 2008
//   Made it read applySelection.
//
//   Jeremy Meredith, Wed Feb  3 14:54:47 EST 2010
//   Removed maintainData, moved maintainView to view settings, not global.
//
//   Kathleen Biagas, Thu Jul 25 13:47:07 PDT 2013
//   Add precision.
//
//   David Camp, Thu Aug  8 08:50:06 PDT 2013
//   Added the restore from last session feature.
//
//   Cameron Christensen, Tuesday, June 10, 2014
//   Add backend.
//
// ****************************************************************************

void
GlobalAttributes::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("GlobalAttributes");
    if(searchNode == 0)
        return;

    DataNode *node;
    if((node = searchNode->GetNode("autoUpdateFlag")) != 0)
        SetAutoUpdateFlag(node->AsBool());
    if((node = searchNode->GetNode("replacePlots")) != 0)
        SetReplacePlots(node->AsBool());
    if((node = searchNode->GetNode("applyWindow")) != 0)
        SetApplyWindow(node->AsBool());
    if((node = searchNode->GetNode("applyOperator")) != 0)
        SetApplyOperator(node->AsBool());
    if((node = searchNode->GetNode("windowLayout")) != 0)
        SetWindowLayout(node->AsInt());
    if((node = searchNode->GetNode("makeDefaultConfirm")) != 0)
        SetMakeDefaultConfirm(node->AsBool());
    if((node = searchNode->GetNode("cloneWindowOnFirstRef")) != 0)
        SetCloneWindowOnFirstRef(node->AsBool());
    if((node = searchNode->GetNode("automaticallyAddOperator")) != 0)
        SetAutomaticallyAddOperator(node->AsBool());
    if((node = searchNode->GetNode("tryHarderCyclesTimes")) != 0)
        SetTryHarderCyclesTimes(node->AsBool());
    if((node = searchNode->GetNode("treatAllDBsAsTimeVarying")) != 0)
        SetTreatAllDBsAsTimeVarying(node->AsBool());
    if((node = searchNode->GetNode("createMeshQualityExpressions")) != 0)
        SetCreateMeshQualityExpressions(node->AsBool());
    if((node = searchNode->GetNode("createTimeDerivativeExpressions")) != 0)
        SetCreateTimeDerivativeExpressions(node->AsBool());
    if((node = searchNode->GetNode("createVectorMagnitudeExpressions")) != 0)
        SetCreateVectorMagnitudeExpressions(node->AsBool());
    if((node = searchNode->GetNode("newPlotsInheritSILRestriction")) != 0)
        SetNewPlotsInheritSILRestriction(node->AsBool());
    if((node = searchNode->GetNode("userDirForSessionFiles")) != 0)
        SetUserDirForSessionFiles(node->AsBool());
    if((node = searchNode->GetNode("saveCrashRecoveryFile")) != 0)
        SetSaveCrashRecoveryFile(node->AsBool());
    if((node = searchNode->GetNode("applySelection")) != 0)
        SetApplySelection(node->AsBool());
    if((node = searchNode->GetNode("userRestoreSessionFile")) != 0)
        SetUserRestoreSessionFile(node->AsBool());
    if((node = searchNode->GetNode("precisionType")) != 0)
    {
        if (node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if (ival >= 0 && ival < 3)
                SetPrecisionType(PrecisionType(ival));
        }
        else if (node->GetNodeType() == STRING_NODE)
        {
            PrecisionType value;
            if (PrecisionType_FromString(node->AsString(), value))
                SetPrecisionType(value);
        }
    }
    if((node = searchNode->GetNode("backendType")) != 0)
    {
        if (node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if (ival >= 0 && ival < 4)
                SetBackendType(BackendType(ival));
        }
        else if (node->GetNodeType() == STRING_NODE)
        {
            BackendType value;
            if (BackendType_FromString(node->AsString(), value))
                SetBackendType(value);
        }
    }
    if((node = searchNode->GetNode("removeDuplicateNodes")) != 0)
        SetRemoveDuplicateNodes(node->AsBool());
}

