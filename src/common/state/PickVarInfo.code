Function: PrintSelf
Declaration: void PrintSelf(ostream &os);
Definition:
// ****************************************************************************
// Method: PickVarInfo::PrintSelf
//
// Purpose:
//   Prints the contents of this class to the passed stream.
//
// Modifications:
//   Kathleen Bonnell, Thu Jun 26 09:31:56 PDT 2003
//   Logic changed in order to support node picking. Info from material var's
//   now handled differently.
//
//   Kathleen Bonnell, Thu Nov 20 10:18:54 PST 2003
//   Support species variableType.
//
// ****************************************************************************

void
PickVarInfo::PrintSelf(ostream &os)
{
    int j, k, nMats, matOffset, mixOffset;
    os << variableName.c_str() << ":  ";
    switch (centering)
    {
        case Nodal:  os << "nodal "; break;
        case Zonal:  os << "zonal "; break;
        case None : break;
    }
    if (!(names.empty() && mixNames.empty()))
    {
        if (variableType == "material")
        {
            mixOffset = 0;
            for (size_t i = 0; i < numMatsPerZone.size(); i++)
            {
                if (names.size() > 0)
                    os << "    " << names[i].c_str() << "\n";
                nMats = numMatsPerZone[i];
                for (j = 0; j < nMats; j++)
                {
                    if (names.size() > 0)
                        os << "    ";
                    os << "    " << mixNames[j+mixOffset].c_str();
                    if (mixValues[j+mixOffset] < 1.)
                        os << " = " << mixValues[j+mixOffset];
                    os << "\n";
                }
                mixOffset += nMats;
            }
        }
        else if (variableType == "species")
        {
            matOffset = 0;
            mixOffset = 0;
            for (size_t i = 0; i < numMatsPerZone.size(); i++)
            {
                if (names.size() > 0)
                {
                    os << "    " << names[i].c_str();
                    if (values.size() > 0)
                        os << " = " << values[i] << "\n";
                }
                nMats = numMatsPerZone[i];
                for (j = 0; j < nMats; j++)
                {
                    os << "    " << matNames[j+matOffset].c_str() << "\n";
                    int nSpecs = numSpecsPerMat[j+matOffset];
                    for (k = 0; k < nSpecs; k++)
                    {
                        os << "        " << mixNames[k+mixOffset].c_str();
                        os << " =  " << mixValues[k+mixOffset] << "\n";
                    }
                    mixOffset += nSpecs;
                }
                matOffset += nMats;
            }
        }
        else
        {
            mixOffset = 0;
            for (size_t i = 0; i < names.size(); i++)
            {
                os << "    " << names[i].c_str() << " = ";
                if (values.size() > names.size())
                {
                    int stride = values.size() / names.size();
                    os << "(";
                    for (j = 0; j < stride; j++)
                    {
                        os << values[i*stride + j] << ", ";
                    }
                    os << ")\n";
                }
                else if (values.size() == names.size())
                {
                    os << values[i] << "\n";
                }
                if (mixVar)
                {
                    nMats = numMatsPerZone[i];
                    for (j = 0; j < nMats; j++)
                    {
                        os << "        " << mixNames[j+mixOffset].c_str();
                        os << " = " <<  mixValues[j+mixOffset] << "\n";
                    }
                    mixOffset += nMats;
                }
            }
        }
    }
    else if (!miscMessage.empty())
    {
        os << "    " << miscMessage.c_str() << "\n";
    }
    else
    {
        os << "    No Information Found\n";
    }
}

Function: CreateOutputString
Declaration: void CreateOutputString(std::string &, const std::string &);
Definition:

// ****************************************************************************
// Method: PickVarInfo::CreateOutputString
//
// Purpose:
//   Creates a single output string containing all the information gathered
//   from a pick.
//
// Modifications:
//   Kathleen Bonnell, Thu Jun 26 09:31:56 PDT 2003
//   Logic changed in order to support node picking. Info from material vars
//   now handled differently.
//
//   Hank Childs, Mon Sep 22 11:19:22 PDT 2003
//   Extend for tensors.
//
//   Kathleen Bonnell, Thu Nov 20 10:18:54 PST 2003
//   Support species variableType.
//
//   Kathleen Bonnell, Wed Dec 17 15:19:46 PST 2003
//   Added arg 'type' indicating the type of pick that generated this info.
//
//   Kathleen Bonnell, Tue Jun  1 16:42:46 PDT 2004
//   Added DomainNode and DomainZone as pick types.
//
//   Kathleen Bonnell, Thu Jun 10 17:31:37 PDT 2004
//   Reduce whitespace for material vars.
//
//   Kathleen Bonnell, Thu Jul 22 12:06:53 PDT 2004
//   Cast values to char if treatAsASCII is true.
//
//   Brad Whitlock, Mon Apr 4 12:12:19 PDT 2005
//   Added support for printing label variables.
//
//   Kathleen Bonnell, Tue Aug 30 09:35:44 PDT 2005
//   Change how ncomps is computed for tensor vars.
//
//   Hank Childs, Thu May 25 08:35:12 PDT 2006
//   Add support for arrays.
//
//   Mark C. Miller, Mon Jan  8 20:48:30 PST 2007
//   Initialized buff at top to avoid possible creation of code blocks where
//   buff is uninitialized (as for tensor/array variables)
//
//   Cyrus Harrison, Mon Sep 17 08:57:13 PDT 2007
//   Added support for user settable floating point format string
//
//   Kathleen Biagas, Wed Oct 19 20:53:18 MST 2011
//   Modify how Tensors/Arrays are printed for consistency and a cleaner look.
//
// ****************************************************************************
void
PickVarInfo::CreateOutputString(std::string &os, const std::string &type)
{
    int j, k;
    int matOffset = 0, mixOffset = 0;
    int nMats;
    char buff[256];
    buff[0] = '\0';
    os = variableName;
    os +=  ":  ";
    bool centeringsMatch = false;
    std::string format="";
    switch (centering)
    {
        case Nodal:  os += "<nodal> ";
                     if (type == "Node" || type == "DomainNode")
                         centeringsMatch = true;
                     break;
        case Zonal:  os += "<zonal> ";
                     if (type == "Zone" || type == "DomainZone")
                         centeringsMatch = true;
                     break;
        case None :  if (variableType == "material" &&
                         numMatsPerZone.size() == 1 && numMatsPerZone[0] == 1)
                         ;
                     else
                         os += "\n";
                     break;
    }
    if (!(names.empty() && mixNames.empty()))
    {
        if (variableType == "material")
        {
            mixOffset  = 0;
            std::string spacing;
            if (numMatsPerZone.size() == 1 && numMatsPerZone[0] == 1)
            {
                if (names.size() > 0)
                {
                    snprintf(buff, 256, "%s ", names[0].c_str());
                    os += buff;
                }
                snprintf(buff, 256, "%s ", mixNames[mixOffset].c_str());
                os += buff;
                if (mixValues[mixOffset] < 1.)
                {
                    format = "= " + floatFormat;
                    snprintf(buff, 256, format.c_str(), mixValues[mixOffset]);
                    os += buff;
                }
                os += "\n";
            }
            else
            {
                for (size_t i = 0; i < numMatsPerZone.size(); i++)
                {
                    nMats = numMatsPerZone[i];
                    if (names.size() > 0)
                    {
                        snprintf(buff, 256, "    %s", names[i].c_str());
                        os += buff;
                        if (nMats == 1)
                            spacing = "  ";
                        else
                        {
                            os += "\n";
                            spacing = "        ";
                        }
                    }
                    else
                        spacing = "    ";
                    for (j = 0; j < nMats; j++)
                    {
                        snprintf(buff, 256, "%s%s ", spacing.c_str(),
                                 mixNames[j+mixOffset].c_str());
                        os += buff;
                        if (mixValues[j+mixOffset] < 1.)
                        {
                            format = "= " + floatFormat;
                            snprintf(buff, 256, format.c_str(), mixValues[j+mixOffset]);
                            os += buff;
                        }
                        os += "\n";
                    }
                    mixOffset += nMats;
                }
            }
        }
        else if (variableType == "species")
        {
            os += "\n";
            matOffset  = 0;
            mixOffset  = 0;
            std::string spacing1;
            std::string spacing2;
            for (size_t i = 0; i < numMatsPerZone.size(); i++)
            {
                if (names.size() > 0)
                {
                    if (values.size() > 0)
                    {
                        format = "    %s = " + floatFormat + "\n";
                        snprintf(buff, 256, format.c_str(), names[i].c_str(),
                                 values[i]);
                    }
                    else
                    {
                        snprintf(buff, 256, "    %s\n", names[i].c_str());
                    }
                    os += buff;
                    spacing1 = "        ";
                    spacing2 = "            ";
                }
                else
                {
                    spacing1 = "    ";
                    spacing2 = "        ";
                }
                nMats = numMatsPerZone[i];
                for (j = 0; j < nMats; j++)
                {
                    snprintf(buff, 256, "%s%s\n", spacing1.c_str(),
                             matNames[j+matOffset].c_str());
                    os += buff;
                    int nSpecs = numSpecsPerMat[j+matOffset];
                    for (k = 0; k < nSpecs; k++)
                    {
                        snprintf(buff, 256, "%s%s  ", spacing2.c_str(),
                                 mixNames[k+mixOffset].c_str());
                        os += buff;
                        format = "= " + floatFormat + "\n";
                        snprintf(buff, 256, format.c_str(), mixValues[k+mixOffset]);
                        os += buff;
                    }
                    os += "\n";
                    mixOffset += nSpecs;
                }
                matOffset += nMats;
            }
        }
        else
        {
            if (!centeringsMatch)
               os += "\n";
            mixOffset  = 0;
            for (size_t i = 0; i < names.size(); i++)
            {
                if (!centeringsMatch)
                {
                    snprintf(buff, 256, "    %s ", names[i].c_str());
                    os += buff;
                }
                os += "= ";
                if (variableType == "vector")
                {
                    int stride = values.size() / names.size();
                    format = "(" + floatFormat;
                    snprintf(buff, 256, format.c_str(), values[i*stride]);
                    os += buff;
                    for (j = 1; j < stride-1; j++)
                    {
                        format = "," + floatFormat;
                        snprintf(buff, 256, format.c_str(), values[i*stride+j]);
                        os += buff;
                    }
                    format = ") mag = " + floatFormat + "\n";
                    snprintf(buff, 256, format.c_str(), values[i*stride+stride-1]);
                    os += buff;
                }
                else if (variableType == "scalar")
                {
                    if (!treatAsASCII)
                    {
                        format = floatFormat + "\n";
                        snprintf(buff, 256, format.c_str(), values[i]);
                    }
                    else
                    {
                        snprintf(buff, 256, "%c\n", (char) values[i]);
                    }
                    os += buff;
                }
                else if (variableType == "tensor")
                {
                    os += "\n";
                    int buf_len = strlen(buff);
                    if (buf_len == 0)
                        buf_len = 4;
                    int ncomps = (values.size()-names.size()) / names.size();
                    PrintTensor(os, values, i, ncomps, buf_len);
                }
                else if (variableType == "symm_tensor")
                {
                    os += "\n";
                    int buf_len = strlen(buff);
                    if (buf_len == 0)
                        buf_len = 4;
                    int ncomps = (values.size()-names.size()) / names.size();
                    PrintSymmetricTensor(os, values, i, ncomps, buf_len);
                }
                else if (variableType == "array")
                {
                    int ncomps = (values.size()-names.size()) / names.size();
                    int buf_len = strlen(buff);
                    if (buf_len == 0)
                        buf_len = 4;
                    if (ncomps > 5)
                        os += "\n";
                    PrintArray(os, values, i, ncomps, buf_len);
                }
                else if (variableType == "label")
                {
                    int labelSize = values.size() / names.size();
                    for (size_t j = labelSize*i; j < labelSize * (i+1); j++)
                    {
                        char c[2] = {(char)values[j], 0};
                        os += c;
                    }
                    os += "\n";
                }
                else
                {
                    os += "\n";
                }
                if (mixVar)
                {
                    nMats = numMatsPerZone[i];
                    for (j = 0; j < nMats; j++)
                    {
                        snprintf(buff, 256, "        material %s = ",
                                 mixNames[j+mixOffset].c_str());
                        os += buff;
                        format = floatFormat + "\n";
                        snprintf(buff, 256, format.c_str(), mixValues[j+mixOffset]);
                        os += buff;
                    }
                    mixOffset += nMats;
                }
            }
        }
    }
    else if (!miscMessage.empty())
    {
        snprintf(buff, 256, "    %s\n", miscMessage.c_str());
        os += buff;
    }
    else
    {
        snprintf(buff, 256, "    No Information Found\n");
        os += buff;
    }
}

Function: PrintTensor
Declaration: void PrintTensor(std::string &, const std::vector<double> &, int, int, int);
Definition:

// ****************************************************************************
// Method: PickVarInfo::PrintTensor
//
// Purpose:
//     Prints the information out for a tensor.
//
// Programmer: Hank Childs
// Creation:   September 22, 2003
//
// Modifications:
//   Kathleen Bonnell, Tue Aug 30 09:35:44 PDT 2005
//   Print major eigenvalue.  Change how offset is computed.
//
//   Kathleen Bonnell, Tue Aug 30 09:35:44 PDT 2005
//   Print major eigenvalue.  Change how offset is computed.
//
//   Cyrus Harrison, Mon Sep 17 08:57:13 PDT 2007
//   Added support for user settable floating point format string
//
//   Kathleen Biagas, Wed Oct 19 20:54:54 MST 2011
//   Use "format" string, not "floatFormat" when printing Major Eigenvalue.
//
// ****************************************************************************

void
PickVarInfo::PrintTensor(std::string &os, const std::vector<double> &values,
                         int tuple, int ncomps, int buff_len)
{
    int  j;
    std::string format="";

    int offset = tuple*(ncomps+1);
    if (ncomps == 2)  // 2D tensor
    {
        char line[256];
        for (j = 0; j < buff_len; j++)
            os += " ";
        format = "(" + floatFormat + ", "  + floatFormat + ")\n";
        sprintf(line, format.c_str(), values[offset], values[offset+1]);

        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        sprintf(line, format.c_str(), values[offset+2], values[offset+3]);

        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "Major Eigenvalue: " + floatFormat + "\n";
        sprintf(line, format.c_str(), values[offset+4]);
        os += line;
    }
    else if (ncomps == 9) // 3D tensor
    {
        char line[256];
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "(" + floatFormat + ", "
                     + floatFormat + ", "
                     + floatFormat + ")\n";
        sprintf(line, format.c_str(), values[offset], values[offset+1],
                                        values[offset+2]);
        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        sprintf(line, format.c_str(), values[offset+3], values[offset+4],
                                        values[offset+5]);
        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        sprintf(line, format.c_str(), values[offset+6], values[offset+7],
                                        values[offset+8]);
        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "Major Eigenvalue: " + floatFormat + "\n";
        sprintf(line, format.c_str(), values[offset+9]);
        os += line;
    }
}

Function: PrintSymmetricTensor
Declaration: void PrintSymmetricTensor(std::string &, const std::vector<double> &, int, int, int);
Definition:

// ****************************************************************************
// Method: PickVarInfo::PrintSymmetricTensor
//
// Purpose:
//     Prints the information out for a tensor.
//
// Programmer: Hank Childs
// Creation:   September 22, 2003
//
// Modifications:
//   Kathleen Bonnell, Tue Aug 30 09:35:44 PDT 2005
//   Print major eigenvalue.  Change how offset is computed.
//
//   Cyrus Harrison, Mon Sep 17 08:57:13 PDT 2007
//   Added support for user settable floating point format string
//
// ****************************************************************************

void
PickVarInfo::PrintSymmetricTensor(std::string &os,
         const std::vector<double> &values, int tuple, int ncomps, int buff_len)
{
    int  j;
    std::string format="";
    int offset = tuple*ncomps;
    if (ncomps == 2)  // 2D tensor
    {
        char line[256];
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "(" + floatFormat + ", "  + floatFormat + ")\n";
        sprintf(line, format.c_str(), values[offset], values[offset+1]);

        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        sprintf(line, format.c_str(), values[offset+2], values[offset+3]);

        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "Major Eigenvalue: " + floatFormat + "\n";
        sprintf(line, format.c_str(), values[offset+4]);
        os += line;
    }
    else if (ncomps == 9) // 3D tensor
    {
        char line[256];
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "(" + floatFormat + ", "
                     + floatFormat + ", "
                     + floatFormat + ")\n";
        sprintf(line, format.c_str(), values[offset], values[offset+1],
                                        values[offset+2]);
        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        sprintf(line, format.c_str(), values[offset+3], values[offset+4],
                                        values[offset+5]);
        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        sprintf(line, format.c_str(), values[offset+6], values[offset+7],
                                        values[offset+8]);
        os += line;
        for (j = 0; j < buff_len; j++)
            os += " ";

        format = "Major Eigenvalue: " + floatFormat + "\n";
        sprintf(line, format.c_str(), values[offset+9]);
        os += line;
    }
}

Function: HasInfo
Declaration: bool HasInfo(void);
Definition:

// ****************************************************************************
// Method: PickVarInfo::HasInfo
//
// Purpose:
//    Returns true if the info has been filled in, false otherwise.
//
// Programmer: Kathleen Bonnell
// Creation:   March 2, 2004
// ****************************************************************************

bool
PickVarInfo::HasInfo()
{
    return (!(names.empty() && mixNames.empty()));
}


Function: PrintArray
Declaration: void PrintArray(std::string &, const std::vector<double> &, int, int, int);
Definition:
// ****************************************************************************
// Method: PickVarInfo::PrintArray
//
// Purpose:
//     Prints the information out for an array
//
// Programmer: Hank Childs
// Creation:   May 24, 2006
//
// Modifications:
//
//   Hank Childs, Tue Sep  5 17:05:32 PDT 2006
//   Fix indexing bug.
//
//   Cyrus Harrison, Mon Sep 17 08:57:13 PDT 2007
//   Added support for user settable floating point format string
//
//   Kathleen Biagas, Wed Oct 19 20:55:47 MST 2011
//   Reformat for a cleaner output.
//
// ****************************************************************************

void
PickVarInfo::PrintArray(std::string &os,
         const std::vector<double> &values, int tuple, int ncomps, int buff_len)
{
    int j;
    std::string format="";
    int offset = tuple*(ncomps+1);
    char line[256];
    line[0] = '\0';
    if (ncomps > 5)
    {
        for (j = 0; j < buff_len; j++)
            os += " ";
    }
    os += "(";
    format = floatFormat + ", ";
    for (j = 0 ; j < ncomps ; j++)
    {
        if (j == ncomps-1)
            format = floatFormat + ")\n";
        snprintf(line, 256, format.c_str(), values[offset+j]);
        os += line;
    }
}

Function: CreateOutputMapNode
Declaration: void CreateOutputMapNode(const std::string &, MapNode &);
Definition:

// ****************************************************************************
// Method: PickVarInfo::CreateOutputMapNode
//
// Purpose:
//   Creates a MapNode object containing all the information gathered
//   from a pick.
//
// Programmer: Kathleen Biagas
// Creation:   October 24, 2011
//
// Modifications:
//    Alister Maguire, Fri Aug 23 13:53:07 PDT 2019
//    Avoid adding null terminating characters to label strings.
//
//    Kathleen Biagas, Thu Dec 12 12:08:58 PST 2019
//    Fix logic for tensor, which was printing out too much info. Separate the
//    'values' and the 'major_eigenvalue' into separate entries for the var.
//
// ****************************************************************************

void
PickVarInfo::CreateOutputMapNode(const std::string &type, MapNode &m)
{
    bool centeringsMatch = false;
    switch (centering)
    {
        case Nodal:  if (type == "Node" || type == "DomainNode")
                         centeringsMatch = true;
                     break;
        case Zonal:  if (type == "Zone" || type == "DomainZone")
                         centeringsMatch = true;
                     break;
        case None: break;
    }
    if (!(names.empty() && mixNames.empty()))
    {
        if (variableType == "material")
        {
            int mixOffset = 0;
            if (numMatsPerZone.size() == 1 && numMatsPerZone[0] == 1)
            {
                std::string subname;
                if (names.size() > 0)
                    subname = names[0] + " ";
                subname += mixNames[mixOffset];
                if (mixValues[mixOffset] < 1.)
                {
                    MapNode n;
                    n[subname] = mixValues[mixOffset];
                    m[variableName] = n;
                }
                else
                {
                    m[variableName] = subname;
                }
            }
            else
            {
                MapNode n;
                MapNode o;
                for (size_t i = 0; i < numMatsPerZone.size(); ++i)
                {
                    int nMats = numMatsPerZone[i];
                    std::string base;
                    if (names.size() > 0)
                        base = names[i].substr(1, names[i].size()-2);
                    for (int j = 0; j < nMats; ++j)
                    {
                        if (mixValues[j+mixOffset] < 1.)
                        {

                           // n[base + mixNames[j+mixOffset]] = mixValues[j+mixOffset];
                           if (!base.empty())
                               o[mixNames[j+mixOffset]] = mixValues[j+mixOffset];
                           else
                               n[mixNames[j+mixOffset]] = mixValues[j+mixOffset];
                        }
                        else
                        {
                           if (!base.empty())
                               n[base] = mixNames[j+mixOffset];
#if 0
                           else
                               n[mixNames[j+mixOffset]] = std::string("type2b");
#endif
                        }
                    }
                    if (!base.empty() && o.GetNumEntries() > 0)
                        n[base] = o;
                    mixOffset += nMats;
                }
                m[variableName] = n;
            }
        }
        else if (variableType == "species")
        {
            int matOffset = 0;
            int mixOffset = 0;
            MapNode n;
            MapNode o;
            MapNode p;
            for (size_t i = 0; i < numMatsPerZone.size(); ++i)
            {
                std::string base;
                if (names.size() > 1)
                {
                    base = names[i].substr(1, names[i].size() -2);
                }
                int nMats = numMatsPerZone[i];
                for (int j = 0; j < numMatsPerZone[i]; ++j)
                {
                    int nSpecs = numSpecsPerMat[j+matOffset];
                    for (int k = 0; k < nSpecs; k++)
                    {
                        p[mixNames[k+mixOffset]] =  mixValues[k+mixOffset];
                    }
                    o[matNames[j+matOffset]] = p;
                    mixOffset += nSpecs;
                }
                if (!base.empty() && o.GetNumEntries() > 0)
                    n[base] = o;
                matOffset += nMats;
            }
            if (n.GetNumEntries() > 0)
                m[variableName] = n;
            else
                m[variableName] = o;
        }
        else
        {
            MapNode n;
            for (size_t i = 0; i < names.size(); ++i)
            {
                std::string stripName = names[i].substr(1, names[i].size() -2);
                if (variableType == "scalar")
                {
                    if (centeringsMatch)
                    {
                        if (!treatAsASCII)
                            m[variableName] = values[i];
                        else
                            m[variableName] = (char) values[i];
                    }
                    else
                    {
                        if (!treatAsASCII)
                            n[stripName] = values[i];
                        else
                            n[stripName] = (char) values[i];
                    }
                }
                else if (variableType == "vector")
                {
                    doubleVector v;
                    size_t stride = values.size() / names.size();
                    for (size_t j = 0; j < stride -1; j++)
                        v.push_back(values[i*stride+j]);
                    if (centeringsMatch)
                        m[variableName] = v;
                    else
                        n[stripName] = v;
                }
                else if (variableType == "tensor")
                {
                    size_t ncomps = (values.size()-names.size())/names.size();
                    size_t offset = i*(ncomps+1);
                    doubleVector v;
                    for (size_t j = 0; j < ncomps; j++)
                    {
                        v.push_back(values[offset+j]);
                    }
                    if (centeringsMatch)
                    {
                        m[variableName]["values"] = v;
                        m[variableName]["major_eigenvalue"] = values[offset+ncomps];
                    }
                    else
                    {
                        n[stripName]["values"] = v;
                        n[stripName]["major_eigenvalue"] = values[offset+ncomps];
                    }
                }
                else if (variableType == "symm_tensor")
                {
                    if (centeringsMatch)
                        m[variableName] = std::string("some symm_tensor info here");
                    else
                        n[stripName] = std::string("some symm_tensor info here");
                }
                else if (variableType == "array")
                {
                    size_t ncomps = (values.size()-names.size())/names.size();
                    size_t offset = i*(ncomps+1);
                    doubleVector v;
                    for (size_t j = 0; j < ncomps; j++)
                        v.push_back(values[offset+j]);
                    if (centeringsMatch)
                        m[variableName] = v;
                    else
                        n[stripName] = v;
                }
                else if (variableType == "label")
                {
                    size_t labelSize = values.size() / names.size();
                    std::string l;
                    for (size_t j = labelSize*i; j < labelSize *(i+1); ++j)
                    {
                        //
                        // We don't want to add the null terminators; doing
                        // so causes strange behaviors.
                        //
                        if ((char)values[j] == '\0')
                            break;
                        l += (char)values[j];
                    }
                    if (centeringsMatch)
                        m[variableName] = l;
                    else
                        n[stripName] = l;
                }
            }
            if (!centeringsMatch && n.GetNumEntries() != 0)
                m[variableName] = n;

#if 0
            int mixOffset = 0;
            if (mixVar)
            {
                int nMats = numMatsPerZone[i];
                std::string matname;
                for (int j = 0; j < nMats; ++j)
                {
                    matname = "material " + mixNames[j+mixOffset];
                    m[matname] = mixValues[j+mixOffset];
                }
                mixOffset += nMats;
            }
#endif
        }
    }
}

