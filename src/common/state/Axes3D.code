Initialization: xAxis
    xAxis.GetTitle().SetTitle("X-Axis");

Initialization: yAxis
    yAxis.GetTitle().SetTitle("Y-Axis");

Initialization: zAxis
    zAxis.GetTitle().SetTitle("Z-Axis");

Target: xml2atts
Function: SetFromNode
Declaration: void SetFromNode(DataNode *node);
Definition:
// ****************************************************************************
// Method: Axes3D::SetFromNode
//
// Purpose:
//   This method sets attributes in this object from values in a DataNode representation of the object.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

void
Axes3D::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("Axes3D");
    if(searchNode == 0)
        return;

    DataNode *node;
    if((node = searchNode->GetNode("visible")) != 0)
        SetVisible(node->AsBool());
    if((node = searchNode->GetNode("autoSetTicks")) != 0)
        SetAutoSetTicks(node->AsBool());
    if((node = searchNode->GetNode("autoSetScaling")) != 0)
        SetAutoSetScaling(node->AsBool());
    if((node = searchNode->GetNode("lineWidth")) != 0)
        SetLineWidth(node->AsInt());
    if((node = searchNode->GetNode("tickLocation")) != 0)
    {
        // Allow enums to be int or string in the config file
        if(node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if(ival >= 0 && ival < 3)
                SetTickLocation(Location(ival));
        }
        else if(node->GetNodeType() == STRING_NODE)
        {
            Location value;
            if(Location_FromString(node->AsString(), value))
                SetTickLocation(value);
        }
    }
    if((node = searchNode->GetNode("axesType")) != 0)
    {
        // Allow enums to be int or string in the config file
        if(node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if(ival >= 0 && ival < 5)
                SetAxesType(Axes(ival));
        }
        else if(node->GetNodeType() == STRING_NODE)
        {
            Axes value;
            if(Axes_FromString(node->AsString(), value))
                SetAxesType(value);
        }
    }
    if((node = searchNode->GetNode("triadFlag")) != 0)
        SetTriadFlag(node->AsBool());
    if((node = searchNode->GetNode("bboxFlag")) != 0)
        SetBboxFlag(node->AsBool());
    if((node = searchNode->GetNode("xAxis")) != 0)
        xAxis.SetFromNode(node);
    if((node = searchNode->GetNode("yAxis")) != 0)
        yAxis.SetFromNode(node);
    if((node = searchNode->GetNode("zAxis")) != 0)
        zAxis.SetFromNode(node);
    if((node = searchNode->GetNode("setBBoxLocation")) != 0)
        SetSetBBoxLocation(node->AsBool());
    if((node = searchNode->GetNode("bboxLocation")) != 0)
        SetBboxLocation(node->AsDoubleArray());
    if((node = searchNode->GetNode("triadColor")) != 0)
        SetTriadColor(node->AsIntArray());
    if((node = searchNode->GetNode("triadLineWidth")) != 0)
    {
        const float width = node->AsFloat();
        SetTriadLineWidth(0 == static_cast<int>(width) ? 1.0 : width);
    }
    if((node = searchNode->GetNode("triadFont")) != 0)
        SetTriadFont(node->AsInt());
    if((node = searchNode->GetNode("triadBold")) != 0)
        SetTriadBold(node->AsBool());
    if((node = searchNode->GetNode("triadItalic")) != 0)
        SetTriadItalic(node->AsBool());
    if((node = searchNode->GetNode("triadSetManually")) != 0)
        SetTriadSetManually(node->AsBool());
}

