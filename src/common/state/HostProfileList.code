Function: GetActiveLaunchProfileForHost
Declaration: LaunchProfile *GetActiveLaunchProfileForHost(const std::string &hostName) const;
Definition:
// ****************************************************************************
//  Method: HostProfileList::GetActiveLaunchProfileForHost
//
//  Purpose:
//    Returns the active launch profile for the machine with a host name
//    pattern matching the specified host name.
//
//  Arguments:
//    hostName    the host name to match with the profile hostname patterns
//
//  Returns:
//    A pointer to the host profile, or NULL.
//
//  Programmer: Jeremy Meredith
//  Creation:   February 18, 2010
//
//  Modifications:
//
// ****************************************************************************
LaunchProfile *
HostProfileList::GetActiveLaunchProfileForHost(const std::string &hostName) const
{
    MachineProfile *machine = GetMachineProfileForHost(hostName);
    return machine ? machine->GetActiveLaunchProfile() : NULL;
}

Function: GetMachineProfileForHost
Declaration: MachineProfile *GetMachineProfileForHost(const std::string &hostName) const;
Definition:
// ****************************************************************************
//  Method: HostProfileList::GetMachineProfileForHost
//
//  Purpose:
//    Gets the machine profile with a host name pattern
//    matching the specified host name.
//
//  Arguments:
//    hostName    the host name to match with the profile hostname patterns
//
//  Returns:
//    A pointer to the machine profile, or NULL.
//
//  Programmer: Jeremy Meredith
//  Creation:   February 18, 2010
//
//  Modifications:
//    Brad Whitlock, Tue May 20 11:53:37 PDT 2003
//    I moved these include files to here so we can successfully regenerate
//    the class.
//
//    Jeremy Meredith, Fri Feb 26 09:28:01 EST 2010
//    Try matching against the original hostname if matching against the
//    resolved host name fails.
//
//    David Camp, Fri Feb 26 13:53:28 PST 2010
//    Try matching against all of the host's aliases.
// ****************************************************************************
#if defined(_WIN32)
#include <winsock2.h>
#else
#include <netdb.h>
#endif

MachineProfile *
HostProfileList::GetMachineProfileForHost(const std::string &hostName) const
{
    // Check for the hostname
    for(size_t i = 0; i < machines.size(); i++)
    {
        MachineProfile *m = (MachineProfile *)(machines[i]);

        if (m->ProfileMatchesHost(hostName))
            return m;
    }

    struct hostent *hostEnt = gethostbyname(hostName.c_str());
    if (hostEnt)
    {
        // Check for the official host name
        std::string fqhostName(hostEnt->h_name);
        for(size_t i = 0; i < machines.size(); i++)
        {
            MachineProfile *m = (MachineProfile *)(machines[i]);

            if (m->ProfileMatchesHost(fqhostName))
                return m;
        }

        // Check all of the aliases
        for(int j=0; hostEnt->h_aliases[j] != NULL; j++)
        {
            fqhostName = std::string(hostEnt->h_aliases[j]);
            for(size_t i = 0; i < machines.size(); i++)
            {
                MachineProfile *m = (MachineProfile *)(machines[i]);

                if (m->ProfileMatchesHost(fqhostName))
                    return m;
            }
        }
    }

    return NULL;
}

