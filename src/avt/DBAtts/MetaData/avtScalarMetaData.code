Initialization: enumAlwaysExclude
    enumAlwaysExclude[0] = +DBL_MAX;
    enumAlwaysExclude[1] = -DBL_MAX;

Initialization: enumAlwaysInclude
    enumAlwaysInclude[0] = +DBL_MAX;
    enumAlwaysInclude[1] = -DBL_MAX;

Function: avtScalarMetaData2
Declaration: avtScalarMetaData(std::string, std::string, avtCentering);
Definition:
// ****************************************************************************
//  Method: avtScalarMetaData constructor
//
//  Arguments:
//      n           The name of the scalar variable.
//      mn          The name of the mesh the scalar var is defined on.
//      c           The centering of the variable.
//
//  Programmer: Hank Childs
//  Creation:   August 25, 2000
//
//  Modifications:
//    Hank Childs, Mon Dec  9 17:04:39 PST 2002
//    Initialized validVariable.
//
//    Brad Whitlock, Tue Jul 20 13:44:42 PST 2004
//    Added units.
//
//    Kathleen Bonnell, Thu Jul 22 12:10:19 PDT 2004
//    Initialized treatAsASCII.
//
//    Hank Childs, Mon Feb 14 14:16:49 PST 2005
//    Added original name.
//
//    Jeremy Meredith, Fri Aug 25 17:16:38 EDT 2006
//    Added enumerated scalars.
//
//    Mark C. Miller, Wed Mar 26 10:11:46 PDT 2008
//    Added initialization for other enumerated scalar options
//    and hideFromGUI.
//
// ****************************************************************************

avtScalarMetaData::avtScalarMetaData(std::string n, std::string mn,
                                     avtCentering c)
    : avtVarMetaData(avtScalarMetaData::TmfsStruct, n, mn, c)
{
    avtScalarMetaData::Init();
}

Function: avtScalarMetaData3
Declaration: avtScalarMetaData(std::string, std::string, avtCentering, double, double);
Definition:
// ****************************************************************************
//  Method: avtScalarMetaData constructor
//
//  Arguments:
//      n           The name of the scalar variable.
//      mn          The name of the mesh the scalar var is defined on.
//      c           The centering of the variable.
//      min         The minimum value of the scalar variable.
//      max         The maximum value of the scalar variable.
//
//  Programmer: Hank Childs
//  Creation:   August 25, 2000
//
//  Modifications:
//    Hank Childs, Mon Dec  9 17:04:39 PST 2002
//    Initialized validVariable.
//
//    Brad Whitlock, Tue Jul 20 13:45:12 PST 2004
//    Added units.
//
//    Kathleen Bonnell, Thu Jul 22 12:10:19 PDT 2004
//    Initialized treatAsASCII.
//
//    Hank Childs, Mon Feb 14 14:16:49 PST 2005
//    Added original name.
//
//    Jeremy Meredith, Fri Aug 25 17:16:38 EDT 2006
//    Added enumerated scalars.
//
//    Mark C. Miller, Wed Mar 26 10:11:46 PDT 2008
//    Added initialization for other enumerated scalar options
//    and hideFromGUI.
//
// ****************************************************************************

avtScalarMetaData::avtScalarMetaData(std::string n, std::string mn,
                                     avtCentering c, double min, double max)
    : avtVarMetaData(avtScalarMetaData::TmfsStruct, n, mn, c, min, max)
{
    avtScalarMetaData::Init();
}

Function: Print
Declaration: void Print(ostream &, int = 0) const;
Definition:
// ****************************************************************************
//  Method: avtScalarMetaData::Print
//
//  Purpose:
//      Print statement for debugging.
//
//  Arguments:
//      out      The stream to output to.
//      indent   The number of tabs to indent each line with.
//
//  Programmer:  Hank Childs
//  Creation:    August 28, 2000
//
//  Modifications:
//    Hank Childs, Mon Dec  9 17:04:39 PST 2002
//    Print out validVariable.
//
//    Kathleen Bonnell, Thu Jul 22 12:10:19 PDT 2004
//    Print out treatAsASCII.
//
//    Brad Whitlock, Tue Jul 20 13:47:04 PST 2004
//    Added units.
//
//    Hank Childs, Mon Feb 14 14:16:49 PST 2005
//    Added original name.
//
//    Jeremy Meredith, Fri Aug 25 17:16:38 EDT 2006
//    Added enumerated scalars.
//
//    Brad Whitlock, Wed Jan  4 14:58:08 PST 2012
//    Added missing data values.
//
// ****************************************************************************
inline void
Indent(ostream &out, int indent)
{
    for (int i = 0 ; i < indent ; i++)
    {
        out << "\t";
    }
}

void
avtScalarMetaData::Print(ostream &out, int indent) const
{
    avtVarMetaData::Print(out, indent);

    if (treatAsASCII)
    {
        Indent(out, indent);
        out << "This variable should be treated as ASCII." << endl;
    }

    if (enumerationType != None)
    {
        Indent(out, indent);
        out << "This variable contains enumerated values." << endl;
    }
    else
    {
        Indent(out, indent);
        out << "This variable does not contain enumerated values." << endl;
    }

    switch(missingDataType)
    {
    case MissingData_Value:
        Indent(out, indent);
        out << "Missing value: " << missingData[0] << endl;
        break;
    case MissingData_Valid_Min:
        Indent(out, indent);
        out << "Missing value less than: " << missingData[0] << endl;
        break;
    case MissingData_Valid_Max:
        Indent(out, indent);
        out << "Missing value greater than: " << missingData[0] << endl;
        break;
    case MissingData_Valid_Range:
        Indent(out, indent);
        out << "Missing value outside range: ["
            << missingData[0] << ", " << missingData[1] << "]" << endl;
        break;
    default:
        break;
    }
}

Function: AddEnumGraphEdge
Declaration: void AddEnumGraphEdge(int head, int tail, std::string edgeName = std::string(""));
Definition:
void
avtScalarMetaData::AddEnumGraphEdge(int head, int tail, std::string edgeName)
{
    enumGraphEdges.push_back(head);
    enumGraphEdges.push_back(tail);

    // No edge name so default index is -1.
    if( edgeName.empty() )
        enumGraphEdgeNameIndexs.push_back(-1);
    else
    {
        // New edge name so store the name use a map for fast lookup
        // but the actual storage is the vectorString.
        if( enumGraphEdgeNameMap.find( edgeName ) == enumGraphEdgeNameMap.end() )
        {
            int index = enumGraphEdgeNameMap.size();
            enumGraphEdgeNameMap[edgeName] = index;

            enumGraphEdgeNames.push_back (edgeName );
        }

        enumGraphEdgeNameIndexs.push_back(enumGraphEdgeNameMap[edgeName]);
    }
}

Function: AddEnumNameValue
Declaration: int AddEnumNameValue(std::string name, double val);
Definition:
// ****************************************************************************
//  Method: AddEnumNameValue
//
//  Purpose: Add name/value pair to an enumeration
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

int
avtScalarMetaData::AddEnumNameValue(std::string name, double val)
{
    enumNames.push_back(name);
    enumRanges.push_back(val);
    enumRanges.push_back(val);

    return (int)enumNames.size() - 1;
}

Function: AddEnumNameRange
Declaration: int AddEnumNameRange(std::string name, double min, double max);
Definition:
// ****************************************************************************
//  Method: AddEnumNameRange
//
//  Purpose: Add name/range pair to an enumeration
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

int
avtScalarMetaData::AddEnumNameRange(std::string name, double min, double max)
{
    if (min > max)
    {
        EXCEPTION1(ImproperUseException, name);
    }

    enumNames.push_back(name);
    enumRanges.push_back(min);
    enumRanges.push_back(max);

    return (int)enumNames.size() - 1;
}

Function: SetEnumAlwaysExcludeValue
Declaration: void SetEnumAlwaysExcludeValue(double val);
Definition:
// ****************************************************************************
//  Method: SetEnumAlwaysExcludeValue
//
//  Purpose: sets value to be used for always excluded in the selection
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

void
avtScalarMetaData::SetEnumAlwaysExcludeValue(double val)
{
    enumAlwaysExclude[0] = val;
    enumAlwaysExclude[1] = val;
}

Function: SetEnumAlwaysExcludeRange
Declaration: void SetEnumAlwaysExcludeRange(double min, double max);
Definition:
// ****************************************************************************
//  Method: SetEnumAlwaysExcludeRange
//
//  Purpose: sets range to be used for always excluded in the selection
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

void
avtScalarMetaData::SetEnumAlwaysExcludeRange(double min, double max)
{
    enumAlwaysExclude[0] = min;
    enumAlwaysExclude[1] = max;
}

Function: SetEnumAlwaysIncludeValue
Declaration: void SetEnumAlwaysIncludeValue(double val);
Definition:
// ****************************************************************************
//  Method: SetEnumAlwaysIncludeValue
//
//  Purpose: sets value to be used for always included in the selection
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

void
avtScalarMetaData::SetEnumAlwaysIncludeValue(double val)
{
    enumAlwaysInclude[0] = val;
    enumAlwaysInclude[1] = val;
}

Function: SetEnumAlwaysIncludeRange
Declaration: void SetEnumAlwaysIncludeRange(double min, double max);
Definition:
// ****************************************************************************
//  Method: SetEnumAlwaysIncludeRange
//
//  Purpose: sets range to be used for always included in the selection
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

void
avtScalarMetaData::SetEnumAlwaysIncludeRange(double min, double max)
{
    enumAlwaysInclude[0] = min;
    enumAlwaysInclude[1] = max;
}

Function: BuildEnumNChooseRMap
Declaration: static void BuildEnumNChooseRMap(int n, int maxr, std::vector<std::vector<int> > &ptMap);
Definition:
// ****************************************************************************
//  Method: BuildEnumNChooseRMap
//
//  Purpose: convenience method for caller to build a pascal's triangle map
//  for given N/MaxR
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************
void
avtScalarMetaData::BuildEnumNChooseRMap(int n, int maxr, std::vector<std::vector<int> > &ptMap)
{
    for (size_t row = 0; row < ptMap.size(); row++)
        ptMap[row].clear();
    ptMap.clear();

    for (int row = 0; row < n; row++)
    {
        std::vector<int> tmpRow;
        for (int col = 0; col <= maxr; col++)
            tmpRow.push_back(0);
        ptMap.push_back(tmpRow);
    }

    for (int row = 0; row < n; row++)
        for (int col = 0; col <= maxr; col++)
            ptMap[row][col] = int(NChooseR(n-row-1,col));
}

Function: NChooseR
Declaration: static double NChooseR(int n, int r);
Definition:
// ****************************************************************************
//  Function: Bi-nomial coefficient (n-choose-r)
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
//
//  Modifications:
//    Jeremy Meredith, Thu Aug  7 14:24:38 EDT 2008
//    Made it member function so that we got the static namespace benefits
//    without the warnings that static functions in headers tend to generate.
//
// ****************************************************************************
double avtScalarMetaData::NChooseR(int n, int r)
{
    if (n == 0)
    {
        if (r == 0)
            return 1;
        else
            return 0;
    }
    double result = 1;
    int k = 1;
    for (int i = r+1; i <=n; i++)
    {
        result *= (double) i;
        if (k <= n-r)
        {
            result /= (double) k;
            k++;
        }
    }
    return result;
}

Function: ComboValFromDigits
Declaration: static void ComboValFromDigits(const std::vector<std::vector<int> > &ptMap, const std::list<int> &digits, double *id);
Definition:
// ****************************************************************************
//  Function: ComboValFromDigits
//
//  Purpose: Internal function to compute NChooseR value from list of
//  ids (digits representing enum set membership)
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
//
//  Modifications:
//    Jeremy Meredith, Thu Aug  7 14:24:38 EDT 2008
//    Made it member function so that we got the static namespace benefits
//    without the warnings that static functions in headers tend to generate.
//
// ****************************************************************************

void
avtScalarMetaData::ComboValFromDigits(const std::vector<std::vector<int> > &ptMap,
    const std::list<int> &digits, double *id)
{
    int row, col;
    *id = 0.0;
    std::list<int>::const_reverse_iterator it;
    for (col = (int)digits.size()-1, it = digits.rbegin(); col >= 0; col--, it++)
    {
        for (row = 0; row <= *it; row++)
            *id += ptMap[row][col];
    }
    *id -= 1;
}

Function: ComboDigitsFromVal
Declaration: static void ComboDigitsFromVal(double id, int n, int maxr, const std::vector<std::vector<int> > &ptMap, std::list<int> &digits);
Definition:
// ****************************************************************************
//  Function: ComboDigitsFromVal
//
//  Purpose: Internal function to compute list of ids (digits representing enum
//  set membership) to single numerical value.
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
//
//  Modifications:
//    Jeremy Meredith, Thu Aug  7 14:24:38 EDT 2008
//    Made it member function so that we got the static namespace benefits
//    without the warnings that static functions in headers tend to generate.
//
// ****************************************************************************

void
avtScalarMetaData::ComboDigitsFromVal(double id, int n, int maxr,
    const std::vector<std::vector<int> > &ptMap, std::list<int> &digits)
{
    int row, col, grp;

    for (grp = 1; grp <= maxr; grp++)
    {
        double grpc = NChooseR(n,grp);
        if (id < grpc)
            break;
        else
            id -= grpc;
    }
    if (grp == maxr+1)
        return;

    int rowmin = 0;
    for (col = grp-1; col >= 0; col--)
    {
        for (row = rowmin; row < n; row++)
        {
            int seglen = ptMap[row][col];
            if (id < seglen)
            {
                rowmin = row+1;
                digits.push_front(row);
                break;
            }
            id -= seglen;
        }
    }
}

Function: UpdateValByInsertingDigit
Declaration: static void UpdateValByInsertingDigit(double *id, int n, int maxr, const std::vector<std::vector<int> > &ptMap, int newDigit);
Definition:
// ****************************************************************************
//  Method: UpdateValByInsertingDigit
//
//  Purpose: convenience method for callers to, given a current numerical value
//  reprsenting a list of set ids, compute a new numerical value by adding the
//  new set id.
//
//  Programmer: Mark C. Miller, Thu Mar 27 14:16:45 PDT 2008
// ****************************************************************************

void avtScalarMetaData::UpdateValByInsertingDigit(double *id, int n, int maxr,
const std::vector<std::vector<int> > &ptMap, int newDigit)
{
    std::list<int> currentDigits;
    ComboDigitsFromVal(*id, n, maxr, ptMap, currentDigits);

    std::list<int>::iterator it = currentDigits.begin();
    while (it != currentDigits.end() && *it < newDigit)
        it++;

    if (it == currentDigits.end())
    {
        currentDigits.push_front(newDigit);
        ComboValFromDigits(ptMap, currentDigits, id);
    }
    else
    {
        // only update if we actually adding a new digit
        if (newDigit < *it)
        {
            it++;
            currentDigits.insert(it, newDigit);
            ComboValFromDigits(ptMap, currentDigits, id);
        }
    }
}

