Function: Initialize
Declaration: void Initialize(const double, const std::string &);
Definition:
// ****************************************************************************
//  Method: MinMaxInfo::Initialize
//
//  Purpose:
//    Initialize the members.
//
//  Programmer:   Kathleen Bonnell
//  Creation:     July 1, 2004
//
//  Modifications:
//
// ****************************************************************************

void
MinMaxInfo::Initialize(const double val, const std::string &t)
{
    elementNum = -1;
    domain = -1;
    mvalue = val;
    coord[0] = 0.;
    coord[1] = 0.;
    coord[2] = 0.;
    type = t;
    matName = "NO_MAT";
}

Function: TransformCoord
Declaration: void TransformCoord(const avtMatrix *trans);
Definition:
// ****************************************************************************
//  Method: MinMaxInfo::TransformCoord
//
//  Purpose:
//    Transform the coord using the given matrix.
//
//  Programmer:   Kathleen Bonnell
//  Creation:     July 1, 2004
//
//  Modifications:
//
// ****************************************************************************

void
MinMaxInfo::TransformCoord(const avtMatrix *trans)
{
    if (trans != NULL)
    {
        avtVector v1(coord[0], coord[1], coord[2]);
        v1 = (*trans) * v1;
        coord[0] = v1.x;
        coord[1] = v1.y;
        coord[2] = v1.z;
    }
}

Function: EquivalentForOutput
Declaration: bool  EquivalentForOutput (const MinMaxInfo &obj) const;
Definition:
// ****************************************************************************
//  Method: MinMaxInfo::EquivalentForOutput
//
//  Purpose:
//    Determine equivalency for output purposes (matname not considered).
//
//  Programmer:   Kathleen Bonnell
//  Creation:     July 28, 2004
//
//  Modifications:
//
// ****************************************************************************

bool
MinMaxInfo::EquivalentForOutput(const MinMaxInfo &obj) const
{
    int i;

    // Compare the coord arrays.
    bool coord_equal = true;
    for(i = 0; i < 3 && coord_equal; ++i)
        coord_equal = (coord[i] == obj.coord[i]);

    // Create the return value
    return ((elementNum == obj.elementNum) &&
            (domain == obj.domain) &&
            (mvalue == obj.mvalue) &&
            coord_equal &&
            (type == obj.type));
}

