Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
// ****************************************************************************
// Method: TransformAttributes::CopyAttributes
//
// Purpose:
//   CopyAttributes method for the TransformAttributes class.
//
// Programmer: Brad Whitlock
// Creation:   Tue Oct 29 08:57:18 PDT 2002
//
// Modifications:
//
// ****************************************************************************

bool
TransformAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const TransformAttributes *tmp = (const TransformAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if(atts->TypeName() == "BoxExtents")
    {
        const BoxExtents *tmp = (const BoxExtents *)atts;
        const double *extents = tmp->GetExtents();
        if(doTranslate)
        {
            SetTranslateX(extents[0]);
            SetTranslateY(extents[2]);
            SetTranslateZ(extents[4]);
            retval = true;
        }
    }

    return retval;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
// Method: TransformAttributes::CreateCompatible
//
// Purpose:
//   Creates an object of the specified type initialized with the attributes
//   from this object.
//
// Arguments:
//   tname : The typename of the object that we want to create.
//
// Returns:    A new object of the type specified by tname or 0.
//
// Note:
//
// Programmer: Brad Whitlock
// Creation:   Tue Oct 29 08:57:46 PDT 2002
//
// Modifications:
//
// ****************************************************************************

AttributeSubject *
TransformAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new TransformAttributes(*this);
    }
    else if(tname == "BoxExtents")
    {
        BoxExtents *b = new BoxExtents;
        double extents[6];
        extents[0] = translateX;
        extents[1] = translateX + 1.;
        extents[2] = translateY;
        extents[3] = translateY + 1.;
        extents[4] = translateZ;
        extents[5] = translateZ + 1.;
        b->SetExtents(extents);

        retval = b;
    }

    return retval;
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: TransformAttributes::ProcessOldVersions
//
// Purpose:
//   This method handles some old fields by converting them to new fields.
//
// Programmer: Burlen Loring
// Creation:   Fri Jul 18 15:20:59 PDT 2014
//
// Modifications:
//
// ****************************************************************************
void
TransformAttributes::ProcessOldVersions(DataNode *parentNode,
    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("TransformAttributes");
    if(searchNode == 0)
        return;

    // deal with the changes in r19090 where type for a number of attributes
    // was changed from float/floatArray to double/doubleArray.
    if(VersionLessThan(configVersion, "2.6.0"))
    {
        const char *floatArrayAtts[] = {
            "rotateOrigin",
            "rotateAxis",
            "scaleOrigin",
            };
        for (size_t i=0; i<3; ++i)
        {
            DataNode *floatArrayAtt = searchNode->GetNode(floatArrayAtts[i]);
            if (floatArrayAtt)
            {
                const float *f = floatArrayAtt->AsFloatArray();
                double d[3] = {f[0], f[1], f[2]};
                searchNode->RemoveNode(floatArrayAtts[i], true);
                searchNode->AddNode(new DataNode(floatArrayAtts[i], d, 3));
            }
        }
        const char *floatAtts[] = {
            "rotateAmount",
            "scaleX",
            "scaleY",
            "scaleZ",
            "translateX",
            "translateY",
            "translateZ"
            };
        for (size_t i=0; i<7; ++i)
        {
            DataNode *floatAtt = searchNode->GetNode(floatAtts[i]);
            if (floatAtt)
            {
                float f = floatAtt->AsFloat();
                searchNode->RemoveNode(floatAtts[i], true);
                searchNode->AddNode(new DataNode(floatAtts[i], double(f)));
            }
        }
    }
}

