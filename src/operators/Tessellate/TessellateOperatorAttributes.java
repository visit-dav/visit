// Copyright (c) Lawrence Livermore National Security, LLC and other VisIt
// Project developers.  See the top-level LICENSE file for dates and other
// details.  No copyright assignment is required to contribute to VisIt.

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: TessellateOperatorAttributes
//
// Purpose:
//    Attributes for the Tessellate Operator
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class TessellateOperatorAttributes extends AttributeSubject implements Plugin
{
    private static int TessellateOperatorAttributes_numAdditionalAtts = 2;

    public TessellateOperatorAttributes()
    {
        super(TessellateOperatorAttributes_numAdditionalAtts);

        chordError = 0.035;
        mergePoints = true;
    }

    public TessellateOperatorAttributes(int nMoreFields)
    {
        super(TessellateOperatorAttributes_numAdditionalAtts + nMoreFields);

        chordError = 0.035;
        mergePoints = true;
    }

    public TessellateOperatorAttributes(TessellateOperatorAttributes obj)
    {
        super(obj);

        chordError = obj.chordError;
        mergePoints = obj.mergePoints;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return TessellateOperatorAttributes_numAdditionalAtts;
    }

    public boolean equals(TessellateOperatorAttributes obj)
    {
        // Create the return value
        return ((chordError == obj.chordError) &&
                (mergePoints == obj.mergePoints));
    }

    public String GetName() { return "Tessellate"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetChordError(double chordError_)
    {
        chordError = chordError_;
        Select(0);
    }

    public void SetMergePoints(boolean mergePoints_)
    {
        mergePoints = mergePoints_;
        Select(1);
    }

    // Property getting methods
    public double  GetChordError() { return chordError; }
    public boolean GetMergePoints() { return mergePoints; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteDouble(chordError);
        if(WriteSelect(1, buf))
            buf.WriteBool(mergePoints);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetChordError(buf.ReadDouble());
            break;
        case 1:
            SetMergePoints(buf.ReadBool());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + doubleToString("chordError", chordError, indent) + "\n";
        str = str + boolToString("mergePoints", mergePoints, indent) + "\n";
        return str;
    }


    // Attributes
    private double  chordError;
    private boolean mergePoints;
}

