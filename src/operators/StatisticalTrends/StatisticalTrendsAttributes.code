Target: xml2info
Function: StatisticalTrendsCommonPluginInfo::GetCreatedExpressions
Declaration: virtual ExpressionList *GetCreatedExpressions(const avtDatabaseMetaData *);
Definition:

// ****************************************************************************
//  Method: StatisticalTrendsCommonPluginInfo::GetCreatedExpressions
//
//  Purpose:
//      Gets the expressions created by this operator.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
// ****************************************************************************

ExpressionList *
StatisticalTrendsCommonPluginInfo::GetCreatedExpressions(const avtDatabaseMetaData *md) const
{
    int t, i;
    char name[1024], defn[1024];
    ExpressionList *el = new ExpressionList;
    int numScalars = md->GetNumScalars();

    const char numTypes = 6;
    const char *typeString[6] = { "Sum", "Mean", "Variance",
                                  "Std. Dev.", "Slope", "Residuals" };

    for (t = 0 ; t < numTypes ; t++)
    {
        for (i = 0 ; i < numScalars ; i++)
        {
            const avtScalarMetaData *mmd = md->GetScalar(i);
            if (mmd->hideFromGUI || !mmd->validVariable)
                continue;

            {
                Expression e2;
                sprintf(name, "operators/StatisticalTrends/%s/%s",
                typeString[t], mmd->name.c_str());
                e2.SetName(name);
                e2.SetType(Expression::ScalarMeshVar);
                e2.SetFromOperator(true);
                e2.SetOperatorName("StatisticalTrends");
                sprintf(defn, "cell_constant(<%s>, 0.)", mmd->name.c_str());
                e2.SetDefinition(defn);
                el->AddExpressions(e2);
            }
        }
    }

    const ExpressionList &oldEL = md->GetExprList();

    for (t = 0 ; t < numTypes ; t++)
    {
        for (i = 0 ; i < oldEL.GetNumExpressions() ; i++)
        {
            const Expression &e = oldEL.GetExpressions(i);
            if (e.GetType() == Expression::ScalarMeshVar)
            {
                if (e.GetFromOperator() || e.GetAutoExpression())
                    continue; // weird ordering behavior otherwise
                Expression e2;
                sprintf(name, "operators/StatisticalTrends/%s/%s",
                        typeString[t], e.GetName().c_str());
                e2.SetName(name);
                e2.SetType(Expression::ScalarMeshVar);
                e2.SetFromOperator(true);
                e2.SetOperatorName("StatisticalTrends");
                sprintf(defn, "cell_constant(<%s>, 0.)", e.GetName().c_str());
                e2.SetDefinition(defn);
                el->AddExpressions(e2);
            }
        }
    }

    return el;
}

Function: StatisticalTrendsViewerEnginePluginInfo::UpdateOperatorAtts
Declaration: virtual void InitializeOperatorAtts(AttributeSubject *atts, const avtPlotMetaData &plot, const bool fromDefault);
Definition:
// ****************************************************************************
//  Method: StatisticalTrendsViewerEnginePluginInfo::UpdateOperatorAtts
//
//  Purpose:
//    Update the operator attributes when using operator expressions.
//
//  Arguments:
//    atts        The attribute subject to update.
//    plot        The viewer plot that owns the operator.
//
//  Programmer: Allen Sanderson
//  Creation:   9 April 2013
//
// ****************************************************************************

#include <avtPlotMetaData.h>
#include <cstring>
void
StatisticalTrendsViewerEnginePluginInfo::UpdateOperatorAtts(AttributeSubject *atts,
                                                      const avtPlotMetaData &plot)
{
    StatisticalTrendsAttributes *atts_in = (StatisticalTrendsAttributes *)atts;

    const char numTypes = 6;
    const char *typeString[6] = { "Sum", "Mean", "Variance",
                                  "Std. Dev.", "Slope", "Residuals" };

    std::string var = plot.GetVariableName();

    if( strncmp(var.c_str(), "operators/StatisticalTrends/",
                strlen("operators/StatisticalTrends/")) == 0)
    {
      std::string operatorWithVar =
          var.substr(strlen("operators/StatisticalTrends/"));

      for (int t = 0; t < numTypes; ++t)
      {
        if( strncmp(operatorWithVar.c_str(), typeString[t],
                    strlen(typeString[t])) == 0)
        {
          if( t != atts_in->GetStatisticType() )
            atts_in->SetStatisticType( (StatisticalTrendsAttributes::StatisticTypeEnum) t );

          if( atts_in->GetVariableSource() != StatisticalTrendsAttributes::OperatorExpression )
            atts_in->SetVariableSource( StatisticalTrendsAttributes::OperatorExpression );
          var = operatorWithVar.substr(strlen(typeString[t])+1);
        }
      }
    }
    else
    {
      if( atts_in->GetVariableSource() != StatisticalTrendsAttributes::Default )
        atts_in->SetVariableSource( StatisticalTrendsAttributes::Default );
    }
}

Function: StatisticalTrendsViewerEnginePluginInfo::GetOperatorVarDescription
Declaration: virtual std::string GetOperatorVarDescription(AttributeSubject *atts, const avtPlotMetaData &plot);
Definition:
// ****************************************************************************
//  Method: StatisticalTrendsViewerEnginePluginInfo::GetOperatorVarDescription
//
//  Purpose:
//    Return the operator variable description.
//
//  Arguments:
//    atts        The attribute subject to initialize.
//    plot        The viewer plot that owns the operator.
//
//  Programmer: Allen Sanderson
//  Creation:   9 April 2013
//
// ****************************************************************************

#include <avtPlotMetaData.h>

std::string
StatisticalTrendsViewerEnginePluginInfo::GetOperatorVarDescription(AttributeSubject *atts,
                                                                   const avtPlotMetaData &plot)
{
    StatisticalTrendsAttributes *atts_in = (StatisticalTrendsAttributes *)atts;
    const char numTypes = 6;
    const char *typeString[6] = { "Sum", "Mean", "Variance",
                                  "Std. Dev.", "Slope", "Residuals" };

    std::string var = plot.GetVariableName();

    if( strncmp(var.c_str(), "operators/StatisticalTrends/",
                strlen("operators/StatisticalTrends/")) == 0)
    {
      std::string operatorWithVar =
          var.substr(strlen("operators/StatisticalTrends/"));

      for (int t = 0; t < numTypes; ++t)
      {
        if( strncmp(operatorWithVar.c_str(), typeString[t],
                    strlen(typeString[t])) == 0)
        {
          var = operatorWithVar.substr(strlen(typeString[t])+1);

          var += std::string(" ") + std::string(typeString[t]);
        }
      }
    }
    else
    {
      var += std::string(" ") +
        std::string(typeString[atts_in->GetStatisticType()]);
    }

    return var;
}

