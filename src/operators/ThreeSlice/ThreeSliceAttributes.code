Function: CopyAttributes
Declaration: bool ThreeSliceAttributes::CopyAttributes(const AttributeGroup *atts)
Definition:
// ****************************************************************************
// Method: ThreeSliceAttributes::CopyAttributes
//
// Purpose:
//   CopyAttributes method for the ThreeSliceAttributes class.
//
// Programmer: Akira Haddox
// Creation:   Mon Jun 9 13:18:30 PST 2003
//
// Modifications:
//
// ****************************************************************************

bool
ThreeSliceAttributes::CopyAttributes(const AttributeGroup *atts)
{
    if(atts->TypeName() == "PointAttributes")
    {
        if (interactive)
        {
            const PointAttributes *tmp = (const PointAttributes *)atts;
            const double *xyz = tmp->GetPoint();
            SetX(xyz[0]);
            SetY(xyz[1]);
            SetZ(xyz[2]);
            return true;
        }
    }

    if(TypeName() != atts->TypeName())
        return false;

    // Call assignment operator.
    const ThreeSliceAttributes *tmp = (const ThreeSliceAttributes *)atts;
    *this = *tmp;

    return true;
}

Function: CreateCompatible
Declaration: AttributeSubject * ThreeSliceAttributes::CreateCompatible(const std::string &tname) const
Definition:
// ****************************************************************************
// Method: ThreeSliceAttributes::CreateCompatible
//
// Purpose:
//   CreateCompatible method for the ThreeSliceAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: Akira Haddox
// Creation:   Mon Jun 9 13:18:30 PST 2003
//
// Modifications:
//   Akira Haddox, Wed Jul  2 11:11:26 PDT 2003
//   Added PointAttributes.
//
// ****************************************************************************

AttributeSubject *
ThreeSliceAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;
    if(TypeName() == tname)
        retval = new ThreeSliceAttributes(*this);
    if(tname == "PointAttributes" && interactive)
    {
        PointAttributes *p = new PointAttributes;
        double pt[3];
        pt[0] = GetX();
        pt[1] = GetY();
        pt[2] = GetZ();
        p->SetPoint(pt);
        retval = p;
    }

    return retval;
}

