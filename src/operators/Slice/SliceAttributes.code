Code: SetAxisType
Prefix:
Postfix:
    UpdateOrthogonalAxes();

Code: SetFlip
Prefix:
Postfix:
    UpdateOrthogonalAxes();

Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
// ****************************************************************************
// Method: SliceAttributes::CopyAttributes
//
// Purpose:
//   CopyAttributes method for the SliceAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Fri Mar 15 15:24:44 PST 2002
//
// Modifications:
//    Jeremy Meredith, Fri Mar 15 15:47:24 PST 2002
//    Made origin be a Point.
//
//    Jeremy Meredith, Sun Nov 17 17:38:10 PST 2002
//    Updated for some orthogonal additions.
//
//    Jeremy Meredith, Mon May  5 15:01:30 PDT 2003
//    Changed the way origin works.
//
//    Dave Pugmire, Mon Oct 22 10:25:42 EDT 2007
//    Added theta-phi method of editing the plane normal.
//
// ****************************************************************************

bool
SliceAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const SliceAttributes *tmp = (const SliceAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if(atts->TypeName() == "PlaneAttributes")
    {
        if(interactive)
        {
            const PlaneAttributes *tmp = (const PlaneAttributes *)atts;
            SetOriginPoint(tmp->GetOrigin());
            SetOriginType(Point);
            SetNormal(tmp->GetNormal());
            SetUpAxis(tmp->GetUpAxis());
            if ( GetAxisType() != Arbitrary && GetAxisType() != ThetaPhi )
                SetAxisType(Arbitrary);

            //Set theta/phi.
            double n[3] = {tmp->GetNormal()[0],tmp->GetNormal()[1],tmp->GetNormal()[2]};
            double len = sqrt(n[0]*n[0] + n[1]*n[1] + n[2]*n[2]);
            n[0] /= len;
            n[1] /= len;
            n[2] /= len;
            len = 1.0;
            double theta = atan2( n[1], n[0] ) * 57.29577951308232;
            double phi = acos( n[2] / len ) * 57.29577951308232;
            theta -= 90;
            phi -= 90;
            phi = - phi;

            theta = (fabs(theta) < 1e-5 ? 0 : theta);
            phi = (fabs(phi) < 1e-5 ? 0 : phi);
            SetTheta( theta );
            SetPhi( phi );

            retval = true;
        }
    }

    return retval;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
// Method: SliceAttributes::CreateCompatible
//
// Purpose:
//   Creates an object of the specified type initialized with the attributes
//   from this object.
//
// Arguments:
//   tname : The typename of the object that we want to create.
//
// Returns:    A new object of the type specified by tname or 0.
//
// Note:
//
// Programmer: Brad Whitlock
// Creation:   Mon Feb 11 15:36:32 PST 2002
//
// Modifications:
//    Jeremy Meredith, Fri Mar 15 15:42:27 PST 2002
//    Made origin be a Point.
//
//    Jeremy Meredith, Mon May  5 15:01:30 PDT 2003
//    Changed the way origin works.
//
//    Kathleen Bonnell, Thu Jul  3 11:18:43 PDT 2003
//    Set 'threeSpace' variable in PlaneAtts from 'project2d'.
//
//    Gunther H. Weber, Wed Aug 15 16:30:08 PDT 2007
//    Update plane tool correctly if in fixed axis and/or intercept
//    mode. Percentage, node and zone still won't work since
//    viewer does not have access to information necessary for that.
//
//    Dave Pugmire, Thu Oct 18 08:25:42 EDT 2007
//    Added theta-phi method of editing the plane normal.
//
// ****************************************************************************

AttributeSubject *
SliceAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new SliceAttributes(*this);
    }
    else if(tname == "PlaneAttributes")
    {
        PlaneAttributes *p = new PlaneAttributes;

        double nx = 0.;
        double ny = 0.;
        double nz = 0.;

        switch (GetAxisType())
        {
            case XAxis:
                nx = 1.;
                break;
            case YAxis:
                ny = 1.;
                break;
            case ZAxis:
                nz = 1.;
                break;
            case Arbitrary:
            case ThetaPhi:
                nx = GetNormal()[0];
                ny = GetNormal()[1];
                nz = GetNormal()[2];
                break;
        }
        double normal[3] = { nx, ny, nz };
        p->SetNormal(normal);

        if (GetOriginType() == Intercept)
        {
            double nl = std::sqrt(nx*nx + ny*ny + nz*nz);

            // We want to make sure for orthogonal slices that "intercept" is still
            // meaningful even when the normal is pointing in the negative direction
            if (nx+ny+nz < 0 && GetAxisType() != Arbitrary)
            {
                nl *= -1;
            }

            double d = GetOriginIntercept();

            double o[3];
            o[0] = nx * d / nl;
            o[1] = ny * d / nl;
            o[2] = nz * d / nl;

            p->SetOrigin(o);
        }
        else
        {
            p->SetOrigin(GetOriginPoint());
        }

        p->SetUpAxis(GetUpAxis());
        p->SetThreeSpace(!GetProject2d());
        retval = p;
    }

    return retval;
}

Function: UpdateOrthogonalAxes
Declaration: void UpdateOrthogonalAxes();
Definition:
// ****************************************************************************
//  Method:  SliceAttributes::UpdateOrthogonalAxes
//
//  Purpose:
//    Updates upaxis and normal for an orthogonal axis.
//
//  Programmer:  Jeremy Meredith
//  Creation:    November 17, 2002
//
//  Modifications:
//    Jeremy Meredith, Mon May  5 15:01:59 PDT 2003
//    Re-ordered some fields, so the select calls needed to be changed here.
//
//    Kathleen Bonnell, Tue Jul  8 20:21:23 PDT 2003
//    Slice now uses right-hand system when creating projection matrix.
//    Updated normals and upAxis to conform (with help from Jeremy).
//
//    Dave Pugmire, Thu Oct 18 08:25:42 EDT 2007
//    Added theta-phi method of editing the plane normal.
//
// ****************************************************************************
void
SliceAttributes::UpdateOrthogonalAxes()
{
    if (axisType == Arbitrary || axisType == ThetaPhi)
        return;

    switch(axisType)
    {
      case XAxis:
        if (!flip)
        {
            // X: Y vs Z
            normal[0] = -1.; normal[1] =  0.; normal[2] =  0.;
            upAxis[0] =  0.; upAxis[1] =  1.; upAxis[2] =  0.;
            theta = 90;
            phi = 0;
        }
        else
        {
            // X: Z vs Y
            normal[0] =  1.; normal[1] =  0.; normal[2] =  0.;
            upAxis[0] =  0.; upAxis[1] =  0.; upAxis[2] =  1.;
            theta = -90;
            phi = 0;
        }
        break;
      case YAxis:
        if (!flip)
        {
            // Y: Z vs X
            normal[0] =  0.; normal[1] = -1.; normal[2] =  0.;
            upAxis[0] =  0.; upAxis[1] =  0.; upAxis[2] =  1.;
            theta = 180;
            phi = 0;
        }
        else
        {
            // Y: X vs Z
            normal[0] =  0.; normal[1] =  1.; normal[2] =  0.;
            upAxis[0] =  1.; upAxis[1] =  0.; upAxis[2] =  0.;
            theta = 0;
            phi = 0;
        }
        break;
      case ZAxis:
        if (!flip)
        {
            // Z: Y vs X
            normal[0] =  0.; normal[1] =  0.; normal[2] =  1.;
            upAxis[0] =  0.; upAxis[1] =  1.; upAxis[2] =  0.;
            theta = 0;
            phi = 90;
        }
        else
        {
            // Z: X vs Y
            normal[0] =  0.; normal[1] =  0.; normal[2] = -1.;
            upAxis[0] =  1.; upAxis[1] =  0.; upAxis[2] =  0.;
            theta = 0;
            phi = -90;
        }
        break;
      default:
        break;
    }

    Select(6, (void *)normal, 3);
    Select(8, (void *)upAxis, 3);
}

Function: EqualTo
Declaration: virtual bool EqualTo(const AttributeGroup *atts) const;
Definition:
// ****************************************************************************
// Method: SliceAttributes::EqualTo
//
// Purpose:
//     Determines if the slice attributes are equal to another attributes
//     object.
//
// Arguments:
//   atts : An attribute group.
//
// Returns:    True if this object is equal to atts, false otherwise.
//
// Note:
//
// Programmer: Hank Childs
// Creation:   August 28, 2007
//
// Modifications:
//    Dave Pugmire, Thu Oct 18 08:25:42 EDT 2007
//    Added theta-phi method of editing the plane normal.
//
// ****************************************************************************

bool
SliceAttributes::EqualTo(const AttributeGroup *atts) const
{
    if ((atts->TypeName() != "PlaneAttributes") || !interactive)
        return AttributeSubject::EqualTo(atts);

    if (GetAxisType() != Arbitrary)
        return false;
    if (GetAxisType() != ThetaPhi)
        return false;
    if (GetOriginType() != Point)
        return false;

    const PlaneAttributes *tmp = (const PlaneAttributes *) atts;

    if (GetOriginPoint()[0] != tmp->GetOrigin()[0])
        return false;
    if (GetOriginPoint()[1] != tmp->GetOrigin()[1])
        return false;
    if (GetOriginPoint()[2] != tmp->GetOrigin()[2])
        return false;

    if (GetNormal()[0] != tmp->GetNormal()[0])
        return false;
    if (GetNormal()[1] != tmp->GetNormal()[1])
        return false;
    if (GetNormal()[2] != tmp->GetNormal()[2])
        return false;

    if (GetUpAxis()[0] != tmp->GetUpAxis()[0])
        return false;
    if (GetUpAxis()[1] != tmp->GetUpAxis()[1])
        return false;
    if (GetUpAxis()[2] != tmp->GetUpAxis()[2])
        return false;

    return true;
}

Function: SetValue1
Declaration: virtual bool SetValue(const std::string &name, const int &value);
Definition:
bool
SliceAttributes::SetValue(const std::string &name, const int &value)
{
    int index = FieldNameToIndex(name);
    bool retval;
    if(index == ID_axisType)
    {
        SetAxisType((AxisType)value);
        retval = true;
    }
    else
        retval = AttributeSubject::SetValue(name, value);
    return retval;
}

Function: SetValue2
Declaration: virtual bool SetValue(const std::string &name, const bool &value);
Definition:
bool
SliceAttributes::SetValue(const std::string &name, const bool &value)
{
    int index = FieldNameToIndex(name);
    bool retval;
    if(index == ID_flip)
    {
        SetFlip(value);
        retval = true;
    }
    else
        retval = AttributeSubject::SetValue(name, value);
    return retval;
}
