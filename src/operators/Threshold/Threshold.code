Function: CopyAttributes
Declaration: bool CopyAttributes(const AttributeGroup *atts);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::CopyAttributes
//
// Purpose:
//   CopyAttributes method for the ThresholdAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Sep 13 08:54:28 PDT 2005
//
// Modifications:
//
//   Mark Blair, Tue Mar  7 13:25:00 PST 2006
//   Upgraded to support multiple threshold variables.
//
//   Mark Blair, Wed Sep 20 10:59:41 PDT 2006
//   Uses time ordinals from the Extents tool to avoid conflict with changes
//   hand-typed by the user in the Threshold operator's GUI window.
//
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   Verifies that default plot variable is scalar if in threshold variable list.
//
//    Jeremy Meredith, Fri Feb 15 13:14:22 EST 2008
//    Added support for AxisRestrictionAttributes.
//
//   Jeremy Meredith, Tue Apr 22 14:31:20 EDT 2008
//   Removed Extents tool.  (Functionality subsumed by axis restriction tool.)
//
//   Kevin Griffin, Wed Feb 15 11:50:13 PDT 2017
//   Added boundsRange
//
// ****************************************************************************

bool
ThresholdAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if (TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const ThresholdAttributes *tmp = (const ThresholdAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if (atts->TypeName() == "AxisRestrictionAttributes")
    {
        const AxisRestrictionAttributes *arAtts =
            (const AxisRestrictionAttributes*)atts;

        stringVector toolVarNames = arAtts->GetNames();
        doubleVector toolMinima   = arAtts->GetMinima();
        doubleVector toolMaxima   = arAtts->GetMaxima();
        char buffer[50];

        for (size_t lv=0; lv < listedVarNames.size(); lv++)
        {
            for (size_t tv=0; tv < toolVarNames.size(); tv++)
            {
                if (toolVarNames[tv] == listedVarNames[lv])
                {
                    lowerBounds[lv] = toolMinima[tv];
                    upperBounds[lv] = toolMaxima[tv];
                    snprintf(buffer, sizeof(buffer), "%g:%g",toolMinima[tv],toolMaxima[tv]);
                    boundsRange[lv] =  std::string(buffer);
                }
                else if (toolVarNames[tv] == defaultVarName &&
                         listedVarNames[lv] == "default" &&
                         defaultVarIsScalar)
                {
                    lowerBounds[lv] = toolMinima[tv];
                    upperBounds[lv] = toolMaxima[tv];
                    snprintf(buffer, sizeof(buffer), "%g:%g",toolMinima[tv],toolMaxima[tv]);
                    boundsRange[lv] =  std::string(buffer);
                }
            }
        }

        retval = true;
    }

    return retval;
}

Function: CreateNode
Declaration: virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::CreateNode
//
// Purpose:
//   This method creates a DataNode representation of the object so it can be saved to a config file.
//
// Note:       Copied from ThresholdOpAttributes in common/state.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//
//   Kevin Griffin, Wed Feb 15 11:50:13 PDT 2017
//   Added boundsRange
//
// ****************************************************************************

bool
ThresholdAttributes::CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd)
{
    if(parentNode == 0)
        return false;

    ThresholdOpAttributes defaultObject;
    bool addToParent = false;
    // Create a node for ThresholdOpAttributes.
    DataNode *node = new DataNode("ThresholdAttributes");

    if(completeSave || !FieldsEqual(ID_outputMeshType, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("outputMeshType", outputMeshType));
    }

    if(completeSave || !FieldsEqual(ID_boundsInputType, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("boundsInputType", boundsInputType));
    }

    if(completeSave || !FieldsEqual(ID_listedVarNames, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("listedVarNames", listedVarNames));
    }

    if(completeSave || !FieldsEqual(ID_zonePortions, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("zonePortions", zonePortions));
    }

    if(completeSave || !FieldsEqual(ID_lowerBounds, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("lowerBounds", lowerBounds));
    }

    if(completeSave || !FieldsEqual(ID_upperBounds, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("upperBounds", upperBounds));
    }

    if(completeSave || !FieldsEqual(ID_boundsRange, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("boundsRange", boundsRange));
    }

    if(completeSave || !FieldsEqual(ID_defaultVarName, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("defaultVarName", defaultVarName));
    }

    if(completeSave || !FieldsEqual(ID_defaultVarIsScalar, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("defaultVarIsScalar", defaultVarIsScalar));
    }


    // Add the node to the parent node.
    if(addToParent || forceAdd)
        parentNode->AddNode(node);
    else
        delete node;

    return (addToParent || forceAdd);
}

Function: SetFromNode
Declaration: virtual void SetFromNode(DataNode *node);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::SetFromNode
//
// Purpose:
//   This method sets attributes in this object from values in a DataNode representation of the object.
//
// Note:       Copied from ThresholdOpAttributes in common/state.
//
// Programmer: xml2atts
// Creation:   omitted
//
// Modifications:
//
// ****************************************************************************

void
ThresholdAttributes::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("ThresholdAttributes");
    if(searchNode == 0)
        return;

    DataNode *node;
    if((node = searchNode->GetNode("outputMeshType")) != 0)
        SetOutputMeshType(node->AsInt());
    if((node = searchNode->GetNode("boundsInputType")) != 0)
        SetBoundsInputType(node->AsInt());
    if((node = searchNode->GetNode("listedVarNames")) != 0)
        SetListedVarNames(node->AsStringVector());
    if((node = searchNode->GetNode("zonePortions")) != 0)
        SetZonePortions(node->AsIntVector());
    if((node = searchNode->GetNode("lowerBounds")) != 0)
        SetLowerBounds(node->AsDoubleVector());
    if((node = searchNode->GetNode("upperBounds")) != 0)
        SetUpperBounds(node->AsDoubleVector());
    if((node = searchNode->GetNode("boundsRange")) != 0)
        SetBoundsRange(node->AsStringVector());
    if((node = searchNode->GetNode("defaultVarName")) != 0)
        SetDefaultVarName(node->AsString());
    if((node = searchNode->GetNode("defaultVarIsScalar")) != 0)
        SetDefaultVarIsScalar(node->AsBool());
}

Target: xml2info
Function: ThresholdViewerEnginePluginInfo::InitializeOperatorAtts
Declaration: virtual void ThresholdViewerEnginePluginInfo::InitializeOperatorAtts(AttributeSubject *atts, const avtPlotMetaData &plot, const bool fromDefault);
Definition:
// ****************************************************************************
//  Method: ThresholdViewerEnginePluginInfo::InitializeOperatorAtts
//
//  Purpose:
//    Initialize the operator attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: mblair -- generated by xml2info
//  Creation:   Thu Mar 9 16:03:07 PST 2006
//
//   Modifications:
//
//     Mark Blair, Thu Mar  9 18:25:00 PST 2006
//     Upgraded to support multiple threshold variables.
//
//     Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//     Now accommodates an empty list of threshold variables; does pass-through.
//     Also checks for attribute consistency.
//
//     Mark Blair, Wed Sep  6 19:13:00 PDT 2006
//     Corrected bad policy: Was sometimes changing user's defaults explicitly.
//
//     Mark Blair, Thu Sep 28 12:07:05 PDT 2006
//     Accommodate old Threshold mode in CLI by supplying any missing default
//     attribute values if attributes are set up for a single threshold variable.
//
//     Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//     Set attribute flag that indicates whether plot variable is a scalar.
//
// ****************************************************************************
#include <avtPlotMetaData.h>
#include <DebugStream.h>
void
ThresholdViewerEnginePluginInfo::InitializeOperatorAtts(AttributeSubject *atts,
                                                  const avtPlotMetaData &plot,
                                                  const bool fromDefault)
{
    if (fromDefault)
        *(ThresholdAttributes *)atts = *defaultAtts;
    else
        *(ThresholdAttributes *)atts = *clientAtts;

    ThresholdAttributes *initAtts = (ThresholdAttributes *)atts;

    initAtts->SupplyMissingDefaultsIfAppropriate();

    initAtts->SetDefaultVarName(plot.GetVariableName());
    initAtts->SetDefaultVarIsScalar(plot.GetVariableType() == AVT_SCALAR_VAR);

    UpdateOperatorAtts(initAtts, plot);
}

Function: ThresholdEnginePluginInfo::AllocAvtPluginFilter
Declaration: virtual avtPluginFilter *AllocAvtPluginFilter();
Definition:
// ****************************************************************************
//  Method: ThresholdEnginePluginInfo::AllocAvtPluginFilter
//
//  Purpose:
//    Return a pointer to a newly allocated avtPluginFilter.
//
//  Returns:    A pointer to the newly allocated avtPluginFilter.
//
//  Programmer: Brad Whitlock
//  Creation:   Fri Dec 10 16:40:13 PST 2010
//
// ****************************************************************************
#include <avtThresholdPluginFilter.h>
avtPluginFilter *
ThresholdEnginePluginInfo::AllocAvtPluginFilter()
{
    return new avtThresholdPluginFilter;
}

